geom_sf(data = PHnr, fill = "#ee0000", alpha = .9, color = NA) +
geom_sf(data = Global, fill = "#ffffff", alpha = .25, color = "#000000") +
#geom_sf(data = Coords_Global_sf, aes(fill = Class_Article), size = 3, alpha = 1, show.legend = "point", shape = 21, colour = "black") +
coord_sf(xlim = c(-13.6, 30), ylim = c(35, 61), expand = FALSE) +
#geom_label_repel(data = Coords_Global, size = 3.75, seed = 10, min.segment.length = 0, force = 25, segment.curvature = 1,
#                 nudge_x = 0, nudge_y = 0, max.overlaps = Inf, fontface = "bold", colour = "black",
#                 aes(x = Longitude, y = Latitude, label = LocationOnly,
#                 fill = Class_Article), alpha = 0.9, show.legend = FALSE) +
scale_fill_manual(values = c("#44AA99", "#F0E442", "#E69F00"), drop = FALSE) +
scale_colour_manual(values = c("#44AA99", "#F0E442", "#E69F00"), drop = FALSE) +
scale_x_continuous(breaks = seq(-120, 125, by = 10)) +
scale_y_continuous(breaks = seq(-20, 70, by = 10)) +
annotation_north_arrow(location = "tl", which_north = "true", style = north_arrow_fancy_orienteering,
height = unit(2, "cm"), width = unit(2, "cm"),) +
annotation_scale(location = 'tl', line_width = 1.25, text_cex = 1.2, style = "ticks", pad_y = unit(2, "cm"),) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_rect(colour = "black", linewidth = .5, fill = NA),
panel.grid.major = element_line(color = "#d9d9d9", linetype = "dashed", linewidth = .00005),
plot.margin = margin(t = .005, b = .005, r = .2, l = .2, unit = "cm"),
legend.background = element_rect(fill = "#c6dbef", linewidth = .15, color = "#5e5e5e", linetype = "dotted"),
legend.key = element_rect(fill = "#c6dbef"),
legend.position = "top",
axis.text.x = element_text(color = "black", size = 22, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "black", size = 22, face = "bold"),
axis.title = element_blank(),
axis.ticks = element_line(color = "black", linewidth = .5)) +
guides(fill = guide_legend(title = "Biological Status", title.theme = element_text(size = 10.5, face = "bold"),
label.theme = element_text(size = 8, face = "italic"),
override.aes = list(size = 3, alpha = .9)), colour = "none")
ggsave(Map, file = "Presentation.pdf", device = cairo_pdf,
width = 20, height = 20, scale = 1, limitsize = FALSE, dpi = 600)
ggsave(Map, file = "Presentation.jpeg",
width = 20, height = 20, scale = 1, limitsize = FALSE, dpi = 600)
### The BEGINNING ~~~~~
##
# NLSparrow--PCA | First written by Hom√®re J. Alves Monteiro with later modifications by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tidyverse, plyr, RColorBrewer, extrafont, ggforce, ggstar, ggrepel, RcppCNPy, reshape2, lemon, plotly,
gridExtra, grid, cowplot, patchwork, ggpubr, rphylopic)
# Loads data ~
dataauto <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.OnlyAutosomes.cov"), header = FALSE, stringsAsFactors = FALSE)
datasex <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.OnlySexual.cov"), header = FALSE, stringsAsFactors = FALSE)
#dataauto <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.Pruned.OnlyAutosomes.cov"), header = FALSE, stringsAsFactors = FALSE)
#datasex <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.Pruned.OnlySexual.cov"), header = FALSE, stringsAsFactors = FALSE)
annot <- read.table("NLSparrow.labels", sep = "\t", header = FALSE, stringsAsFactors = FALSE)
# Runs PCA ~
PCAauto <- eigen(dataauto)
PCAsex <- eigen(datasex)
# Merges the first 3 PCs with annot ~
PCAauto_Annot <- as.data.frame(cbind(annot, PCAauto$vectors[, c(1:3)])); colnames(PCAauto_Annot) <- c("Sample_ID", "PCA_1", "PCA_2", "PCA_3")
PCAsex_Annot <- as.data.frame(cbind(annot, PCAsex$vectors[, c(1:3)])); colnames(PCAsex_Annot) <- c("Sample_ID", "PCA_1", "PCA_2", "PCA_3")
# Merges the first 3 PCs with annot ~
PCAauto_Annot$CHR <- "Autosomes"
PCAsex_Annot$CHR <- "Allosome (Z)"
# Binds the 2 DFs based on common columns ~
fulldf <- rbind(PCAauto_Annot, PCAsex_Annot)
# Expands PCA_Annot by adding Population ~
fulldf$Population <- ifelse(grepl("FR0", fulldf$Sample_ID), "Sales",
ifelse(grepl("KAZ", fulldf$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", fulldf$Sample_ID), "Lesina",
ifelse(grepl("Crotone", fulldf$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", fulldf$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", fulldf$Sample_ID), NA,
ifelse(grepl("PD22NLD0146F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0", fulldf$Sample_ID), "Utrecht", "Error")))))))))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
NA))
# Expands PCA_Annot by adding Species ~
fulldf$Species <- ifelse(fulldf$Population %in% c("Utrecht", "Sales", "Garderen"), "House",
ifelse(fulldf$Population %in% c("Chokpak", "Lesina"), "Spanish",
ifelse(fulldf$Population %in% c("Crotone", "Guglionesi"), "Italian",
ifelse(fulldf$Population %in% NA, NA, "Error"))))
# Reorders Population ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
NA))
# Defines the shapes to be used for each Group ~
Shapes <- as.vector(c(1, 2, 3, 13, 21, 11, 23))
# Creates legend plot ~
MyLegend_Plot <-
ggplot(data = fulldf, aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), size = 2.8, starstroke = .15, alpha = .7) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000"), na.translate = FALSE) +
scale_starshape_manual(values = Shapes, na.translate = FALSE) +
scale_x_continuous("PC 1 (4.3%)",
#breaks = c(0.99, 1, 1.01),
#labels = c("0.99", "1", "1.01"),
#limits = c(-.21, .21),
expand = c(.005, .005)) +
scale_y_continuous("PC 2 (1.2%)",
#breaks = c(-.15, 0, .15, .3, .45),
#labels = c("-.15", "0", ".15", ".3", ".45"),
#limits = c(-0.0525, 0.0525),
expand = c(.03, .03)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "top",
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 15, l = 15),
legend.box = "vertical",
legend.box.margin = margin(t = 20, b = 30, r = 0, l = 0)) +
guides(starshape = guide_legend(title = "Population", title.theme = element_text(size = 16, face = "bold"),
label.theme = element_text(size = 15),
override.aes = list(starshape = Shapes, size = 5, starstroke = .15), nrow = 1, order = 2),
fill = guide_legend(title = "Species", title.theme = element_text(size = 16, face = "bold"),
label.theme = element_text(size = 15),
override.aes = list(starshape = 21, size = 5, starstroke = .15), nrow = 1, order = 1),
colour = "none")
# Defines the shapes to be used for each Group ~
Shapes_2 <- as.vector(c(1, 2, 3, 13, 21, 11, 23, 14))
# Combines all populations from the Faroe Islands ~
fulldf$Species <- as.character(fulldf$Species)
fulldf$Population <- as.character(fulldf$Population)
fulldf <- fulldf %>%
mutate_at(c("Population", "Species"), ~replace_na(., "Target"))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Target"))
# Reorders Population ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
"Target"))
# Expands PCA_Annot by adding Labels ~
fulldf$Labels <- ifelse(fulldf$Species %in% c("Target"), "Target", "")
# Gets Eigenvalues of each Eigenvectors ~
PCAauto_Eigenval_Sum <- sum(PCAauto$values)
(PCAauto$values[1]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[2]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[3]/PCAauto_Eigenval_Sum)*100
PCAauto_12 <-
ggplot(data = subset(fulldf, CHR == "Autosomes"), aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), alpha = .7, size = 2.8, starstroke = .15) +
facet_rep_grid(CHR ~. , scales = "free_x") +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#d9d9d9")) +
scale_starshape_manual(values = Shapes_2) +
geom_label_repel(data = subset(fulldf, CHR == "Autosomes"), aes(label = Labels),
family = ".SF Compact Rounded", size = 3.8, fontface = "bold", max.overlaps = 100, nudge_x = .055, nudge_y = .05,
point.padding = .6, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"),
ends = "last", type = "open")) +
geom_mark_ellipse(aes(filter = Species == "House", label = "House\nSparrow"), con.colour = "#1E90FF", colour = "#1E90FF",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "straight", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Spanish", label = "Spanish\nSparrow"), con.colour = "#ee0000", colour = "#ee0000",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Italian", label = "Italian\nSparrow"), con.colour = "#FFD700", colour = "#FFD700",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
scale_x_continuous("PC 1 (13.2%)",
#scale_x_continuous("PC 1 (5.5%)",
#breaks = c(0.99, 1, 1.01),
#labels = c("0.99", "1", "1.01"),
limits = c(-.21, .21),
expand = c(0, 0)) +
scale_y_continuous("PC 2 (2.5%)",
#scale_y_continuous("PC 2 (2.2%)",
#breaks = c(-.08, -.04, 0.00),
#labels = c("-0.08", "-0.04", "0.00"),
limits = c(-.7, .35),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x = element_text(size = 15, face = "bold", margin = margin(t = 18, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 15, face = "bold", margin = margin(t = 0, r = 18, b = 0, l = 0)),
axis.text.x = element_text(color = "#000000", size = 11, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 11, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(colour = "#000000", size = 13, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
PCAsex_Eigenval_Sum <- sum(PCAsex$values)
(PCAsex$values[1]/PCAsex_Eigenval_Sum)*100
(PCAsex$values[2]/PCAsex_Eigenval_Sum)*100
(PCAsex$values[3]/PCAsex_Eigenval_Sum)*100
PCAsex_12 <-
ggplot(data = subset(fulldf, CHR == "Allosome (Z)"), aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), alpha = .7, size = 2.8, starstroke = .15) +
facet_rep_grid(CHR ~. , scales = "free_x") +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#d9d9d9")) +
scale_starshape_manual(values = Shapes_2) +
geom_label_repel(data = subset(fulldf, CHR == "Allosome (Z)"), aes(label = Labels),
family = ".SF Compact Rounded", size = 3.8, fontface = "bold", max.overlaps = 100, nudge_x = .055, nudge_y = .25,
point.padding = .6, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"),
ends = "last", type = "open")) +
geom_mark_ellipse(aes(filter = Species == "House", label = "House\nSparrow"), con.colour = "#1E90FF", colour = "#1E90FF",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "straight", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Spanish", label = "Spanish\nSparrow"), con.colour = "#ee0000", colour = "#ee0000",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Italian", label = "Italian\nSparrow"), con.colour = "#FFD700", colour = "#FFD700",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
scale_x_continuous("PC 1 (19.0%)",
#scale_x_continuous("PC 1 (9.1%)",
#breaks = c(0.99, 1, 1.01),
#labels = c("0.99", "1", "1.01"),
limits = c(-.21, .21),
expand = c(0, 0)) +
scale_y_continuous("PC 2 (6.7%)",
#scale_y_continuous("PC 2 (3.8%)",
#breaks = c(-.08, -.04, 0.00),
#labels = c("-0.08", "-0.04", "0.00"),
limits = c(-.7, .35),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x = element_text(size = 15, face = "bold", margin = margin(t = 18, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 15, face = "bold", margin = margin(t = 0, r = 18, b = 0, l = 0)),
axis.text.x = element_text(color = "#000000", size = 11, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 11, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(colour = "#000000", size = 13, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
# Isolates legend ~
MyLegendBlog <- get_legend(MyLegend_Plot)
# Gets final plot ~
PCA_Plot <- ggarrange(PCAauto_12, PCAsex_12, nrow = 2, legend.grob = MyLegendBlog)
# Saves plot ~
ggsave(PCA_Plot, file = "Presentation.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1.1, width = 11, height = 11, dpi = 600)
ggsave(PCA_Plot, file = "Presentation.jpeg",
limitsize = FALSE, scale = 1.1, width = 11, height = 11, dpi = 600)
#
##
### The END ~~~~~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("plot_twisst.R")
#weights file with a column for each topology
weights_file <- "../../../../LargeFiles/AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.chr1.SW250.Weights.csv.gz"
#coordinates file for each window
window_data_file <- "../../../../LargeFiles/AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.chr1.SW250.data.txt"
twisst_data <- import.twisst(weights_files=weights_file,
window_data_files=window_data_file)
#a summary plot shows all the topologies and a bar plot of their relative weightings
plot.twisst.summary(twisst_data, lwd = 3, cex = .7)
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon)
# Imports weights ~
Wlgz <- list()
Wlistgz <- dir (path = "../../../../LargeFiles/", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon)
# Imports weights ~
Wlgz <- list()
Wlistgz <- dir (path = "../../../../LargeFiles/", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
# Imports windows¬¥ data ~
Wilgz <- list()
Wilistgz <- dir(path = "../../../../LargeFiles/", pattern = ".txt")
for (k in 1:length(Wilistgz)){
Wilgz[[k]] <- read.table(Wilistgz[k])[-1, ]
colnames(Wilgz[[k]]) <- c("Scaffold", "Start", "End", "Mid", "Sites", "lnL")}
Wilgz <- list()
Wilistgz <- dir(path = "../../../../../LargeFiles/", pattern = ".txt")
for (k in 1:length(Wilistgz)){
Wilgz[[k]] <- read.table(Wilistgz[k])[-1, ]
colnames(Wilgz[[k]]) <- c("Scaffold", "Start", "End", "Mid", "Sites", "lnL")}
# Imports windows¬¥ data ~
Wilgz <- list()
Wilistgz <- dir(path = "../../../../../LargeFiles/", pattern = ".txt")
for (k in 1:length(Wilistgz)){
Wilgz[[k]] <- read.table(Wilistgz[k])[-1, ]
colnames(Wilgz[[k]]) <- c("Scaffold", "Start", "End", "Mid", "Sites", "lnL")}
# Imports windows¬¥ data ~
Wilgz <- list()
Wilistgz <- dir(path = "../../../LargeFiles/", pattern = ".txt")
for (k in 1:length(Wilistgz)){
Wilgz[[k]] <- read.table(Wilistgz[k])[-1, ]
colnames(Wilgz[[k]]) <- c("Scaffold", "Start", "End", "Mid", "Sites", "lnL")}
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon)
# Imports weights ~
Wlgz <- list()
Wlistgz <- dir (path = "../../../../LargeFiles/", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir (path = "../../../LargeFiles/", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "../../../LargeFiles/", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "../../../../LargeFiles/", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "../../../../../LargeFiles/", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
# Imports weights ~
Wlgz <- list()
Wlistgz <- dir(path = "../../../../../LargeFiles/", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "../../../../../LargeFiles", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "../../../../LargeFiles", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
### The BEGINNING ~~~~~
##
# NLSparrow--TWISST | by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon)
# Imports weights ~
Wlgz <- list()
Wlistgz <- dir(path = "../../../../LargeFiles", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
setwd("~/Desktop/UiO Postdoc/Current/NLSparrow/NLSparrow--Pipeline/NLSparrow--Plots/NLSparrow--TWISST")
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon)
# Imports weights ~
Wlgz <- list()
Wlistgz <- dir(path = "../../../../LargeFiles", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "../../../../LargeFiles/", pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "../../../../LargeFiles/", pattern = ".csv.gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "./../../../../LargeFiles/", pattern = ".csv.gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "../../../../LargeFiles/", sep = "/", pattern = ".csv.gz")
Wlgz <- list()
Wlistgz <- dir(path = "/../../../../LargeFiles/", pattern = ".csv.gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "/../../../../LargeFiles/", pattern = "*.csv.gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
Wlgz <- list()
Wlistgz <- dir(path = "./../../../../LargeFiles/", pattern = "*.csv.gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon)
# Imports weights ~
Wlgz <- list()
#Wlistgz <- dir(path = "/../../../../LargeFiles/", pattern = ".csv.gz")
Wlistgz <- dir(pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
### The BEGINNING ~~~~~
##
# NLSparrow--TWISST | by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon)
# Imports weights ~
Wlgz <- list()
#Wlistgz <- dir(path = "/../../../../LargeFiles/", pattern = ".csv.gz")
Wlistgz <- dir(pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
colnames(Wlgz[[k]]) <- c("Target ~ Spanish", "Target ~ Italian", "Target ~ House")
Wlgz[[k]]$CHR <- gsub("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub(".SW250.Weights.csv.gz", "", Wlgz[[k]]$CHR)}
# Melts weights ~
WeightsDF <- reshape2::melt(Wlgz)
WeightsDF <- WeightsDF[, -ncol(WeightsDF)]
# Imports windows¬¥ data ~
Wilgz <- list()
#Wilistgz <- dir(path = "../../../../LargeFiles/", pattern = ".txt")
Wilistgz <- dir(pattern = ".txt")
for (k in 1:length(Wilistgz)){
Wilgz[[k]] <- read.table(Wilistgz[k])[-1, ]
colnames(Wilgz[[k]]) <- c("Scaffold", "Start", "End", "Mid", "Sites", "lnL")}
WindowsDF <- reshape2::melt(Wilgz)
WindowsDF <- WindowsDF[, -ncol(WindowsDF)]
# Merges WeightsDF & WindowsDF ~
fulldf <- cbind(WeightsDF, WindowsDF)
# Converts DF from wide into long ~
fulldfUp <- gather(fulldf, Weight, Value, "Target ~ Spanish", "Target ~ Italian", "Target ~ House")
View(fulldfUp)
