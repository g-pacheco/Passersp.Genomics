for (x in patterns) {
subset_df <- subset(fulldfUp, CHR == x)
max_mid <- max(as.numeric(subset_df$Mid), na.rm = TRUE)
min_mid <- min(as.numeric(subset_df$Mid), na.rm = TRUE)
breaks_and_labels <- generate_dynamic_breaks_and_labels(min_mid, max_mid)
Mean_Delta <- mean(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0], na.rm = TRUE)
Percentile_95 <- quantile(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0], probs = .95, na.rm = TRUE)
Percentile_99 <- quantile(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0], probs = .99, na.rm = TRUE)
Count_95 <- sum(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0] >= Percentile_95, na.rm = TRUE)
Count_99 <- sum(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0] >= Percentile_99, na.rm = TRUE)
filtered_subset <- subset(subset_df, Estimation == "Delta" & as.numeric(Value) >= 0 & as.numeric(Value) >= Percentile_95)
filtered_subset$Start <- as.numeric(filtered_subset$Mid) - 1
filtered_subset$End <- as.numeric(filtered_subset$Mid)
filtered_subset <- filtered_subset[, c("CHR", "Start", "End", "Value")]
filtered_positions[[x]] <- filtered_subset
# Combines the list into a single data frame ~
filtered_positions_df <- do.call(rbind, filtered_positions)
# Saves the BED file with the filtered positions ~
write.table(filtered_positions_df, "Y150239Genomics--TWISST_FilteredPositions95.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Creates Y150239 plot ~
Y150239_Plot <-
ggplot() +
geom_area(data = subset_df %>% filter(Estimation %in% c("Y150239 ~ House", "Y150239 ~ Spanish")),
aes(x = as.numeric(Mid), y = as.numeric(Value), fill = Estimation, group = Estimation),
position = "fill", colour = "#000000", alpha = .3, linetype = 1, linewidth = .2) +
scale_x_continuous("Genomic Position",
breaks = breaks_and_labels$breaks,
labels = breaks_and_labels$labels,
limits = c(min_mid, max_mid + 1000),
expand = c(0, 0)) +
scale_y_continuous("Weights",
breaks = c(.25, .50, .75),
labels = c("25%", "50%", "75%"),
expand = c(0, 0)) +
scale_fill_manual(values = c("#c2a5cf", "#3288bd", "#d53e4f")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", linewidth = .00005),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 0, r = 40, b = 0, l = 15)),
axis.text.x = element_blank(),
axis.text.y = element_text(family = "Optima", size = 24, colour = "#000000", face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line.x = element_line(colour = "#000000", linewidth = .3),
axis.line.y = element_line(colour = "#000000", linewidth = .3),
legend.position = "top",
legend.title = element_text(margin = margin(r = 20)),
legend.text = element_text(margin = margin(r = 15, l = 15)),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 40, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = 1.75, linetype = 1)),
fill = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = .3, linetype = 1)))
# Create Meerkerk plot ~
Meerkerk_Plot <- ggplot() +
geom_area(data = subset_df %>% filter(Estimation %in% c("Meerkerk ~ House", "Meerkerk ~ Spanish")),
aes(x = as.numeric(Mid), y = as.numeric(Value), fill = Estimation, group = Estimation),
position = "fill", colour = "#000000", alpha = .3, linetype = 1, linewidth = .2) +
scale_x_continuous("Genomic Position",
breaks = breaks_and_labels$breaks,
labels = breaks_and_labels$labels,
limits = c(min_mid, max_mid + 1000),
expand = c(0, 0)) +
scale_y_continuous("Weights",
breaks = c(.25, .50, .75),
labels = c("25%", "50%", "75%"),
expand = c(0, 0)) +
scale_fill_manual(values = c("#c2a5cf", "#3288bd", "#d53e4f")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", linewidth = .00005),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 0, r = 40, b = 0, l = 15)),
axis.text.x = element_blank(),
axis.text.y = element_text(family = "Optima", size = 24, colour = "#000000", face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line.x = element_line(colour = "#000000", linewidth = .3),
axis.line.y = element_line(colour = "#000000", linewidth = .3),
legend.position = "top",
legend.title = element_text(margin = margin(r = 20)),
legend.text = element_text(margin = margin(r = 15, l = 15)),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 40, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = 1.75, linetype = 1)),
fill = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = .3, linetype = 1)))
# Create Delta plot ~
Delta_Plot <-
ggplot() +
geom_line(data = subset_df %>% filter(Estimation %in% c("Delta")), aes(x = as.numeric(Mid), y = as.numeric(Value)), colour = "#000000",
position = "identity", linetype = 1, linewidth = .2) +
geom_hline(yintercept = Mean_Delta, linetype = "twodash", color = "#33a02c", linewidth = 1) +
scale_x_continuous("Genomic Position",
breaks = breaks_and_labels$breaks,
labels = breaks_and_labels$labels,
limits = c(min_mid, max_mid + 1000),
expand = c(0, 0)) +
scale_y_continuous("Delta",
limits = c(-1.1, 1.1),
expand = c(0, 0)) +
scale_fill_manual(values = c("#c2a5cf", "#3288bd", "#d53e4f")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", linewidth = .00005),
panel.grid.minor = element_blank(),
axis.title.x = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 40, r = 0, b = 15, l = 0)),
axis.title.y = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 0, r = 40, b = 0, l = 15)),
axis.text = element_text(family = "Optima", size = 24, colour = "#000000", face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line.x = element_line(colour = "#000000", linewidth = .3),
axis.line.y = element_line(colour = "#000000", linewidth = .3))
# Arranges the plots into a single panel ~
Panel_Plot <- Y150239_Plot + Meerkerk_Plot + Delta_Plot + plot_layout(ncol = 1)
# Save the panel ~
ggsave(paste("Y150239Genomics--TWISST_SW150_FillArea_", x, ".pdf", sep = ""), plot = Panel_Plot,
device = cairo_pdf, limitsize = FALSE, width = 40, height = 25, scale = 1, dpi = 600)}
#ggsave(paste("Y150239Genomics--TWISST_FillArea_", x, ".png", sep = ""), plot = Panel_Plot,
#       limitsize = FALSE, width = 40, height = 25, scale = 1, dpi = 600)}
# Loads protein dataset ~
HouseSparrow_GOTerms <- read.delim("./GOTerms/house_sparrow_genome_assembly-18-11-14_masked.Protein_gffreads.fasta.tsv", header = FALSE, sep = "\t")
HouseSparrow_GOTerms <- HouseSparrow_GOTerms[, c(1, 3, 4, 5, 14)]
colnames(HouseSparrow_GOTerms) <- c("Gene_ID", "Gene_Size", "Analysis_Type", "Accession", "GOTerms")
# Collapses GO Terms by GeneID ~
HouseSparrow_GOTerms <- HouseSparrow_GOTerms %>%
filter(GOTerms != "-" & GOTerms != "") %>%
group_by(Gene_ID) %>%
summarise(GOTerms = paste(unique(GOTerms), collapse = "|"))
# Converts filtered_positions_df to GRanges object ~
Regions_GR <- GRanges(seqnames = filtered_positions_df$CHR, ranges = IRanges(start = filtered_positions_df$Start, end = filtered_positions_df$End))
# Imports the House Sparrow annotation ~
HouseGFF <- import("house_sparrow.gff")
# Finds gene overlaps ~
GeneOverlaps <- findOverlaps(HouseGFF, Regions_GR)
# Extract genes within the ranges
GenesInRange <- HouseGFF[queryHits(GeneOverlaps)]
GenesInRange_df <- data.frame(Chromosome = as.character(seqnames(GenesInRange)),
Start = start(GenesInRange),
End = end(GenesInRange),
Gene_ID = mcols(GenesInRange)$ID,
Gene_Name = mcols(GenesInRange)$Name,
Type = mcols(GenesInRange)$type)
# Merges data frames ~
fulldf <- merge(HouseSparrow_GOTerms, GenesInRange_df, by = "Gene_ID")
fulldf <- fulldf %>%
distinct(Gene_ID, .keep_all = TRUE)
# Merges data frames ~
fulldf <- merge(HouseSparrow_GOTerms, GenesInRange_df, by = "Gene_ID")
fulldf <- fulldf %>%
distinct(Gene_ID, .keep_all = TRUE)
# Gets InGroupGOTerms ~
InGroupGOTerms <- fulldf %>%
separate_rows(GOTerms, sep = "\\|") %>%
select(Gene_ID, GOTerms) %>%
group_by(GOTerms) %>%
summarise(genes = list(Gene_ID))
View(fulldf)
# Gets InGroupGOTerms ~
InGroupGOTerms <- fulldf %>%
separate_rows(GOTerms, sep = "\\|") %>%
dplyr::select(Gene_ID, GOTerms) %>%
group_by(GOTerms) %>%
summarise(genes = list(Gene_ID))
View(InGroupGOTerms)
# Gets InGroupGOTerms ~
InGroupGOTerms <- fulldf %>%
separate_rows(GOTerms, sep = "\\|") %>%
dplyr::select(Gene_ID, GOTerms) %>%
group_by(GOTerms) %>%
summarise(genes = list(Gene_ID))
head(InGroupGOTerms)
InGroupGOTerms <- fulldf %>%
tidyr::separate_rows(GOTerms, sep = "\\|") %>%
dplyr::select(Gene_ID, GOTerms) %>%
group_by(GOTerms) %>%
summarise(genes = list(Gene_ID))
head(InGroupGOTerms)
View(InGroupGOTerms)
InGroupGOTerms <- fulldf %>%
tidyr::separate_rows(GOTerms, sep = "\\|") %>%
dplyr::select(Gene_ID, GOTerms) %>%
group_by(GOTerms) %>%
summarise(Genes = list(Gene_ID))
head(InGroupGOTerms)
# Convert to a data.frame if necessary
fulldf <- as.data.frame(fulldf)
InGroupGOTerms <- fulldf %>%
separate_rows(GOTerms, sep = "\\|") %>%
select(Gene_ID, GOTerms) %>%
group_by(GOTerms) %>%
summarise(genes = list(Gene_ID))
class(fulldf)
# Convert to a data.frame if necessary
fulldf <- as.data.frame(fulldf)
# Proceed with the select and summarise steps
InGroupGOTerms <- fulldf %>%
separate_rows(GOTerms, sep = "\\|") %>%
select(Gene_ID, GOTerms) %>%
group_by(GOTerms) %>%
summarise(genes = list(Gene_ID))
# Gets InGroupGOTerms ~
InGroupGOTerms <- fulldf %>%
tidyr::separate_rows(GOTerms, sep = "\\|") %>%
dplyr::select(Gene_ID, GOTerms) %>%
group_by(GOTerms) %>%
summarise(Genes = list(Gene_ID))
View(InGroupGOTerms)
head(InGroupGOTerms)
InGroupGOTerms <- fulldf %>%
tidyr::separate_rows(GOTerms, sep = "\\|") %>%
dplyr::select(Gene_ID, GOTerms) %>%
group_by(GOTerms) %>%
summarise(Genes = paste(Gene_ID, collapse = ", "), .groups = "drop")
head(InGroupGOTerms)
genes_of_interest <- unlist(strsplit(InGroupGOTerms$Genes, ", "))
head(genes_of_interest)
# Split the GO terms in the Genes column, then count their frequencies
go_term_freq <- table(unlist(strsplit(InGroupGOTerms$Genes, ", ")))
head(go_term_freq)
# Split the GOTerms column into individual terms, and count their frequencies
go_term_freq <- table(unlist(strsplit(InGroupGOTerms$GOTerms, "\\|")))
head(go_term_freq)
View(fulldf)
# Plot GO term frequencies
barplot(go_term_freq, las = 2, main = "GO Term Frequency", col = "lightblue", cex.names = 0.7)
# Inspect how many GO terms each gene has
table(sapply(strsplit(InGroupGOTerms$GOTerms, "\\|"), length))
# Split the GOTerms into separate rows
split_goterms <- unlist(strsplit(InGroupGOTerms$GOTerms, "\\|"))
head(split_goterms)
length(unique(split_goterms))
go_term_freq <- table(split_goterms)
head(go_term_freq)
View(InGroupGOTerms)
# Assuming 'fulldf' is your data frame and it has a 'Gene_ID' column
gene_ids <- unique(fulldf$Gene_ID)
# Write the gene IDs to a file 'gene_list.txt'
writeLines(gene_ids, "gene_list.txt")
### The BEGINNING ~~~~~
##
# Y150239Genomics--TWISST by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon, patchwork, GenomicRanges, txdbmaker, rtracklayer,
GenomicFeatures, clusterProfiler, org.Hs.eg.db, AnnotationDbi, biomaRt, AnnotationHub)
# Imports weights ~
Wlgz <- list()
Wlistgz <- dir(pattern = ".gz")
for (k in 1:length(Wlistgz)){
Wlgz[[k]] <- read.table(gzfile(Wlistgz[k]))[-(1:1), ]
Wlgz[[k]]$TotalWeight <- as.numeric(Wlgz[[k]]$V1) + as.numeric(Wlgz[[k]]$V2) + as.numeric(Wlgz[[k]]$V3)
col_prefix <- ifelse(grepl("WithMeerkerk", Wlistgz[k]), "Meerkerk",
ifelse(grepl("WithY150239", Wlistgz[k]), "Y150239", "Error"))
colnames(Wlgz[[k]]) <- c(paste(col_prefix, "~ Spanish"),
paste(col_prefix, "~ House"),
paste("House ~ Spanish"), "TotalWeight")
Wlgz[[k]]$CHR <- gsub(".*(WithMeerkerk|WithY150239)\\.Phased\\.MinMaf\\.", "", Wlistgz[k])
Wlgz[[k]]$CHR <- gsub("\\.SW150\\.Weights\\.csv\\.gz", "", Wlgz[[k]]$CHR)
Wlgz[[k]]$Phylo <- ifelse(grepl("WithMeerkerk", Wlistgz[k]), "Meerkerk",
ifelse(grepl("WithY150239", Wlistgz[k]), "Y150239", "Error"))}
# Subsets list of data frames ~
Y150239_df <- Wlgz[36:70]
Meerkerk_df <- Wlgz[1:35]
# Expands list of data frames
Y150239_df_WeightsDF <- bind_rows(Y150239_df)
Meerkerk_df_WeightsDF <- bind_rows(Meerkerk_df)
# Selects relevant columns ~
Meerkerk_df_WeightsDF <- dplyr::select(Meerkerk_df_WeightsDF, "Meerkerk ~ House", "Meerkerk ~ Spanish")
# Binds the data frames ~
fulldf <- bind_cols(Meerkerk_df_WeightsDF, Y150239_df_WeightsDF)
# Calculates the percentage of weights & delta ~
fulldf$PercY150239 <- as.numeric(fulldf$"Y150239 ~ Spanish") / (as.numeric(fulldf$"Y150239 ~ House") + as.numeric(fulldf$"Y150239 ~ Spanish")) * 100
fulldf$PercMeerkerk <- as.numeric(fulldf$"Meerkerk ~ Spanish") / (as.numeric(fulldf$"Meerkerk ~ House") + as.numeric(fulldf$"Meerkerk ~ Spanish")) * 100
fulldf$Delta <- (fulldf$PercY150239 - fulldf$PercMeerkerk) / 100
# Reorders columns ~
WeightsDF <- dplyr::select(fulldf, "Phylo", "CHR", "TotalWeight", "Y150239 ~ House", "Y150239 ~ Spanish", "Meerkerk ~ House", "Meerkerk ~ Spanish", "PercY150239", "PercMeerkerk", "Delta")
# Imports windows´ data ~
Wilgz <- list()
Wilistgz <- dir(pattern = ".tsv")
for (k in 1:length(Wilistgz)){
Wilgz[[k]] <- read.table(Wilistgz[k])[-1, ]
colnames(Wilgz[[k]]) <- c("Scaffold", "Start", "End", "Mid", "Sites", "lnL")}
# Melts windows ~
WindowsDF <- reshape2::melt(Wilgz)
WindowsDF <- WindowsDF[, -ncol(WindowsDF)]
# Merges WeightsDF & WindowsDF ~
fulldf <- cbind(WeightsDF, WindowsDF)
# Converts DF from wide into long ~
fulldfUp <- gather(fulldf, Estimation, Value, "Y150239 ~ House", "Y150239 ~ Spanish", "Meerkerk ~ House", "Meerkerk ~ Spanish", "Delta")
# Reorders CHR ~
fulldfUp$CHR <- factor(fulldfUp$CHR, ordered = TRUE,
levels = c("chr1", "chr1A", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14",
"chr15", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chr23", "chr24", "chr26", "chr27", "chr28", "chrZ",
"scaffold00169", "scaffold00221", "scaffold00223", "scaffold00224", "scaffold00238", "scaffold00239", "scaffold00242"))
# Corrects the y-strip facet labels ~
y_strip_labels <- c("chr1" = "CHR 01", "chr1A" = "CHR 01A", "chr2" = "CHR 02", "chr3" = "CHR 03", "chr4" = "CHR 04", "chr5" = "CHR 05", "chr6" = "CHR 06", "chr7" = "CHR 07",
"chr8" = "CHR 08", "chr9" = "CHR 09", "chr10" = "CHR 10", "chr11" = "CHR 11", "chr12" = "CHR 12", "chr13" = "CHR 13", "chr14" = "CHR 14", "chr15" = "CHR 15",
"chr17" = "CHR 17", "chr18" = "CHR 18", "chr19" = "CHR 19", "chr20" = "CHR 20", "chr21" = "CHR 21", "chr22" = "CHR 22", "chr23" = "CHR 23",
"chr24" = "CHR 24", "chr26" = "CHR 26", "chr27" = "CHR 27", "chr28" = "CHR 28", "chrZ" = "CHR Z",
"scaffold00169" = "Scaffold00169", "scaffold00221" = "Scaffold00221", "scaffold00223" = "Scaffold00223", "scaffold00224" = "Scaffold00224",
"scaffold00238" = "Scaffold00238", "scaffold00239" = "Scaffold00239", "scaffold00242" = "Scaffold00242")
generate_dynamic_breaks_and_labels <- function(min_val, max_val) {
if (max_val <= 0) {return(list(breaks = c(1), labels = c("1Mb")))}
# Determines appropriate step size based on data range ~
data_range <- max_val - min_val
if (data_range <= 1300000) {
step_size <- 100000
} else if (data_range <= 10000000) {
step_size <- 1000000
} else if (data_range <= 100000000) {
step_size <- 5000000
} else {
step_size <- 20000000}
# Generates breaks starting from the rounded min_val ~
rounded_min_val <- floor(min_val / step_size) * step_size
breaks <- seq(from = rounded_min_val, to = max_val, by = step_size)
# Ensures breaks are within the actual data range ~
breaks <- breaks[breaks >= min_val & breaks <= max_val]
# Generates labels corresponding to the breaks ~
if (step_size >= 1e6) {
labels <- paste0(breaks / 1e6, "Mb")
} else {
labels <- paste0(round(breaks / 1e5) / 10, "Mb")}
# Ensures breaks and labels have the same length ~
if (length(breaks) != length(labels)) {
stop("Breaks and labels have different lengths.")}
return(list(breaks = breaks, labels = labels))}
# Applies the function to each unique CHR ~
patterns <- unique(fulldfUp$CHR)
# Creates an empty list to store the filtered results ~
filtered_positions <- list()
# Loop through each CHR
for (x in patterns) {
subset_df <- subset(fulldfUp, CHR == x)
max_mid <- max(as.numeric(subset_df$Mid), na.rm = TRUE)
min_mid <- min(as.numeric(subset_df$Mid), na.rm = TRUE)
breaks_and_labels <- generate_dynamic_breaks_and_labels(min_mid, max_mid)
Mean_Delta <- mean(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0], na.rm = TRUE)
Percentile_95 <- quantile(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0], probs = .95, na.rm = TRUE)
Percentile_99 <- quantile(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0], probs = .99, na.rm = TRUE)
Count_95 <- sum(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0] >= Percentile_95, na.rm = TRUE)
Count_99 <- sum(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0] >= Percentile_99, na.rm = TRUE)
filtered_subset <- subset(subset_df, Estimation == "Delta" & as.numeric(Value) >= 0 & as.numeric(Value) >= Percentile_95)
filtered_subset$Start <- as.numeric(filtered_subset$Mid) - 1
filtered_subset$End <- as.numeric(filtered_subset$Mid)
filtered_subset <- filtered_subset[, c("CHR", "Start", "End", "Value")]
filtered_positions[[x]] <- filtered_subset
# Combines the list into a single data frame ~
filtered_positions_df <- do.call(rbind, filtered_positions)
# Saves the BED file with the filtered positions ~
write.table(filtered_positions_df, "Y150239Genomics--TWISST_FilteredPositions95.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Creates Y150239 plot ~
Y150239_Plot <-
ggplot() +
geom_area(data = subset_df %>% filter(Estimation %in% c("Y150239 ~ House", "Y150239 ~ Spanish")),
aes(x = as.numeric(Mid), y = as.numeric(Value), fill = Estimation, group = Estimation),
position = "fill", colour = "#000000", alpha = .3, linetype = 1, linewidth = .2) +
scale_x_continuous("Genomic Position",
breaks = breaks_and_labels$breaks,
labels = breaks_and_labels$labels,
limits = c(min_mid, max_mid + 1000),
expand = c(0, 0)) +
scale_y_continuous("Weights",
breaks = c(.25, .50, .75),
labels = c("25%", "50%", "75%"),
expand = c(0, 0)) +
scale_fill_manual(values = c("#c2a5cf", "#3288bd", "#d53e4f")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", linewidth = .00005),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 0, r = 40, b = 0, l = 15)),
axis.text.x = element_blank(),
axis.text.y = element_text(family = "Optima", size = 24, colour = "#000000", face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line.x = element_line(colour = "#000000", linewidth = .3),
axis.line.y = element_line(colour = "#000000", linewidth = .3),
legend.position = "top",
legend.title = element_text(margin = margin(r = 20)),
legend.text = element_text(margin = margin(r = 15, l = 15)),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 40, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = 1.75, linetype = 1)),
fill = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = .3, linetype = 1)))
# Create Meerkerk plot ~
Meerkerk_Plot <- ggplot() +
geom_area(data = subset_df %>% filter(Estimation %in% c("Meerkerk ~ House", "Meerkerk ~ Spanish")),
aes(x = as.numeric(Mid), y = as.numeric(Value), fill = Estimation, group = Estimation),
position = "fill", colour = "#000000", alpha = .3, linetype = 1, linewidth = .2) +
scale_x_continuous("Genomic Position",
breaks = breaks_and_labels$breaks,
labels = breaks_and_labels$labels,
limits = c(min_mid, max_mid + 1000),
expand = c(0, 0)) +
scale_y_continuous("Weights",
breaks = c(.25, .50, .75),
labels = c("25%", "50%", "75%"),
expand = c(0, 0)) +
scale_fill_manual(values = c("#c2a5cf", "#3288bd", "#d53e4f")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", linewidth = .00005),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 0, r = 40, b = 0, l = 15)),
axis.text.x = element_blank(),
axis.text.y = element_text(family = "Optima", size = 24, colour = "#000000", face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line.x = element_line(colour = "#000000", linewidth = .3),
axis.line.y = element_line(colour = "#000000", linewidth = .3),
legend.position = "top",
legend.title = element_text(margin = margin(r = 20)),
legend.text = element_text(margin = margin(r = 15, l = 15)),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 40, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = 1.75, linetype = 1)),
fill = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = .3, linetype = 1)))
# Create Delta plot ~
Delta_Plot <-
ggplot() +
geom_line(data = subset_df %>% filter(Estimation %in% c("Delta")), aes(x = as.numeric(Mid), y = as.numeric(Value)), colour = "#000000",
position = "identity", linetype = 1, linewidth = .2) +
geom_hline(yintercept = Mean_Delta, linetype = "twodash", color = "#33a02c", linewidth = 1) +
scale_x_continuous("Genomic Position",
breaks = breaks_and_labels$breaks,
labels = breaks_and_labels$labels,
limits = c(min_mid, max_mid + 1000),
expand = c(0, 0)) +
scale_y_continuous("Delta",
limits = c(-1.1, 1.1),
expand = c(0, 0)) +
scale_fill_manual(values = c("#c2a5cf", "#3288bd", "#d53e4f")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", linewidth = .00005),
panel.grid.minor = element_blank(),
axis.title.x = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 40, r = 0, b = 15, l = 0)),
axis.title.y = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 0, r = 40, b = 0, l = 15)),
axis.text = element_text(family = "Optima", size = 24, colour = "#000000", face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line.x = element_line(colour = "#000000", linewidth = .3),
axis.line.y = element_line(colour = "#000000", linewidth = .3))
# Arranges the plots into a single panel ~
Panel_Plot <- Y150239_Plot + Meerkerk_Plot + Delta_Plot + plot_layout(ncol = 1)
# Save the panel ~
ggsave(paste("Y150239Genomics--TWISST_SW150_FillArea_", x, ".pdf", sep = ""), plot = Panel_Plot,
device = cairo_pdf, limitsize = FALSE, width = 40, height = 25, scale = 1, dpi = 600)}
#ggsave(paste("Y150239Genomics--TWISST_FillArea_", x, ".png", sep = ""), plot = Panel_Plot,
#       limitsize = FALSE, width = 40, height = 25, scale = 1, dpi = 600)}
# Loads protein dataset ~
HouseSparrow_GOTerms <- read.delim("./GOTerms/house_sparrow_genome_assembly-18-11-14_masked.Protein_gffreads.fasta.tsv", header = FALSE, sep = "\t")
View(HouseSparrow_GOTerms)
# Extract accession and GO terms columns (adjust column names based on your file)
accession_go <- HouseSparrow_GOTerms %>%
dplyr::select(Accession, GOTerms)
# Loads protein dataset ~
HouseSparrow_GOTerms <- read.delim("./GOTerms/house_sparrow_genome_assembly-18-11-14_masked.Protein_gffreads.fasta.tsv", header = FALSE, sep = "\t")
HouseSparrow_GOTerms <- HouseSparrow_GOTerms[, c(1, 3, 4, 5, 14)]
colnames(HouseSparrow_GOTerms) <- c("Gene_ID", "Gene_Size", "Analysis_Type", "Accession", "GOTerms")
# Extract accession and GO terms columns (adjust column names based on your file)
accession_go <- HouseSparrow_GOTerms %>%
dplyr::select(Accession, GOTerms)
View(accession_go)
# Extract accession and GO terms columns (adjust column names based on your file)
accession_go <- HouseSparrow_GOTerms %>%
filter(GOTerms != "-" & GOTerms != "") %>%
dplyr::select(Accession, GOTerms)
View(accession_go)
# Split multiple GO terms in the GOTerms column into separate rows
cleaned_data <- accession_go %>%
tidyr::separate_rows(GOTerms, sep = "\\|")
View(cleaned_data)
go_term_freq <- table(cleaned_data$GOTerms)
# Convert the result to a data frame
go_term_freq_df <- as.data.frame(go_term_freq)
head(go_term_freq_df)
# Perform GO enrichment analysis (assuming you have a list of GO terms)
go_enrich <- enrichGO(gene = cleaned_data$GOTerms,
OrgDb = org.Hs.eg.db,
keyType = "GO",
ont = "ALL",
pvalueCutoff = 0.05)
# Load the Zebra Finch genome annotation
library(org.Tguttata.eg.db)
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon, patchwork, GenomicRanges, txdbmaker, rtracklayer,
GenomicFeatures, clusterProfiler, org.Hs.eg.db, AnnotationDbi, biomaRt, AnnotationHub)
# Perform GO enrichment analysis (assuming you have a list of GO terms)
go_enrich <- enrichGO(gene = cleaned_data$GOTerms,
OrgDb = org.Tguttata.eg.db,
keyType = "GO",
ont = "ALL",
pvalueCutoff = 0.05)
