fulldfUp <- gather(fulldf, Estimation, Value, "Y150239 ~ House", "Y150239 ~ Spanish", "Meerkerk ~ House", "Meerkerk ~ Spanish", "Delta")
# Reorders CHR ~
fulldfUp$CHR <- factor(fulldfUp$CHR, ordered = TRUE,
levels = c("chr1", "chr1A", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr17",
"chr18", "chr19", "chr20", "chr21", "chr22", "chr23", "chr24", "chr26", "chr27", "chr28", "chrZ", "scaffold00169", "scaffold00221", "scaffold00223", "scaffold00224", "scaffold00238", "scaffold00239", "scaffold00242"))
# Corrects the y-strip facet labels ~
y_strip_labels <- c("chr1" = "CHR 01", "chr1A" = "CHR 01A", "chr2" = "CHR 02", "chr3" = "CHR 03", "chr4" = "CHR 04", "chr5" = "CHR 05", "chr6" = "CHR 06", "chr7" = "CHR 07",
"chr8" = "CHR 08", "chr9" = "CHR 09", "chr10" = "CHR 10", "chr11" = "CHR 11", "chr12" = "CHR 12", "chr13" = "CHR 13", "chr14" = "CHR 14", "chr15" = "CHR 15",
"chr17" = "CHR 17", "chr18" = "CHR 18", "chr19" = "CHR 19", "chr20" = "CHR 20", "chr21" = "CHR 21", "chr22" = "CHR 22", "chr23" = "CHR 23",
"chr24" = "CHR 24", "chr26" = "CHR 26", "chr27" = "CHR 27", "chr28" = "CHR 28", "chrZ" = "CHR Z",
"scaffold00169" = "Scaffold00169", "scaffold00221" = "Scaffold00221", "scaffold00223" = "Scaffold00223", "scaffold00224" = "Scaffold00224",
"scaffold00238" = "Scaffold00238", "scaffold00239" = "Scaffold00239", "scaffold00242" = "Scaffold00242")
generate_dynamic_breaks_and_labels <- function(min_val, max_val) {
if (max_val <= 0) {
return(list(breaks = c(1), labels = c("1Mb")))  # Handling edge case for empty scaffolds
}
# Determine appropriate step size based on data range
data_range <- max_val - min_val
if (data_range <= 1300000) {
step_size <- 100000
#} else if (data_range <= 100000) {
#  step_size <- 1000000
#} else if (data_range <= 1000000) {
#  step_size <- 100000
} else if (data_range <= 10000000) {
step_size <- 1000000
} else if (data_range <= 100000000) {
step_size <- 5000000
} else {
step_size <- 20000000
}
# Generate breaks starting from the rounded min_val
rounded_min_val <- floor(min_val / step_size) * step_size
breaks <- seq(from = rounded_min_val, to = max_val, by = step_size)
# Ensure breaks are within the actual data range
breaks <- breaks[breaks >= min_val & breaks <= max_val]
# Generate labels corresponding to the breaks
if (step_size >= 1e6) {
labels <- paste0(breaks / 1e6, "Mb")
} else {
labels <- paste0(round(breaks / 1e5) / 10, "Mb")
}
# Ensure breaks and labels have the same length
if (length(breaks) != length(labels)) {
stop("Breaks and labels have different lengths.")
}
return(list(breaks = breaks, labels = labels))
}
# Apply the function to each unique CHR
patterns <- unique(fulldfUp$CHR)
# Creates an empty list to store the filtered results ~
filtered_positions <- list()
# Loop through each CHR
for (x in patterns) {
subset_df <- subset(fulldfUp, CHR == x)
max_mid <- max(as.numeric(subset_df$Mid), na.rm = TRUE)
min_mid <- min(as.numeric(subset_df$Mid), na.rm = TRUE)
breaks_and_labels <- generate_dynamic_breaks_and_labels(min_mid, max_mid)
Mean_Delta <- mean(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0], na.rm = TRUE)
Percentile_95 <- quantile(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0], probs = .95, na.rm = TRUE)
Percentile_99 <- quantile(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0], probs = .99, na.rm = TRUE)
Count_95 <- sum(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0] >= Percentile_95, na.rm = TRUE)
Count_99 <- sum(as.numeric(subset_df$Value)[subset_df$Estimation == "Delta" & as.numeric(subset_df$Value) >= 0] >= Percentile_99, na.rm = TRUE)
filtered_subset <- subset(subset_df, Estimation == "Delta" & as.numeric(Value) >= 0 & as.numeric(Value) >= Percentile_95)
filtered_subset$Start <- as.numeric(filtered_subset$Mid) - 1
filtered_subset$End <- as.numeric(filtered_subset$Mid)
filtered_subset <- filtered_subset[, c("CHR", "Start", "End", "Value")]
filtered_positions[[x]] <- filtered_subset
# Combines the list into a single data frame ~
filtered_positions_df <- do.call(rbind, filtered_positions)
# Saves the BED file with the filtered positions ~
write.table(filtered_positions_df, "Y150239Genomics--TWISST_FilteredPositions95.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Creates Y150239 plot ~
Y150239_Plot <-
ggplot() +
geom_area(data = subset_df %>% filter(Estimation %in% c("Y150239 ~ House", "Y150239 ~ Spanish")),
aes(x = as.numeric(Mid), y = as.numeric(Value), fill = Estimation, group = Estimation),
position = "fill", colour = "#000000", alpha = .3, linetype = 1, linewidth = .2) +
scale_x_continuous("Genomic Position",
breaks = breaks_and_labels$breaks,
labels = breaks_and_labels$labels,
limits = c(min_mid, max_mid + 1000),
expand = c(0, 0)) +
scale_y_continuous("Weights",
breaks = c(.25, .50, .75),
labels = c("25%", "50%", "75%"),
expand = c(0, 0)) +
scale_fill_manual(values = c("#c2a5cf", "#3288bd", "#d53e4f")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", linewidth = .00005),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 0, r = 40, b = 0, l = 15)),
axis.text.x = element_blank(),
axis.text.y = element_text(family = "Optima", size = 24, colour = "#000000", face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line.x = element_line(colour = "#000000", linewidth = .3),
axis.line.y = element_line(colour = "#000000", linewidth = .3),
legend.position = "top",
legend.title = element_text(margin = margin(r = 20)),
legend.text = element_text(margin = margin(r = 15, l = 15)),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 40, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = 1.75, linetype = 1)),
fill = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = .3, linetype = 1)))
# Create Meerkerk plot ~
Meerkerk_Plot <- ggplot() +
geom_area(data = subset_df %>% filter(Estimation %in% c("Meerkerk ~ House", "Meerkerk ~ Spanish")),
aes(x = as.numeric(Mid), y = as.numeric(Value), fill = Estimation, group = Estimation),
position = "fill", colour = "#000000", alpha = .3, linetype = 1, linewidth = .2) +
scale_x_continuous("Genomic Position",
breaks = breaks_and_labels$breaks,
labels = breaks_and_labels$labels,
limits = c(min_mid, max_mid + 1000),
expand = c(0, 0)) +
scale_y_continuous("Weights",
breaks = c(.25, .50, .75),
labels = c("25%", "50%", "75%"),
expand = c(0, 0)) +
scale_fill_manual(values = c("#c2a5cf", "#3288bd", "#d53e4f")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", linewidth = .00005),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 0, r = 40, b = 0, l = 15)),
axis.text.x = element_blank(),
axis.text.y = element_text(family = "Optima", size = 24, colour = "#000000", face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line.x = element_line(colour = "#000000", linewidth = .3),
axis.line.y = element_line(colour = "#000000", linewidth = .3),
legend.position = "top",
legend.title = element_text(margin = margin(r = 20)),
legend.text = element_text(margin = margin(r = 15, l = 15)),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 15, b = 40, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(colour = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = 1.75, linetype = 1)),
fill = guide_legend(title = "Topologies", title.theme = element_text(family = "Optima", size = 34, face = "bold"),
label.theme = element_text(family = "Optima", size = 30), override.aes = list(linewidth = .3, linetype = 1)))
# Create Delta plot ~
Delta_Plot <-
ggplot() +
geom_line(data = subset_df %>% filter(Estimation %in% c("Delta")), aes(x = as.numeric(Mid), y = as.numeric(Value)), colour = "#000000",
position = "identity", linetype = 1, linewidth = .2) +
geom_hline(yintercept = Mean_Delta, linetype = "twodash", color = "#33a02c", linewidth = 1) +
scale_x_continuous("Genomic Position",
breaks = breaks_and_labels$breaks,
labels = breaks_and_labels$labels,
limits = c(min_mid, max_mid + 1000),
expand = c(0, 0)) +
scale_y_continuous("Delta",
limits = c(-1.1, 1.1),
expand = c(0, 0)) +
scale_fill_manual(values = c("#c2a5cf", "#3288bd", "#d53e4f")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#ededed", linetype = "dashed", linewidth = .00005),
panel.grid.minor = element_blank(),
axis.title.x = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 40, r = 0, b = 15, l = 0)),
axis.title.y = element_text(family = "Optima", size = 36, face = "bold", color = "#000000", margin = margin(t = 0, r = 40, b = 0, l = 15)),
axis.text = element_text(family = "Optima", size = 24, colour = "#000000", face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line.x = element_line(colour = "#000000", linewidth = .3),
axis.line.y = element_line(colour = "#000000", linewidth = .3))
# Arranges the plots into a single panel ~
Panel_Plot <- Y150239_Plot + Meerkerk_Plot + Delta_Plot + plot_layout(ncol = 1)
# Save the panel ~
ggsave(paste("Y150239Genomics--TWISST_FillArea_", x, ".pdf", sep = ""), plot = Panel_Plot,
device = cairo_pdf, limitsize = FALSE, width = 40, height = 25, scale = 1, dpi = 600)}
# Converts data frame a GRanges object ~
GR <- with(filtered_positions_df,
GRanges(seqnames = CHR,
ranges = IRanges(start = Start, end = End),
metadata = list(Value = Value)))
# Finds overlapping genes ~
GeneHits <- findOverlaps(GR, genes(txdb))
# Extracts gene information based on overlaps ~
OverlappingGenes <- genes(txdb)[subjectHits(GeneHits)]
# Extracts relevant information from overlapping genes
OverlappingGenesInfo <- mcols(OverlappingGenes)
# Extract gene IDs or symbols from overlapping genes info
GeneIDs <- rownames(OverlappingGenesInfo)
# Performs GO enrichment analysis ~
GOResults <- enrichGO(gene = GeneIDs,
OrgDb = NULL,
keyType = "SYMBOL",
ont = "BP",
pvalueCutoff = .05)
# Performs GO enrichment analysis ~
GOResults <- enrichGO(gene = GeneIDs,
OrgDb = org.Hs.eg.db,
keyType = "SYMBOL",
ont = "BP",
pvalueCutoff = .05)
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon, patchwork, GenomicRanges, txdbmaker, rtracklayer, GenomicFeatures, clusterProfiler, org.Hs.eg.db, AnnotationDbi)
# Performs GO enrichment analysis ~
GOResults <- enrichGO(gene = GeneIDs,
OrgDb = org.Hs.eg.db,
keyType = "SYMBOL",
ont = "BP",
pvalueCutoff = .05)
# Imports GTF file ~
txdb <- makeTxDbFromGFF("house_sparrow.gff", format = "gff")
# Retrieves genes ~
gene_info <- genes(txdb)
# Converts data frame with filtered positions to a GRanges object ~
GR <- with(filtered_positions_df,
GRanges(seqnames = CHR,
ranges = IRanges(start = Start, end = End),
metadata = list(Value = Value)))
# Finds overlapping genes ~
GeneHits <- findOverlaps(GR, genes(txdb))
# Extracts gene information based on overlaps ~
OverlappingGenes <- genes(txdb)[subjectHits(GeneHits)]
# Extracts relevant information from overlapping genes
OverlappingGenesInfo <- mcols(OverlappingGenes)
# Extract gene IDs or symbols from overlapping genes info
GeneIDs <- rownames(OverlappingGenesInfo)
# Performs GO enrichment analysis ~
GOResults <- enrichGO(gene = GeneIDs,
OrgDb = org.Hs.eg.db,
keyType = "SYMBOL",
ont = "BP",
pvalueCutoff = .05)
# Extract gene IDs or symbols from overlapping genes info
GeneIDs <- OverlappingGenesInfo$gene_id
# Ensures that genes in GeneIDs are unique ~
GeneIDs <- unique(GeneIDs)
GOResults <- enrichGO(gene = GeneIDs,
OrgDb = org.Hs.eg.db,
keyType = "GENEID",
ont = "BP",
pvalueCutoff = .05)
# Performs GO enrichment analysis ~
GOResults <- enrichGO(gene = GeneIDs,
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
ont = "BP",
pvalueCutoff = .05)
keytypes(org.Hs.eg.db)
# Load the .gff file
gff_file <- "house_sparrow.gff"
gff_data <- import(gff_file)
# Convert to a data frame for easier inspection
gff_df <- as.data.frame(gff_data)
# Inspect the first few rows to see the attributes
head(gff_df)
# Inspect the first few rows to see the attributes
head(gff_df)
View(gff_df)
attributes_column <- gff_df$attributes
attributes_column <- gff_df$attributes
View(gff_df)
View(filtered_positions_df)
View(GeneHits)
View(GR)
View(GeneHits)
View(OverlappingGenes)
View(OverlappingGenesInfo)
View(gene_info)
Layka <- read.table("house_sparrow.gff", header = FALSE)
Layka <- read.table("house_sparrow.gff", sep = "\t", header = FALSE)
View(Layka)
colnames(Layka) <- c("SeqName", "Source", "Feature", "Start", "End",
"Score", "Strand", "Frame", "Attribute")
View(Layka)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype"), sep = ";") %>%
select(SeqName, Start, End, gene_id, gene_name, gene_biotype)
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype)
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, Attribute, gene_id, gene_name, gene_biotype)
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene")
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype)
View(LaykaUp)
View(Layka)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_name)
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info)
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info)
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(gene_info == "Note=Protein of unknown function")
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(gene_info =! "Note=Protein of unknown function")
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(gene_info != "Note=Protein of unknown function")
View(LaykaUp)
df$Genes <- sub("^Note=Similar to (.+):.*", "\\1", gene_info)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(gene_info != "Note=Protein of unknown function") %>%
df$Genes <- sub("^Note=Similar to (.+):.*", "\\1", gene_info)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(gene_info != "Note=Protein of unknown function") %>%
Layka$Genes <- sub("^Note=Similar to (.+):.*", "\\1", gene_info)
LaykaUp$Genes <- sub("^Note=Similar to (.+):.*", "\\1", LaykaUp$gene_info)
View(LaykaUp)
LaykaUp$Genes <- sub("^Note=Similar to ([^:]+):.*", "\\1", LaykaUp$gene_info)
View(LaykaUp)
# Retrieves genes ~
gene_info <- genes(LaykaUp)
# Retrieves genes ~
gene_info <- genes(txdb)
??makeTxDbFromGFF
LaykaUpUp <- LaykaUp %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, Genes) %>%
# Retrieves genes ~
gene_info <- genes(txdb)
LaykaUpUp <- LaykaUp %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, Genes)
View(LaykaUpUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(gene_info != "Note=")
LaykaUp$Genes <- sub("^Note=Similar to ([^:]+):.*", "\\1", LaykaUp$gene_info)
LaykaUpUp <- LaykaUp %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, Genes)
View(LaykaUpUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(!grepl("Note=Similar", gene_info))
LaykaUp$Genes <- sub("^Note=Similar to ([^:]+):.*", "\\1", LaykaUp$gene_info)
LaykaUpUp <- LaykaUp %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, Genes)
View(LaykaUpUp)
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(!grepl("Note=Similar", gene_info))
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info)
View(LaykaUp)
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(gene_info != "Note=")
View(LaykaUp)
LaykaUp$Genes <- sub("^Note=Similar to ([^:]+):.*", "\\1", LaykaUp$gene_info)
View(LaykaUpUp)
View(LaykaUp)
LaykaUpUp <- LaykaUp %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, Genes)
# Filter rows not containing "Note=Similar"
LaykaUpUpUp <- LaykaUpUp %>%
filter(!grepl("Note=Similar", Genes))
View(LaykaUpUpUp)
# Filter rows not containing "Note=Similar"
LaykaUpUpUp <- LaykaUpUp %>%
filter(!grepl("Note=", Genes))
View(LaykaUpUpUp)
# Retrieves genes ~
gene_info <- genes(LaykaUpUpUp)
# Loads packages ~
pacman::p_load(tidyverse, scales, reshape2, lemon, patchwork, GenomicRanges, txdbmaker, rtracklayer, GenomicFeatures, clusterProfiler, org.Hs.eg.db, AnnotationDbi)
# Remove column names
colnames(LaykaUpUpUp) <- NULL
View(LaykaUpUpUp)
# Retrieves genes ~
gene_info <- genes(LaykaUpUpUp)
# Save data frame as .gff file
write.table(LaykaUpUpUp, file = "Layka.gff", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Imports GTF file ~
txdb <- makeTxDbFromGFF("Layka.gff", format = "gff")
# Add "ID=" in front of each pattern in the 'attributes' column
LaykaUpUpUp$Genes <- paste0("ID=", LaykaUpUpUp$Genes)
View(LaykaUpUpUp)
Layka <- read.table("house_sparrow.gff", sep = "\t", header = FALSE)
colnames(Layka) <- c("SeqName", "Source", "Feature", "Start", "End",
"Score", "Strand", "Frame", "Attribute")
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(gene_info != "Note=")
LaykaUp$Genes <- sub("^Note=Similar to ([^:]+):.*", "\\1", LaykaUp$gene_info)
LaykaUpUp <- LaykaUp %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, Genes)
# Filter rows not containing "Note=Similar"
LaykaUpUpUp <- LaykaUpUp %>%
filter(!grepl("Note=", Genes))
# Add "ID=" in front of each pattern in the 'attributes' column
LaykaUpUpUp$Genes <- paste0("ID=", LaykaUpUpUp$Genes)
View(LaykaUpUpUp)
# Remove column names
colnames(LaykaUpUpUp) <- NULL
# Save data frame as .gff file
write.table(LaykaUpUpUp, file = "Layka.gff", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Imports GTF file ~
txdb <- makeTxDbFromGFF("Layka.gff", format = "gff")
# Retrieves genes ~
gene_info <- genes(txdb)
View(gene_info)
GR <- with(filtered_positions_df,
GRanges(seqnames = CHR,
ranges = IRanges(start = Start, end = End),
metadata = list(Value = Value)))
# Finds overlapping genes ~
GeneHits <- findOverlaps(GR, genes(txdb))
# Extracts gene information based on overlaps ~
OverlappingGenes <- genes(txdb)[subjectHits(GeneHits)]
# Extracts relevant information from overlapping genes
OverlappingGenesInfo <- mcols(OverlappingGenes)
# Extract gene IDs or symbols from overlapping genes info
GeneIDs <- OverlappingGenesInfo$gene_id
# Ensures that genes in GeneIDs are unique ~
GeneIDs <- unique(GeneIDs)
GOResults <- enrichGO(gene = GeneIDs,
OrgDb = org.Hs.eg.db,
keyType = "SYMBOL",
ont = "BP",
pvalueCutoff = .05)
View(GeneHits)
Layka <- read.table("house_sparrow.gff", sep = "\t", header = FALSE)
colnames(Layka) <- c("SeqName", "Source", "Feature", "Start", "End",
"Score", "Strand", "Frame", "Attribute")
LaykaUp <- Layka %>%
filter(Feature == "gene") %>%
separate(Attribute, into = c("gene_id", "gene_name", "gene_biotype", "gene_info"), sep = ";") %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, gene_id, gene_name, gene_biotype, gene_info) %>%
filter(gene_info != "Note=")
LaykaUp$Genes <- sub("^Note=Similar to ([^:]+):.*", "\\1", LaykaUp$gene_info)
LaykaUpUp <- LaykaUp %>%
select(SeqName, Source, Feature, Start, End, Score, Strand, Frame, Genes)
# Filter rows not containing "Note=Similar"
LaykaUpUpUp <- LaykaUpUp %>%
filter(!grepl("Note=", Genes))
# Add "ID=" in front of each pattern in the 'attributes' column
LaykaUpUpUp$Genes <- paste0("ID=", LaykaUpUpUp$Genes)
# Remove column names
colnames(LaykaUpUpUp) <- NULL
# Save data frame as .gff file
write.table(LaykaUpUpUp, file = "Layka.gff", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Imports GTF file ~
txdb <- makeTxDbFromGFF("Layka.gff", format = "gff")
# Retrieves genes ~
gene_info <- genes(txdb)
View(gene_info)
GR <- with(filtered_positions_df,
GRanges(seqnames = CHR,
ranges = IRanges(start = Start, end = End),
metadata = list(Value = Value)))
# Finds overlapping genes ~
GeneHits <- findOverlaps(GR, genes(txdb))
View(GeneHits)
# Extracts gene information based on overlaps ~
OverlappingGenes <- genes(txdb)[subjectHits(GeneHits)]
View(OverlappingGenes)
# Extracts relevant information from overlapping genes
OverlappingGenesInfo <- mcols(OverlappingGenes)
# Extract gene IDs or symbols from overlapping genes info
GeneIDs <- OverlappingGenesInfo$gene_id
# Ensures that genes in GeneIDs are unique ~
GeneIDs <- unique(GeneIDs)
