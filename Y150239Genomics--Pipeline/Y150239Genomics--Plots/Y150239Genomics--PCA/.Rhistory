opt$plot_size <- as.numeric(unlist(strsplit(opt$plot_size, ",")))
if(length(opt$plot_size) < 2)
opt$plot_size <- c(opt$plot_size, opt$plot_size)
# Plot formula
if(!is.null(opt$plot_wrap_formula))
opt$plot_wrap_formula <- as.formula(opt$plot_wrap_formula)
# Set output file name (if not defined)
if(is.null(opt$out)){
if(is.null(opt$ld_files))
stop(lgr$error('Output file name required, when reading LD files from STDIN'))
opt$out <- paste(basename(file_path_sans_ext(opt$ld_files)),".pdf", sep = "")}
### Load LD data
ld_data <- data.frame()
for (i in 1:n_files) {
ld_file <- as.character(ld_files$File[i])
# Read point data
lgr$info("Reading file %s", ld_file)
tmp_data <- read.table(gzfile(ld_file), sep="\t", header=TRUE, quote="\"", dec=".")
lgr$info("Number of lines: %i", nrow(tmp_data))
lgr$debug("Data", data = toJSON(head(tmp_data)))
# Check if file is valid
if(ncol(tmp_data) < 5)
stop(lgr$error('Invalid LD file format.'))
# Filter by minimum MAF
if ("maf1" %in% colnames(tmp_data) & "maf2" %in% colnames(tmp_data)) {
tmp_data <- tmp_data[which(tmp_data$maf1 >= opt$min_maf & tmp_data$maf2 >= opt$min_maf),]}
# Filter by maximum distance
tmp_data <- tmp_data[which(tmp_data$dist < opt$max_kb_dist*1000),]
lgr$info("Number of lines after filtering: %i", nrow(tmp_data))
# Extract relevant columns
tmp_data <- tmp_data[, which(names(tmp_data) %in% c("dist",opt$ld))]
# Convert all 'Inf' to NA
tmp_data[mapply(is.infinite, tmp_data)] <- NA
# Calculate genetic distances, according to Haldane's formula (assumes constant rate across all dataset)
if(opt$use_recomb_rate && !is.null(opt$recomb_rate))
tmp_data$dist <- (1 - (1 - opt$recomb_rate*0.01/1e6)^(tmp_data$dist))/2
# Bin data
if(opt$fit_bin_size > 1) {
breaks <- seq(0, max(tmp_data$dist)+opt$fit_bin_size, opt$fit_bin_size)
tmp_data$dist <- cut(tmp_data$dist, breaks, head(breaks, -1))
if(opt$bin_quant > 0) {
tmp_data <- aggregate(. ~ dist, data=tmp_data, quantile, probs=opt$bin_quant / 100, na.rm = TRUE)
} else {
tmp_data <- aggregate(. ~ dist, data=tmp_data, mean, na.rm = TRUE)}}
tmp_data$File <- ld_file
ld_data <- rbind(ld_data, melt(tmp_data, c("File", "dist"), variable.name="LD", na.rm = TRUE))}
# Clean-up
rm(tmp_data)
# Remove factor in dist
ld_data$dist <- as.numeric(levels(ld_data$dist))[ld_data$dist]
# Set maximum X-axis
if(is.null(opt$plot_x_lim)) {
opt$plot_x_lim = max(ld_data$dist)
} else {
opt$plot_x_lim = opt$plot_x_lim * 1000}
# Set maximum Y-axis
if(!is.null(opt$plot_y_lim))
opt$plot_y_lim <- c(0, opt$plot_y_lim)
# Add extra info
ld_data <- merge(ld_files, ld_data, by="File", sort=FALSE)
n_groups <- length(unique(ld_data[,opt$plot_group]))
n_plots <- n_files * n_ld / n_groups
lgr$debug("Final data", data = toJSON(head(ld_data)))
### Fit decay
# Model function
ld_exp <- function(par, dist, ld_stat) {
par <- as.numeric(par)
if(ld_stat == "r2" || ld_stat == "r2_ExpG") {
C = par[1] * dist
r2h = par[2]
r2l = par[3]
if(opt$n_ind){
# LD decay curve adjusted for finite samples sizes
((10+C) / ((2+C)*(11+C))) * (1+((3+C)*(12+12*C+C^2))/(opt$n_ind*(2+C)*(11+C)))
}else{
# Theoretical expectation under to drift
#1 / (1 + C)
# Theoretical expectation with r2_high and r2_low
(r2h - r2l) / (1 + C) + r2l
}
} else if(ld_stat == "Dp") {
D0 = 1
t = par[1]
Dh = par[2]
Dl = par[3]
Dl + (Dh-Dl) * D0 * (1 - dist * opt$recomb_rate/1e6)^t}}
# Evaluation function
fit_eval <- function(par, obs_data) {
if(length(unique(obs_data$LD)) != 1)
stop(lgr$error("Invalid data.frame (several LD measures)"))
model <- ld_exp(par, obs_data$dist, obs_data$LD[1])
eval <- sum((model - obs_data$value)^2)
lgr$trace("Fit evaluation", pars = par, eval = eval)
eval}
# Fitting function
fit_func <- function(x, fit_level) {
ld_stat <- x$LD[1]
# There is no fitting model for D
if(ld_stat == "D") return(NULL)
optim_tmp <- list()
n_iter <- ifelse(fit_level>=10,fit_level,1)
for(iter in 1:n_iter){
# Fit LD model
init_vals <- runif(3)
if(ld_stat == 'Dp') {
init_vals[1] = runif(1,10,20)
par <- data.frame(init=init_vals, low_lim=c(0,0,0), up_lim=c(Inf,1,1))
} else { # r2 and r2_ExpG
init_vals[1] = runif(1,0,0.1)
par <- data.frame(init=init_vals, low_lim=c(0,0,0), up_lim=c(1,1,1))
}
lgr$trace("Starting parameters", par = toJSON(par))
optim_tmp <- append(optim_tmp, list("BFGS" = optim(par$init, fit_eval, obs_data=x, method="BFGS")) )
if(fit_level > 1) optim_tmp <- append(optim_tmp, list("Nelder-Mead" = optim(par$init, fit_eval, obs_data=x, method="Nelder-Mead")) )
if(fit_level > 2) optim_tmp <- append(optim_tmp, list("L-BFGS-B" = optim(par$init, fit_eval, obs_data=x, method="L-BFGS-B", lower=par$low_lim, upper=par$up_lim)) )
}
lgr$debug("Optimization", data = toJSON(optim_tmp))
# If not using the theoretical r2 decay curve (with r2h and r2l)
if(opt$n_ind > 0)
if(ld_stat != 'Dp') optim_tmp <- lapply(optim_tmp, function(x){x$par[2]=x$par[3]=0;x})
# Filter out runs that not-converged and/or with out-of-bound parameters
# Columns stand for: par1 (rate), par2 (high), par3 (low), score, counts, convergence, message
optim_tmp <- Filter(function(x){x$convergence == 0 &
x$par[1] >= par$low_lim[1] & x$par[1] <= par$up_lim[1] &
x$par[2] >= par$low_lim[2] & x$par[2] <= par$up_lim[2] &
x$par[3] >= par$low_lim[3] & x$par[3] <= par$up_lim[3] &
x$par[2] >= x$par[3]}, optim_tmp)
# Pick best run
optim_tmp <- optim_tmp[order(sapply(optim_tmp,'[[',2))[1]]
if(length(optim_tmp[[1]]) == 0) stop(lgr$error("convergence analyses failed. Please try increasing the fit level (--fit_level)"))
lgr$debug("Best fit for %s (%s): %s", as.character(x$File[1]), as.vector(ld_stat), names(optim_tmp))
optim_tmp[[1]]$par}
# Fit LD decay distribution
if(opt$fit_level > 0) {
# Define line "resolution"
smooth <- seq(1, opt$plot_x_lim, length=opt$plot_line_smooth)
# Full data
optim_fit <- ddply(ld_data, .(File,LD), fit_func, fit_level=opt$fit_level)
# Bootstrap
if(opt$fit_boot > 0) {
boot_rep_fit <- c()
for (b in 1:opt$fit_boot) {
ld_bootdata <- ddply(ld_data, .(File, LD), function(x) {x[sample(nrow(x), size=nrow(x), replace=TRUE),]} )
boot_rep_fit <- rbind(boot_rep_fit, data.frame(ddply(ld_bootdata, .(File,LD), fit_func, fit_level=opt$fit_level), Rep=b))
}
boot_fit <- as.data.frame(as.matrix(aggregate(cbind(V1,V2,V3) ~ File+LD, boot_rep_fit, quantile, probs=c(0.025,0.975), names=FALSE)), stringsAsFactors=FALSE)
optim_fit <- merge(optim_fit, boot_fit, sort=FALSE)
optim_data <- ddply(optim_fit, .(File,LD), function(x) data.frame(LD=x[,"LD"], dist=smooth, value=ld_exp(x[,c("V1","V2","V3")], smooth, x[,"LD"]), ci_l=ld_exp(x[,c("V1.2","V2.1","V3.1")], smooth, x[,"LD"]), ci_u=ld_exp(x[,c("V1.1","V2.2","V3.2")], smooth, x[,"LD"])) )
} else {
optim_data <- ddply(optim_fit, .(File,LD), function(x) data.frame(LD=x[,"LD"], dist=smooth, value=ld_exp(x[,c("V1","V2","V3")], smooth, x[,"LD"])))}
# Print best FIT parameters ~
optim_fit <- plyr::rename(optim_fit, c("V1" = "DecayRate", "V2" = "LDmax", "V3" = "LDmin", "V1.1" = "DecayRate_CI.u", "V1.2" = "DecayRate_CI.l", "V2.1" = "LDmax_CI.l", "V2.2" = "LDmax_CI.u", "V3.1" = "LDmin_CI.l",
"V3.2" = "LDmin_CI.u"), warn_missing = FALSE)
lgr$info("Optimized fit", data = toJSON(optim_fit))
# Merge data together with extra info from input ~
fit_data <- merge(ld_files, optim_data, sort = FALSE)
lgr$debug("Fit data", data = toJSON(head(fit_data, n = 10)))}
# Expands fit_data & ld_data by adding a CHRType column ~
fit_data$CHRType <- str_extract(fit_data$File, "(Allosome|Autosomes)")
ld_data$CHRType <- str_extract(ld_data$File, "(Allosome|Autosomes)")
# Corrects Population names ~
levels(fit_data$CHRType <- sub("Allosome", "Chromossome Z", fit_data$CHRType))
levels(ld_data$CHRType <- sub("Allosome", "Chromossome Z", ld_data$CHRType))
# Expands fit_data & ld_data by adding a PruningState column ~
fit_data$PruningState <- ifelse(grepl("Pruned", fit_data$File), "Pruned", "Not Pruned")
ld_data$PruningState <- ifelse(grepl("Pruned", ld_data$File), "Pruned", "Not Pruned")
# Reorders CHRType ~
fit_data$CHRType <- factor(fit_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Chromossome Z"))
ld_data$CHRType <- factor(ld_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Chromossome Z"))
# Reorders PruningState ~
fit_data$PruningState <- factor(fit_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
ld_data$PruningState <- factor(ld_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
### Create base plot
lgr$info("Plotting data...")
plot <- ggplot() +
theme(panel.spacing = unit(1,"lines")) +
coord_cartesian(xlim = c(0, opt$plot_x_lim), ylim = opt$plot_y_lim) +
scale_colour_hue() +
ylab("Linkage Disequilibrium") +
xlab("Distance")
if(!is.null(opt$plot_wrap_formula)) {
if(opt$plot_wrap) {
plot <- plot + facet_rep_wrap(opt$plot_wrap_formula, ncol = opt$plot_wrap, scales = opt$plot_axis_scales)
} else {
plot <- plot + facet_rep_grid(opt$plot_wrap_formula, scales = opt$plot_axis_scales)}}
# Add LD decay fit CI ~
if(opt$fit_boot > 0) {
grp <- NULL
if(n_files == n_groups)
grp <- opt$plot_group
plot <- plot + geom_ribbon(data = fit_data, aes(x = dist, ymin = ci_l, ymax = ci_u, group = .data[[opt$plot_group]], fill = .data[[grp]]),
alpha = .2)}
# Add data points
if(opt$plot_data){
# Check format
if(ncol(ld_data) < 4)
stop(lgr$error("Invalid `ld_data` format."))
# Bins data ~
if(opt$plot_bin_size > 1) {
breaks <- seq(0, max(ld_data$dist) + opt$plot_bin_size, opt$plot_bin_size)
ld_data$dist <- cut(ld_data$dist, breaks, head(breaks, -1))
ld_data$dist <- as.numeric(levels(ld_data$dist))[ld_data$dist]
if(opt$bin_quant > 0) {
ld_data <- aggregate(value ~ ., data = ld_data, quantile, probs = opt$bin_quant / 100)
} else {
ld_data <- aggregate(value ~ ., data = ld_data, mean)}}
lgr$debug("Plot data", data = toJSON(head(ld_data, n = 10)))
# Adds points ~
plot <- plot +
geom_point(data = ld_data, aes(x = dist, y = value), colour = "#82526C", size = .05, alpha = .3)}
# Adds LD decay best fit ~
if(length(opt$ld) > 0) {
# Selects variable fields ~
header <- names(which(lapply(lapply(fit_data, unique), length) > 1))
# Excludes non-relevant fields ~
grp <- header[!header %in% unique(c(as.character(opt$plot_wrap_formula), opt$plot_group, "dist", "value", "File", "ci_l", "ci_u"))]
lgr$debug("LD decay best fit", groups = grp, plot_groups = opt$plot_group)
# Defines line type ~
#if(length(grp) == 0) grp <- opt$plot_group
#if(length(grp) > 1) stop(lgr$error("invalid number of linetype groups!"))
plot <-
plot +
geom_line(data = fit_data, aes(x = dist, y = value), colour = "#82526C", linetype = 1)
# If plotting data, add a thin black line to help see the line ~
if(opt$plot_data)
plot <- plot +
geom_line(data = fit_data, aes_string(x = "dist", y = "value"), linetype = 1, colour = "#82526C", linewidth = .1, alpha = 1) +
scale_x_continuous("Genomic Distance (Kb)",
breaks = c(2.5e+04, 5e+04, 7.5e+04),
labels = c("25", "50", "75"),
limits = c(0, 100000),
expand = c(0, 0)) +
scale_y_continuous("Linkage Disequilibrium (r2)",
breaks = c(0.05, 0.1, 0.15),
labels = c("0.05", "0.10", "0.15"),
limits = c(0, .2),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#E5E7E9", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
axis.title.x = element_text(family = "Optima", size = 13, face = "bold", color = "#000000", margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(family = "Optima", size = 13, face = "bold", color = "#000000", margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.text = element_text(family = "Optima", color = "#000000", size = 8, face = "bold"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 13, face = "bold"),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_blank(),
legend.spacing.y = unit(.4, "cm"),
legend.key.height = unit(.45, "cm"),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 5, b = -20, r = 0, l = 30))
# If plotting, apart from linetypes, also shapes (for B/W or color-blind printing) ~
if(opt$plot_shape) {
smooth <- seq(1, opt$plot_x_lim, length = opt$plot_line_smooth)[seq(2, opt$plot_line_smooth,length = 5)]
sample_fit_data <- subset(fit_data, dist %in% smooth)
plot <-
plot +
geom_point(data = sample_fit_data, aes(x = dist, y = value, colour = .data[[opt$plot_group]], shape = .data[[opt$plot_group]]))}}
### Set plot size ~
n_plots <- length(unique(ggplot_build(plot)$data[[1]]$PANEL))
if(!is.null(opt$plot_wrap_formula)) {
par <- dcast(fit_data, opt$plot_wrap_formula, length, fill = 0)
rownames(par) <- par[, 1]
par <- par[,-1, drop = FALSE]
} else {
par <- matrix(ncol = 1)}
lgr$debug("Summary", n_files = n_files, n_ld = n_ld, n_groups = n_groups, n_plots = n_plots)
lgr$debug("Parameters layout", rows_par = nrow(par), cols_par = ncol(par))
plot_height <- opt$plot_size[1] * nrow(par)
plot_width <- opt$plot_size[2] * ncol(par)
### Remove legend if plotting just a single variable
if(n_groups < 2 || opt$plot_no_legend) {
plot <- plot + theme(legend.position="none")
} else {
plot_width = plot_width + 1}
# Saves plot ~
ggsave(plot = plot, file = "Y150239Genomics--LD_Median_Article.pdf",
device = cairo_pdf, scale = 1, width = 12, height = 12, dpi = 600, limitsize = FALSE)
# Saves plot ~
ggsave(plot = plot, file = "Y150239Genomics--LD_Median_Article.pdf",
device = cairo_pdf, scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
ggsave(plot = plot, file = "Y150239Genomics--LD_Median.png",
scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
### The BEGINNING ~~~~~
##
# Y150239Genomics--PCA by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tidyverse, plyr, RColorBrewer, extrafont, ggforce, ggstar, ggrepel, RcppCNPy, reshape2, lemon, plotly,
gridExtra, grid, cowplot, patchwork, ggpubr, rphylopic)
# Loads data ~
dataauto <- as.matrix(read.table("AllSamples_bcftools.raw.vcf.Filtered.Autosomes.NoKinship.NoTreeSparrow.MAFfiltered.Pruned.PCAone.SVD0.cov"),
header = FALSE, stringsAsFactors = FALSE)
dataallo <- as.matrix(read.table("AllSamples_bcftools.raw.vcf.Filtered.Allosome.NoKinship.NoTreeSparrow.MAFfiltered.Pruned.PCAone.SVD0.cov"),
header = FALSE, stringsAsFactors = FALSE)
# Loads annot ~
annot <- read.table("AllSamples_bcftools.raw.vcf.Filtered.Autosomes.NoKinship.NoTreeSparrow.MAFfiltered.Pruned.labels",
sep = "\t", header = FALSE, stringsAsFactors = FALSE)
# Runs PCA ~
PCAauto <- eigen(dataauto)
PCAallo <- eigen(dataallo)
# Merges the first 3 PCs with annot ~
PCAauto_Annot <- as.data.frame(cbind(annot, PCAauto$vectors[, c(1:3)])); colnames(PCAauto_Annot) <- c("Sample_ID", "PCA_1", "PCA_2", "PCA_3")
PCAallo_Annot <- as.data.frame(cbind(annot, PCAallo$vectors[, c(1:3)])); colnames(PCAallo_Annot) <- c("Sample_ID", "PCA_1", "PCA_2", "PCA_3")
# Merges the first 3 PCs with annot ~
PCAauto_Annot$CHR <- "Autosomes"
PCAallo_Annot$CHR <- "Chromosome Z"
# Binds the 2 DFs based on common columns ~
fulldf <- rbind(PCAauto_Annot, PCAallo_Annot)
# Expands PCA_Annot by adding Population ~
fulldf$Population <- ifelse(grepl("FR0", fulldf$Sample_ID), "Sales",
ifelse(grepl("KAZ", fulldf$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", fulldf$Sample_ID), "Lesina",
ifelse(grepl("Crotone", fulldf$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", fulldf$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", fulldf$Sample_ID), NA,
ifelse(grepl("PD22NLD0146F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0077M", fulldf$Sample_ID), "Meerkerk",
ifelse(grepl("PDOM2022NLD0", fulldf$Sample_ID), "Utrecht", "Error"))))))))))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Meerkerk",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
NA))
# Expands PCA_Annot by adding Species ~
fulldf$Species <- ifelse(fulldf$Population %in% c("Utrecht", "Sales", "Garderen", "Meerkerk"), "House",
ifelse(fulldf$Population %in% c("Chokpak", "Lesina"), "Spanish",
ifelse(fulldf$Population %in% c("Crotone", "Guglionesi"), "Italian",
ifelse(fulldf$Population %in% NA, NA, "Error"))))
# Reorders Population ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
NA))
# Defines the shapes to be used for each Group ~
Shapes <- as.vector(c(1, 2, 3, 9, 13, 21, 11, 23))
# Creates legend plot ~
MyLegend_Plot <-
ggplot(data = fulldf, aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), size = 2.8, starstroke = .15, alpha = .7) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000"), na.translate = FALSE) +
scale_starshape_manual(values = Shapes, na.translate = FALSE) +
scale_x_continuous("PC 1 (10.9%)",
expand = c(.005, .005)) +
scale_y_continuous("PC 2 (2.5%)",
expand = c(.03, .03)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "top",
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 15, l = 15),
legend.box = "vertical",
legend.box.margin = margin(t = 20, b = 30, r = 0, l = 0)) +
guides(starshape = guide_legend(title = "Population", title.theme = element_text(family = "Optima", size = 16, face = "bold"),
label.theme = element_text(size = 15, family = "Optima"),
override.aes = list(starshape = Shapes, size = 5, starstroke = .15), nrow = 1, order = 2),
fill = guide_legend(title = "Species", title.theme = element_text(family = "Optima", size = 16, face = "bold"),
label.theme = element_text(size = 15, family = "Optima"),
override.aes = list(starshape = 21, size = 5, starstroke = .15), nrow = 1, order = 1),
colour = "none")
# Defines the shapes to be used for each Group ~
Shapes_2 <- as.vector(c(1, 2, 3, 9, 13, 21, 11, 23, 14))
# Combines all populations from the Faroe Islands ~
fulldf$Species <- as.character(fulldf$Species)
fulldf$Population <- as.character(fulldf$Population)
fulldf <- fulldf %>%
mutate_at(c("Population", "Species"), ~replace_na(., "Y150239"))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Meerkerk",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Y150239"))
# Reorders Population ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
"Y150239"))
# Expands PCA_Annot by adding Labels ~
fulldf$Labels <- ifelse(fulldf$Species %in% c("Y150239"), "Y150239", "")
# Gets Eigenvalues of each Eigenvectors (Allosome) ~
PCAauto_Eigenval_Sum <- sum(PCAauto$values)
(PCAauto$values[1]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[2]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[3]/PCAauto_Eigenval_Sum)*100
PCAauto_12 <-
ggplot(data = subset(fulldf, CHR == "Autosomes"), aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), alpha = .7, size = 2.15, starstroke = .15) +
facet_rep_grid(CHR ~. , scales = "free_x") +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#d9d9d9")) +
scale_starshape_manual(values = Shapes_2) +
geom_label_repel(data = subset(fulldf, CHR == "Autosomes"), aes(label = Labels),
family = "Optima", size = 3.8, fontface = "bold", max.overlaps = 100, nudge_x = -.055, nudge_y = .05,
point.padding = .6, force_pull = 10, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"),
ends = "last", type = "open")) +
geom_mark_ellipse(aes(filter = Species == "House", label = "House\nSparrow"), con.colour = "#1E90FF", colour = "#1E90FF",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "straight", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Spanish", label = "Spanish\nSparrow"), con.colour = "#ee0000", colour = "#ee0000",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Italian", label = "Italian\nSparrow"), con.colour = "#FFD700", colour = "#FFD700",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
scale_x_continuous("PC 1 (5.55%)",
breaks = c(-.1, 0, .1),
labels = c("-0.1", "0", ".01"),
limits = c(-.2, .2),
expand = c(0, 0)) +
scale_y_continuous("PC 2 (1.96%)",
#breaks = c(-.08, -.04, 0.00),
#labels = c("-0.08", "-0.04", "0.00"),
limits = c(-.31, .35),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x = element_text(family = "Optima", size = 15, face = "bold", margin = margin(t = 18, r = 0, b = 0, l = 0)),
axis.title.y = element_text(family = "Optima", size = 15, face = "bold", margin = margin(t = 0, r = 18, b = 0, l = 0)),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 11, face = "bold"),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 11, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 14, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
# Gets Eigenvalues of each Eigenvectors (Autosomes) ~
PCAallo_Eigenval_Sum <- sum(PCAallo$values)
(PCAallo$values[1]/PCAallo_Eigenval_Sum)*100
(PCAallo$values[2]/PCAallo_Eigenval_Sum)*100
(PCAallo$values[3]/PCAallo_Eigenval_Sum)*100
PCAallo_12 <-
ggplot(data = subset(fulldf, CHR == "Chromosome Z"), aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), alpha = .7, size = 2.15, starstroke = .15) +
facet_rep_grid(CHR ~. , scales = "free_x") +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#d9d9d9")) +
scale_starshape_manual(values = Shapes_2) +
geom_label_repel(data = subset(fulldf, CHR == "Chromosome Z"), aes(label = Labels),
family = "Optima", size = 3.8, fontface = "bold", max.overlaps = 100, nudge_x = .040, nudge_y = -.1,
point.padding = .6, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"),
ends = "last", type = "open")) +
geom_mark_ellipse(aes(filter = Species == "House", label = "House\nSparrow"), con.colour = "#1E90FF", colour = "#1E90FF",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "straight", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Spanish", label = "Spanish\nSparrow"), con.colour = "#ee0000", colour = "#ee0000",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Italian", label = "Italian\nSparrow"), con.colour = "#FFD700", colour = "#FFD700",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
scale_x_continuous("PC 1 (8.76%)",
limits = c(-.17, .19),
expand = c(0, 0)) +
scale_y_continuous("PC 2 (4.19%)",
limits = c(-.31, .35),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x = element_text(family = "Optima", size = 15, face = "bold", margin = margin(t = 18, r = 0, b = 0, l = 0)),
axis.title.y = element_text(family = "Optima", size = 15, face = "bold", margin = margin(t = 0, r = 18, b = 0, l = 0)),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 11, face = "bold"),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 11, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 14, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
# Isolates legend ~
MyLegendBlog <- get_legend(MyLegend_Plot)
# Gets final plot ~
PCA_Plot <- ggarrange(PCAauto_12, PCAallo_12, nrow = 2, legend.grob = MyLegendBlog)
# Saves plot ~
ggsave(PCA_Plot, file = "Y150239Genomics--PCA.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 12, height = 12, dpi = 600)
ggsave(PCA_Plot, file = "Y150239Genomics--PCA.png",
limitsize = FALSE, scale = 1, width = 12, height = 12, dpi = 600)
#
##
### The END ~~~~~
