c(1, 2))
# Defines samples' IDs ~
sampleid = "Sample_ID"
# Loops over all Ks while adding labels and reordering clusters ~
for (j in 1:length(samples.auto[, 1])){
data <- read.table(samples.auto[j, 1])[, x.auto[[j]]]
for (i in 1:dim(data)[2]) {
temp <- data.frame(Ancestry = data[, i])
temp$K <- as.factor(rep(i, times = length(temp$Ancestry)))
temp[sampleid] <- as.factor(ids.auto[sampleid][, 1])
temp$K_Value <- as.factor(rep(paste("K = ", dim(data)[2], sep = ""), times = length(temp$Ancestry)))
temp <- merge(ids.auto, temp)
fulldf.auto <- rbind(fulldf.auto, temp)}}
for (j in 1:length(samples.allo[, 1])){
data <- read.table(samples.allo[j, 1])[, x.allo[[j]]]
for (i in 1:dim(data)[2]) {
temp <- data.frame(Ancestry = data[, i])
temp$K <- as.factor(rep(i, times = length(temp$Ancestry)))
temp[sampleid] <- as.factor(ids.allo[sampleid][, 1])
temp$K_Value <- as.factor(rep(paste("K = ", dim(data)[2], sep = ""), times = length(temp$Ancestry)))
temp <- merge(ids.allo, temp)
fulldf.allo <- rbind(fulldf.allo, temp)}}
# Finds missing rows in fulldf.allo ~
fulldf.allo_missing_rows <- anti_join(fulldf.auto, fulldf.allo, by = c("Sample_ID", "Population", "Species", "K", "K_Value"))
# Adds missing rows to fulldf.allo ~
fulldf.allo_missing_rows <- fulldf.allo_missing_rows %>%
group_by(K_Value) %>%
mutate(Ancestry = ifelse(K == 1, 1, 0),
chrtype = "Chromosome Z",
Status = "Missing") %>%
ungroup()
# Adds Status in fulldf.allo_present_rows ~
fulldf.allo_present_rows <- fulldf.allo %>%
mutate(Status = "Present")
# Combines fulldf.allo_present_rows with fulldf.allo_missing_rows ~
fulldf.allo <- bind_rows(fulldf.allo_missing_rows, fulldf.allo_present_rows)
# Adds Status in full.auto ~
fulldf.auto <- fulldf.auto %>%
mutate(Status = "Present")
# Combines fulldf.auto with fulldf.allo ~
fulldf <- rbind(fulldf.auto, fulldf.allo)
# Expands fulldf by adding Group ~
fulldf$Group <- ifelse(fulldf$Population %in% c("Utrecht", "Sales"), "House Sparrow",
ifelse(fulldf$Population %in% c("Guglionesi", "Crotone"), "Italian Sparrow",
ifelse(fulldf$Population %in% c("Chokpak", "Lesina"), "Spanish Sparrow",
ifelse(fulldf$Population %in% c("Focal Ind.", "Meerkerk", "Garderen"), "Focal Area", "Error"))))
# Reorders Population ~
fulldf$Group <- factor(fulldf$Group, ordered = T,
levels = c("House Sparrow",
"Italian Sparrow",
"Spanish Sparrow",
"Focal Area"))
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Chromosome Z"))
# Defines the target to be plotted ~
target = "Population"
# Define colors for Present status based on K
color_palette <- c("#ee0000", "#1E90FF", "#FFD700", "#88419d", "#c994c7", "#FF6347", "#00BFFF")
# Sets bar fill colour ~
fulldfUp <- fulldf %>%
mutate(K = as.factor(K),
fill_color = if_else(Status == "Present", color_palette[as.numeric(K)], "#ffffff"))
# Creates the plot ~
ngsAdmix <-
ggplot(fulldfUp, aes(x = Sample_ID, y = Ancestry, fill = fill_color, pattern = Status), colour = "#000000") +
geom_col_pattern(width = .85, alpha = .7, pattern_size = .1, pattern_density = .01, pattern_spacing = .075, pattern_units = "in", pattern_colour = "#000000", pattern_fill = "#000000") +
facet_nested(chrtype + K_Value ~ Group + Population, scales = "free_x", space = "free",
strip = strip_nested(text_x = elem_list_text(size = c(16, 13), family = c("Optima", "Optima"), face = c("bold", "bold"), angle = c(0, 90), margins = c(1, 2, 3, 4)),
background_x = elem_list_rect(fill = c("#d6d6d6", "#FAFAFA"), colour = c("#000000", "#000000"), linewidth = c(.3, .3)),
by_layer_x = TRUE,
text_y = elem_list_text(size = c(16, 13), family = c("Optima", "Optima"), face = c("bold", "bold")),
background_y = elem_list_rect(fill = c("#d6d6d6", "#FAFAFA"), colour = c("#000000", "#000000"), linewidth = c(.3, .3)),
by_layer_y = TRUE)) +
scale_fill_identity() +
scale_pattern_manual(values = c("stripe", "none")) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), breaks = NULL) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.minor.x = element_blank(),
panel.grid.major = element_blank(),
panel.spacing = unit(.1, "cm"),
plot.title = element_blank(),
legend.position = "none",
axis.title = element_blank(),
axis.text.x.bottom = element_blank(),
#axis.text.x.bottom = element_text(colour = "#000000", face = "bold", angle = 90, vjust = .5, hjust = .5),
axis.text.y = element_blank(),
axis.ticks = element_blank())
#strip.text.x = element_text(family = "Optima", colour = "#000000", face = "bold", size = 14, angle = 90, margin = margin(0.5, 0.1, 0.5, 0.1, "cm")),
#trip.text.y = element_text(family = "Optima", colour = "#000000", face = "bold", size = 14, angle = 90, margin = margin(0, 0.1, 0, 0.1, "cm")))
# Adds grob ~
#ngsAdmix_G <- ggplotGrob(ngsAdmix)
#ngsAdmix_G <- gtable_add_rows(ngsAdmix_G, unit(1.25, "cm"), pos = 5)
# Adds top strips ~
#ngsAdmix_G <- gtable_add_grob(ngsAdmix_G, list(rectGrob(gp = gpar(col = "#000000", fill = "#1E90FF", alpha = .7, size = .75, lwd = .25)),
#               textGrob("House Sparrow", gp = gpar(cex = 1.5, fontface = 'bold', fontfamily = "Optima", col = "black"))),
#               t = 6, l = 4, b = 6, r = 12, name = c("a", "b"))
#ngsAdmix_G <- gtable_add_grob(ngsAdmix_G, list(rectGrob(gp = gpar(col = "#000000", fill = "#FFD700", alpha = .7, size = .5, lwd = .25)),
#               textGrob("Italian Sparrow", gp = gpar(cex = 1.5, fontface = 'bold', fontfamily = "Optima", col = "black"))),
#               t = 6, l = 14, b = 6, r = 20, name = c("a", "b"))
#ngsAdmix_G <- gtable_add_grob(ngsAdmix_G, list(rectGrob(gp = gpar(col = "#000000", fill = "#ee0000", alpha = .7, size = .75, lwd = .25)),
#               textGrob("Spanish Sparrow", gp = gpar(cex = 1.5, fontface = 'bold', fontfamily = "Optima", col = "black"))),
#               t = 6, l = 22, b = 6, r = 28, name = c("a", "b"))
#ngsAdmix_G <- gtable_add_grob(ngsAdmix_G, list(rectGrob(gp = gpar(col = "#000000", fill = "#c994c7", alpha = .7, size = .75, lwd = .25)),
#              textGrob("Focal Area", gp = gpar(cex = 1.5, fontface = 'bold', fontfamily = "Optima", col = "black"))),
#              t = 6, l = 30, b = 6, r = 39, name = c("a", "b"))
# Controls separation ~
#ngsAdmix_G <- gtable_add_rows(ngsAdmix_G, unit(2 / 10, "line"), 6)
# Creates the final plot ~
#grid.newpage()
#grid.draw(ngsAdmix_G)
# Saves the final plot ~
ggsave(ngsAdmix, file = "Y150239Genomics--ngsAdmix.pdf",
device = cairo_pdf, width = 20, height = 8, scale = 1, dpi = 600)
ggsave(ngsAdmix, file = "Y150239Genomics--ngsAdmix.jpeg",
width = 20, height = 8, scale = 1, dpi = 600)
#
##
### The END ~~~~~
### The BEGINNING ~~~~~
##
# ~ Plots Y150239Genomics--evalAdmix | Written by George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, ggh4x, ggstar, ggrepel, ggnewscale, data.table, tidytext, patchwork)
# Defines the orderInds function ~
orderInds <- function(q=NULL, pop=NULL, popord=NULL){
ordpop <- function(x, pop, q){
idx <- which(pop==x)
main_k <- which.max(apply(as.matrix(q[idx,]),2,mean))
ord <- order(q[idx,main_k])
idx[ord]}
if(!is.null(pop)){
if(is.null(popord)) popord <- unique(pop)
if(!is.null(q)){
ord <- unlist(sapply(popord, ordpop, pop=pop, q=q))
} else if (is.null(q)) {
ord <- unlist(sapply(popord, function(x) which(pop==x)))
}
} else if (is.null(pop)&!is.null(q)) {
# Gets index of k with max value per individual
main_k <- apply(q,1, which.max)
# Get max q per indivdiual ~
main_q <- q[cbind(1:nrow(q),main_k)]
ord <- order(main_k, main_q)
} else {stop("Need at least an argument to order.")}
return(ord)}
# Defines compute_mean_correlations function ~
compute_mean_correlations <- function(cor_mat_list, ord_list, pop) {
pop <- pop[ord]
unique_pops <- unique(pop)
num_pops <- length(unique_pops)
process_single_matrix <- function(cor_mat, ord, pop) {
pop <- pop[ord]
annotations <- cor_mat[, c("Sample_ID_1", "Population_1", "CHRType", "K")]
cor_mat <- cor_mat[, !(colnames(cor_mat) %in% c("Sample_ID_1", "Population_1", "CHRType", "K"))]
mean_cor_df <- data.frame(matrix(ncol = num_pops, nrow = num_pops))
rownames(mean_cor_df) <- unique_pops
colnames(mean_cor_df) <- unique_pops
for (i1 in 1:num_pops) {
for (i2 in 1:num_pops) {
p1 <- unique_pops[i1]
p2 <- unique_pops[i2]
indices_p1 <- which(pop == p1)
indices_p2 <- which(pop == p2)
cor_values <- cor_mat[indices_p1, indices_p2]
mean_cor_df[p1, p2] <- mean(cor_values[!is.na(cor_values)])}}
mean_cor_df[is.na(mean_cor_df)] <- 0
for (i1 in 1:(nrow(cor_mat) - 1)) {
for (i2 in (i1 + 1):nrow(cor_mat)) {
cor_mat[i2, i1] <- mean_cor_df[pop[i1], pop[i2]]
cor_mat[i1, i2] <- cor_mat[i1, i2]}}
cor_mat <- cbind(annotations, cor_mat)
return(cor_mat)}
final_list <- list()
for (i in seq_along(cor_mat_list)) {
cor_mat_list[[i]] <- process_single_matrix(cor_mat_list[[i]], ord_list[[i]], pop)
current_K <- unique(cor_mat_list[[i]]$K)
final_list[[as.character(current_K)]] <- cor_mat_list[[i]]}
return(final_list)}
# Initializes lists for storing data separately for Allosome and Autosomes
corres_allosome <- list()
corres_autosomes <- list()
final_list_allosome <- list()
final_list_autosomes <- list()
annot_allosome <- list()
annot_autosomes <- list()
ord_list_allosome <- list()
ord_list_autosomes <- list()
# Define the two folder paths
folder_paths <- c("./Autosomes", "./Allosome")
# Loop over each folder (for Allosome and Autosomes)
for (folder in folder_paths) {
# Get the files in the folder
corres_files <- dir(folder, pattern = ".corres")
annot_files <- dir(folder, pattern = ".labels")
qopt_files <- dir(folder, pattern = ".qopt")
# Check if files exist
if (length(corres_files) == 0 || length(annot_files) == 0 || length(qopt_files) == 0) {
stop(paste("Missing files in folder:", folder))
}
# Process each file
for (k in seq_along(annot_files)) {
# Read annotation file
annot <- read.table(file.path(folder, annot_files[k]), sep = "\t", header = FALSE, stringsAsFactors = FALSE)
colnames(annot) <- c("Annot")
# Assign populations based on the annotations
annot$Population <- ifelse(grepl("FR0", annot$Annot), "Sales",
ifelse(grepl("KAZ", annot$Annot), "Chokpak",
ifelse(grepl("Lesina", annot$Annot), "Lesina",
ifelse(grepl("Crotone", annot$Annot), "Crotone",
ifelse(grepl("Guglionesi", annot$Annot), "Guglionesi",
ifelse(grepl("PI22NLD0001M", annot$Annot), "Focal Area",
ifelse(grepl("PD22NLD0146F", annot$Annot), "Focal Area",
ifelse(grepl("PD22NLD0147F", annot$Annot), "Focal Area",
ifelse(grepl("PDOM2022NLD0077M", annot$Annot), "Focal Area",
ifelse(grepl("PDOM2022NLD0", annot$Annot), "Utrecht", "Error"))))))))))
annot$Ind <- with(annot, ave(Population, Population, FUN = function(x) sprintf("%s_%02d", x, seq_along(x))))
# Read qopt file if it exists
qopt_df <- NULL
if (length(qopt_files) >= k && file.exists(file.path(folder, qopt_files[k]))) {
qopt_df <- as.matrix(read.table(file.path(folder, qopt_files[k]), header = FALSE))
} else {
warning(paste("Missing or empty qopt file:", qopt_files[k], "in folder:", folder))
}
# Read corres file
corres_df <- as.data.frame(read.table(file.path(folder, corres_files[k])))
if (nrow(corres_df) == 0 || ncol(corres_df) == 0) {
stop(paste("Empty or invalid corres file:", corres_files[k], "in folder:", folder))
}
labels <- annot$Annot
pop <- annot$Population
ord <- orderInds(q = qopt_df, pop = pop)
# Check if ord is valid
if (length(ord) != nrow(corres_df)) {
stop(paste("Invalid ordering vector (ord) for file:", corres_files[k], "in folder:", folder))
}
# Update the correct ord_list and annot_list depending on the CHRType
if (grepl("Allosome", folder)) {
ord_list_allosome[[k]] <- ord
annot_allosome[[k]] <- annot  # Store annot separately for Allosome
pop_allo <- annot$Population
} else {
ord_list_autosomes[[k]] <- ord
annot_autosomes[[k]] <- annot  # Store annot separately for Autosomes
pop_auto <- annot$Population
}
# Reorder corres_df based on ord
corres_df <- corres_df[ord, ord]
ordered_labels <- labels[ord]
rownames(corres_df) <- ordered_labels
colnames(corres_df) <- ordered_labels
corres_df$Sample_ID_1 <- rownames(corres_df)
corres_df$Population_1 <- annot$Population
corres_df$CHRType <- str_extract(corres_files[k], "(Allosome|Autosomes)")
corres_df$K <- str_extract(corres_files[k], "(K2|K3|K4|K5|K6|K7)")
# Format K values
corres_df$K <- ifelse(grepl("K2", corres_df$K), "K = 2",
ifelse(grepl("K3", corres_df$K), "K = 3",
ifelse(grepl("K4", corres_df$K), "K = 4",
ifelse(grepl("K5", corres_df$K), "K = 5",
ifelse(grepl("K6", corres_df$K), "K = 6",
ifelse(grepl("K7", corres_df$K), "K = 7", "Error"))))))
# Add the data to the corresponding CHRType list
if (grepl("Allosome", corres_df$CHRType[1])) {
corres_allosome[[k]] <- corres_df
# Apply compute_mean_correlations for Allosome
final_list_allosome[[k]] <- compute_mean_correlations(cor_mat_list = list(corres_df), ord_list = list(ord), pop = pop_allo)
} else {
corres_autosomes[[k]] <- corres_df
# Apply compute_mean_correlations for Autosomes
final_list_autosomes[[k]] <- compute_mean_correlations(cor_mat_list = list(corres_df), ord_list = list(ord), pop = pop_auto)}}}
# Combines all matrices for different Ks into data frame ~
final_combined_autosomes <- bind_rows(unlist(final_list_autosomes, recursive = FALSE), .id = "K_Value")
final_combined_allosome <- bind_rows(unlist(final_list_allosome, recursive = FALSE), .id = "K_Value")
# Converts data frame into long ~
final_long_format_autosomes <- final_combined_autosomes %>%
pivot_longer(cols = -c(K_Value, Sample_ID_1, Population_1, CHRType, K),
names_to = "Sample_ID_2",
values_to = "Value") %>%
select(Sample_ID_1, Sample_ID_2, Population_1, CHRType, K, Value)
final_long_format_allosome <- final_combined_allosome %>%
pivot_longer(cols = -c(K_Value, Sample_ID_1, Population_1, CHRType, K),
names_to = "Sample_ID_2",
values_to = "Value") %>%
select(Sample_ID_1, Sample_ID_2, Population_1, CHRType, K, Value)
# Gets Population_2 ~
fulldf_autosomes <- final_long_format_autosomes %>%
mutate(Population_2 = ifelse(grepl("FR0", Sample_ID_2), "Sales",
ifelse(grepl("KAZ", Sample_ID_2), "Chokpak",
ifelse(grepl("Lesina", Sample_ID_2), "Lesina",
ifelse(grepl("Crotone", Sample_ID_2), "Crotone",
ifelse(grepl("Guglionesi", Sample_ID_2), "Guglionesi",
ifelse(grepl("PI22NLD0001M", Sample_ID_2), "Focal Area",
ifelse(grepl("PD22NLD0146F", Sample_ID_2), "Focal Area",
ifelse(grepl("PD22NLD0147F", Sample_ID_2), "Focal Area",
ifelse(grepl("PDOM2022NLD0077M", Sample_ID_2), "Focal Area",
ifelse(grepl("PDOM2022NLD0", Sample_ID_2), "Utrecht", "Error"))))))))))) %>%
select(1:3, Population_2, everything())
fulldf_allosome <- final_long_format_allosome %>%
mutate(Population_2 = ifelse(grepl("FR0", Sample_ID_2), "Sales",
ifelse(grepl("KAZ", Sample_ID_2), "Chokpak",
ifelse(grepl("Lesina", Sample_ID_2), "Lesina",
ifelse(grepl("Crotone", Sample_ID_2), "Crotone",
ifelse(grepl("Guglionesi", Sample_ID_2), "Guglionesi",
ifelse(grepl("PI22NLD0001M", Sample_ID_2), "Focal Area",
ifelse(grepl("PD22NLD0146F", Sample_ID_2), "Focal Area",
ifelse(grepl("PD22NLD0147F", Sample_ID_2), "Focal Area",
ifelse(grepl("PDOM2022NLD0077M", Sample_ID_2), "Focal Area",
ifelse(grepl("PDOM2022NLD0", Sample_ID_2), "Utrecht", "Error"))))))))))) %>%
select(1:3, Population_2, everything())
# Defines the generate_ordered_permutations function ~
generate_ordered_permutations <- function(individuals, k) {
perm <- do.call(rbind, lapply(individuals, function(id1) {
data.frame(Sample_ID_1 = id1, Sample_ID_2 = individuals, K = k)}))
return(perm)}
all_permutations_autosomes <- do.call(rbind, lapply(seq_along(corres_autosomes), function(i) {
individuals <- corres_autosomes[[i]]$Sample_ID_1
k <- corres_autosomes[[i]]$K[1]
generate_ordered_permutations(individuals, k)}))
all_permutations_allosome <- do.call(rbind, lapply(seq_along(corres_allosome), function(i) {
individuals <- corres_allosome[[i]]$Sample_ID_1
k <- corres_allosome[[i]]$K[1]
generate_ordered_permutations(individuals, k)}))
# Sets the Order column per K ~
all_permutations_autosomes <- all_permutations_autosomes %>%
group_by(K) %>%
mutate(Order = match(Sample_ID_1, unique(Sample_ID_1))) %>%
ungroup()
all_permutations_allosome <- all_permutations_allosome %>%
group_by(K) %>%
mutate(Order = match(Sample_ID_1, unique(Sample_ID_1))) %>%
ungroup()
# Defines the reorder_fulldf function ~
reorder_fulldf <- function(df, permutations) {
permutations$order <- seq_len(nrow(permutations))
merged <- merge(permutations, df, by = c("Sample_ID_1", "Sample_ID_2", "K"), all.x = TRUE)
reordered <- merged[order(merged$order), ]
reordered$order <- NULL
return(reordered)}
# Splits fulldf and all_permutations by K ~
split_fulldf_autosomes <- split(fulldf_autosomes, fulldf_autosomes$K)
split_permutations_autosomes <- split(all_permutations_autosomes, all_permutations_autosomes$K)
split_fulldf_allosome <- split(fulldf_allosome, fulldf_allosome$K)
split_permutations_allosome <- split(all_permutations_allosome, all_permutations_allosome$K)
# Applies the reordering function to each subset of fulldf ~
fulldfUp_autosomes <- do.call(rbind, lapply(names(split_fulldf_autosomes), function(k) {
reordered_df <- reorder_fulldf(split_fulldf_autosomes[[k]], split_permutations_autosomes[[k]])
reordered_df$Order <- split_permutations_autosomes[[k]]$Order
return(reordered_df)}))
fulldfUp_allosome <- do.call(rbind, lapply(names(split_fulldf_allosome), function(k) {
reordered_df <- reorder_fulldf(split_fulldf_allosome[[k]], split_permutations_allosome[[k]])
reordered_df$Order <- split_permutations_allosome[[k]]$Order
return(reordered_df)}))
# Sets factor levels for Sample_ID_1 & Sample_ID_2 per K ~
fulldfUp_autosomes <- fulldfUp_autosomes %>%
group_by(K) %>%
mutate(Sample_ID_1 = factor(Sample_ID_1, levels = unique(Sample_ID_1)),
Sample_ID_2 = factor(Sample_ID_2, levels = unique(Sample_ID_1))) %>%
ungroup()
fulldfUp_allosome <- fulldfUp_allosome %>%
group_by(K) %>%
mutate(Sample_ID_1 = factor(Sample_ID_1, levels = unique(Sample_ID_1)),
Sample_ID_2 = factor(Sample_ID_2, levels = unique(Sample_ID_1))) %>%
ungroup()
# Safely convert to numeric factor
fulldfUp_autosomes <- fulldfUp_autosomes %>% mutate(Sample_ID_Factor = as.numeric(Sample_ID_1))
fulldfUp_allosome <- fulldfUp_allosome %>% mutate(Sample_ID_Factor = as.numeric(Sample_ID_1))
fulldfUp <- rbind(fulldfUp_autosomes, fulldfUp_allosome)
# Calculate population positions
population_positions <- fulldfUp %>%
filter(!is.na(Sample_ID_Factor)) %>%
group_by(Population_1) %>%
summarise(center = (min(Sample_ID_Factor) + max(Sample_ID_Factor)) / 2)
# Corrects CHRType ~
levels(fulldfUp$CHRType <- sub("Allosome", "Chromosome Z", fulldfUp$CHRType))
# Reorders CHRType ~
fulldfUp$CHRType <- factor(fulldfUp$CHRType, ordered = TRUE,
levels = c("Autosomes",
"Chromosome Z"))
# Function to set the Triangle column ~
assign_triangle <- function(df) {
df <- df %>%
mutate(Sample_ID_1 = as.character(Sample_ID_1),
Sample_ID_2 = as.character(Sample_ID_2),
Pair = paste0(pmin(Sample_ID_1, Sample_ID_2), "_", pmax(Sample_ID_1, Sample_ID_2)),
Triangle = case_when(Sample_ID_1 == Sample_ID_2 ~ "Diagonal", !duplicated(Pair) ~ "Individual", duplicated(Pair) ~ "Population")) %>%
select(-Pair)
return(df)}
# Applies the assign_triangle function per K ~
fulldfUp <- fulldfUp %>%
group_by(CHRType, K) %>%
do({df <- assign_triangle(.)
df$K <- unique(df$K)
df}) %>%
ungroup()
# Creates fulldf_points ~
fulldf_points <- fulldfUp %>%
filter((CHRType == "Autosomes" & K %in% c("K = 2", "K = 3", "K = 4")) | (CHRType == "Chromosome Z" & K %in% c("K = 5", "K = 6", "K = 7"))) %>%
filter(Triangle %in% c("Population", "Individual")) %>%
group_by(CHRType, K, Triangle, Population_1, Population_2) %>%
mutate(Value = if_else(Triangle == "Population", round(mean(Value, na.rm = TRUE), 9), Value)) %>%
ungroup() %>%
#mutate(temp = if_else(str_detect(Population_2, "Focal Region"), Population_1, Population_2),
#Population_1 = if_else(str_detect(Population_2, "Focal Region"), Population_2, Population_1),
#Population_2 = temp) %>%
#select(-temp) %>%
mutate(PopPair = paste(Population_1, "Vs", Population_2)) %>%
mutate(Labels = paste("Vs", Population_2)) %>%
group_by(CHRType, K, Triangle, Population_1, Population_2) %>%
filter(if_else(Triangle == "Population", !duplicated(PopPair), TRUE)) %>%
ungroup()
# Defines color palette and breaks ~
color_palette <- c("#4575b4", "#EAEDE9", "#d73027")
nHalf <- 10
Min <- -.15
Max <- .15
Thresh <- 0
rc1 <- colorRampPalette(colors = color_palette[1:2], space = "Lab")(nHalf)
rc2 <- colorRampPalette(colors = color_palette[2:3], space = "Lab")(nHalf)
rampcols <- c(rc1, rc2)
rampcols[c(nHalf, nHalf+1)] <- rgb(t(col2rgb(color_palette[2])), maxColorValue = 256)
rb1 <- seq(Min, Thresh, length.out = nHalf + 1)
rb2 <- seq(Thresh, Max, length.out = nHalf + 1)[-1]
rampbreaks <- c(rb1, rb2)
# Reorders Population_1 in fulldf_points ~
fulldf_points$Population_1 <- factor(fulldf_points$Population_1, ordered = T,
levels = c("Focal Area",
"Chokpak",
"Lesina",
"Guglionesi",
"Crotone",
"Sales",
"Utrecht"))
# Reorders chrtype ~
fulldf_points$K <- factor(fulldf_points$K, ordered = T,
levels = c("K = 7",
"K = 6",
"K = 5",
"K = 4",
"K = 3",
"K = 2"))
# Creates the panel ~
Y150239Genomics_evalAdmix_Points_Plot <-
ggplot(fulldf_points, aes(x = Value, y = Population_1)) +
geom_vline(xintercept = 0, linewidth = .35, linetype = 4, color = "#000000") +
geom_violin(data = subset(fulldf_points, Triangle == "Individual"), width = .6, linewidth = .2) +
geom_star(data = subset(fulldf_points, Triangle == "Population"), aes(fill = as.numeric(Value)),
size = 3.25, starshape = 15, alpha = .85, starstroke = .1, color = "#000000") +
geom_star(data = subset(fulldf_points, CHRType == "Chromosome Z" & Population_1 == "Focal Area" & Triangle == "Individual"),
size = 3.25, starshape = 15, alpha = .85, starstroke = .25, fill = NA, color = "#000000") +
geom_label_repel(data = subset(fulldf_points, Triangle == "Population" & Value >= .015), aes(label = Labels),
family = "Optima", size = 4.25, fontface = "bold", nudge_x = .06, nudge_y = .5,
point.padding = 1, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"), ends = "last", type = "open")) +
geom_label_repel(data = subset(fulldf_points, Triangle == "Population" & Value >= .09), aes(label = Labels),
family = "Optima", size = 4.25, fontface = "bold", nudge_y = -1.5,
point.padding = 2, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"), ends = "last", type = "open")) +
geom_label_repel(data = subset(fulldf_points, Triangle == "Population" & Value <= -.01), aes(label = Labels),
family = "Optima", size = 4.25, fontface = "bold", nudge_x = -.05, nudge_y = .5,
point.padding = 1, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"), ends = "last", type = "open")) +
scale_x_continuous(limits = c(-.15, .15),
breaks = c(-.1, 0, .1),
labels = c(-0.10, 0, 0.10)) +
scale_fill_gradientn(colors = rampcols,
limits = c(-.15, .15),
breaks = c(-.15, 0, .15),
labels = c(-0.15, 0, 0.15)) +
facet_nested(CHRType + K ~ Triangle, scales = "free_x", remove_labels = "y",
strip = strip_nested(text_x = elem_list_text(size = 15, family = "Optima", face = "bold"),
background_x = elem_list_rect(fill = "#d6d6d6", colour = "#000000", linewidth = .3),
by_layer_x = TRUE,
text_y = elem_list_text(size = c(15, 13), family = c("Optima", "Optima"), face = c("bold", "bold")),
background_y = elem_list_rect(fill = c("#d6d6d6", "#FAFAFA"), colour = c("#000000", "#000000"), linewidth = c(.3, .3)),
by_layer_y = TRUE)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major = element_line(color = "#E5E7E9", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.spacing = unit(.1, "cm"),
legend.position = "top",
legend.title.align = .5,
legend.title = element_text(family = "Optima", size = 16, face = "bold"),
legend.text = element_text(family = "Optima", size = 10, face = "bold"),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box = "horizontal",
legend.box.margin = margin(t = 10, b = 5, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank(),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.title = element_blank(),
axis.text = element_text(family = "Optima", colour = "#000000", size = 11, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.placement = "outside") +
guides(fill = guide_colourbar(title = "Residual Correlation",
title.position = "top", title.theme = element_text(family = "Optima", size = 22, face = "bold"),
label.theme = element_text(family = "Optima", size = 14, face = "bold"),
label.position = "bottom", barwidth = 12, barheight = 1, order = 1, frame.linetype = 1,
frame.colour = NA, ticks.colour = NA, direction = "horizontal",
even.steps = TRUE, draw.ulim = TRUE, draw.llim = TRUE))
# Saves the panel ~
ggsave(Y150239Genomics_evalAdmix_Points_Plot, file = "Y150239Genomics--evalAdmix_Points.pdf",
device = cairo_pdf, width = 12, height = 14, scale = 1, dpi = 600)
ggsave(Y150239Genomics_evalAdmix_Points_Plot, file = "Y150239Genomics--evalAdmix_Points.jpeg",
width = 12, height = 14, scale = 1, dpi = 600)
