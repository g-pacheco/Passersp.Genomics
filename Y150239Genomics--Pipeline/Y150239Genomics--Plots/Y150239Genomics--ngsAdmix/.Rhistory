"Italian",
"Spanish",
NA))
# Defines the shapes to be used for each Group ~
Shapes <- as.vector(c(1, 2, 3, 13, 21, 11, 23))
# Creates legend plot ~
MyLegend_Plot <-
ggplot(data = fulldf, aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), size = 2.8, starstroke = .15, alpha = .7) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000"), na.translate = FALSE) +
scale_starshape_manual(values = Shapes, na.translate = FALSE) +
scale_x_continuous("PC 1 (4.3%)",
#breaks = c(0.99, 1, 1.01),
#labels = c("0.99", "1", "1.01"),
#limits = c(-.21, .21),
expand = c(.005, .005)) +
scale_y_continuous("PC 2 (1.2%)",
#breaks = c(-.15, 0, .15, .3, .45),
#labels = c("-.15", "0", ".15", ".3", ".45"),
#limits = c(-0.0525, 0.0525),
expand = c(.03, .03)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "top",
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 15, l = 15),
legend.box = "vertical",
legend.box.margin = margin(t = 20, b = 30, r = 0, l = 0)) +
guides(starshape = guide_legend(title = "Population", title.theme = element_text(size = 16, face = "bold"),
label.theme = element_text(size = 15),
override.aes = list(starshape = Shapes, size = 5, starstroke = .15), nrow = 1, order = 2),
fill = guide_legend(title = "Species", title.theme = element_text(size = 16, face = "bold"),
label.theme = element_text(size = 15),
override.aes = list(starshape = 21, size = 5, starstroke = .15), nrow = 1, order = 1),
colour = "none")
# Defines the shapes to be used for each Group ~
Shapes_2 <- as.vector(c(1, 2, 3, 13, 21, 11, 23, 14))
fulldf$Species <- as.character(fulldf$Species)
fulldf$Population <- as.character(fulldf$Population)
fulldf <- fulldf %>%
mutate_at(c("Population", "Species"), ~replace_na(., "Target"))
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Target"))
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
"Target"))
# Expands PCA_Annot by adding Labels ~
fulldf$Labels <- ifelse(fulldf$Species %in% c("Target"), "Target", "")
PCAauto_Eigenval_Sum <- sum(PCAauto$values)
(PCAauto$values[1]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[2]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[3]/PCAauto_Eigenval_Sum)*100
ggplot(data = subset(fulldf, CHR == "Autosomes"), aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), alpha = .7, size = 2.8, starstroke = .15) +
facet_rep_grid(CHR ~. , scales = "free_x") +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#d9d9d9")) +
scale_starshape_manual(values = Shapes_2) +
geom_label_repel(data = subset(fulldf, CHR == "Autosomes"), aes(label = Labels),
family = ".SF Compact Rounded", size = 3.8, fontface = "bold", max.overlaps = 100, nudge_x = .055, nudge_y = .05,
point.padding = .6, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"),
ends = "last", type = "open")) +
geom_mark_ellipse(aes(filter = Species == "House", label = "House\nSparrow"), con.colour = "#1E90FF", colour = "#1E90FF",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "straight", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Spanish", label = "Spanish\nSparrow"), con.colour = "#ee0000", colour = "#ee0000",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Italian", label = "Italian\nSparrow"), con.colour = "#FFD700", colour = "#FFD700",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
scale_x_continuous("PC 1 (13.2%)",
#scale_x_continuous("PC 1 (5.5%)",
#breaks = c(0.99, 1, 1.01),
#labels = c("0.99", "1", "1.01"),
limits = c(-.21, .21),
expand = c(0, 0)) +
scale_y_continuous("PC 2 (2.5%)",
#scale_y_continuous("PC 2 (2.2%)",
#breaks = c(-.08, -.04, 0.00),
#labels = c("-0.08", "-0.04", "0.00"),
limits = c(-.7, .35),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x = element_text(size = 15, face = "bold", margin = margin(t = 18, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 15, face = "bold", margin = margin(t = 0, r = 18, b = 0, l = 0)),
axis.text.x = element_text(color = "#000000", size = 11, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 11, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(colour = "#000000", size = 13, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tidyverse, plyr, RColorBrewer, extrafont, ggforce, ggstar, ggrepel, RcppCNPy, reshape2, lemon, plotly,
gridExtra, grid, cowplot, patchwork, ggpubr, rphylopic)
dataauto <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20_OnlyPDOM2022NLD0046M.OnlyAutosomes.cov"), header = FALSE, stringsAsFactors = FALSE)
# Loads annot ~
#annot <- read.table("NLSparrow.labels", sep = "\t", header = FALSE, stringsAsFactors = FALSE)
annot <- read.table("NLSparrow.OnlyPDOM2022NLD0046M.labels", sep = "\t", header = FALSE, stringsAsFactors = FALSE)
# Runs PCA ~
PCAauto <- eigen(dataauto)
PCAsex <- eigen(datasex)
# Merges the first 3 PCs with annot ~
PCAauto_Annot <- as.data.frame(cbind(annot, PCAauto$vectors[, c(1:3)])); colnames(PCAauto_Annot) <- c("Sample_ID", "PCA_1", "PCA_2", "PCA_3")
PCAsex_Annot <- as.data.frame(cbind(annot, PCAsex$vectors[, c(1:3)])); colnames(PCAsex_Annot) <- c("Sample_ID", "PCA_1", "PCA_2", "PCA_3")
# Merges the first 3 PCs with annot ~
PCAauto_Annot$CHR <- "Autosomes"
PCAsex_Annot$CHR <- "Allosome (Z)"
# Binds the 2 DFs based on common columns ~
fulldf <- rbind(PCAauto_Annot, PCAsex_Annot)
fulldf <- rbind(PCAauto_Annot)
# Expands PCA_Annot by adding Population ~
fulldf$Population <- ifelse(grepl("FR0", fulldf$Sample_ID), "Sales",
ifelse(grepl("KAZ", fulldf$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", fulldf$Sample_ID), "Lesina",
ifelse(grepl("Crotone", fulldf$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", fulldf$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", fulldf$Sample_ID), NA,
ifelse(grepl("PD22NLD0146F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0", fulldf$Sample_ID), "Utrecht", "Error")))))))))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
NA))
# Expands PCA_Annot by adding Species ~
fulldf$Species <- ifelse(fulldf$Population %in% c("Utrecht", "Sales", "Garderen"), "House",
ifelse(fulldf$Population %in% c("Chokpak", "Lesina"), "Spanish",
ifelse(fulldf$Population %in% c("Crotone", "Guglionesi"), "Italian",
ifelse(fulldf$Population %in% NA, NA, "Error"))))
# Reorders Population ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
NA))
# Defines the shapes to be used for each Group ~
Shapes <- as.vector(c(1, 2, 3, 13, 21, 11, 23))
# Creates legend plot ~
MyLegend_Plot <-
ggplot(data = fulldf, aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), size = 2.8, starstroke = .15, alpha = .7) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000"), na.translate = FALSE) +
scale_starshape_manual(values = Shapes, na.translate = FALSE) +
scale_x_continuous("PC 1 (4.3%)",
#breaks = c(0.99, 1, 1.01),
#labels = c("0.99", "1", "1.01"),
#limits = c(-.21, .21),
expand = c(.005, .005)) +
scale_y_continuous("PC 2 (1.2%)",
#breaks = c(-.15, 0, .15, .3, .45),
#labels = c("-.15", "0", ".15", ".3", ".45"),
#limits = c(-0.0525, 0.0525),
expand = c(.03, .03)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "top",
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 15, l = 15),
legend.box = "vertical",
legend.box.margin = margin(t = 20, b = 30, r = 0, l = 0)) +
guides(starshape = guide_legend(title = "Population", title.theme = element_text(size = 16, face = "bold"),
label.theme = element_text(size = 15),
override.aes = list(starshape = Shapes, size = 5, starstroke = .15), nrow = 1, order = 2),
fill = guide_legend(title = "Species", title.theme = element_text(size = 16, face = "bold"),
label.theme = element_text(size = 15),
override.aes = list(starshape = 21, size = 5, starstroke = .15), nrow = 1, order = 1),
colour = "none")
# Defines the shapes to be used for each Group ~
Shapes_2 <- as.vector(c(1, 2, 3, 13, 21, 11, 23, 14))
# Combines all populations from the Faroe Islands ~
fulldf$Species <- as.character(fulldf$Species)
fulldf$Population <- as.character(fulldf$Population)
fulldf <- fulldf %>%
mutate_at(c("Population", "Species"), ~replace_na(., "Y150239"))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Y150239"))
# Reorders Population ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
"Y150239"))
# Expands PCA_Annot by adding Labels ~
fulldf$Labels <- ifelse(fulldf$Species %in% c("Y150239"), "Y150239", "")
# Gets Eigenvalues of each Eigenvectors ~
PCAauto_Eigenval_Sum <- sum(PCAauto$values)
(PCAauto$values[1]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[2]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[3]/PCAauto_Eigenval_Sum)*100
ggplot(data = subset(fulldf, CHR == "Autosomes"), aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), alpha = .7, size = 2.8, starstroke = .15) +
facet_rep_grid(CHR ~. , scales = "free_x") +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#d9d9d9")) +
scale_starshape_manual(values = Shapes_2) +
geom_label_repel(data = subset(fulldf, CHR == "Autosomes"), aes(label = Labels),
family = ".SF Compact Rounded", size = 3.8, fontface = "bold", max.overlaps = 100, nudge_x = .055, nudge_y = .05,
point.padding = .6, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"),
ends = "last", type = "open")) +
geom_mark_ellipse(aes(filter = Species == "House", label = "House\nSparrow"), con.colour = "#1E90FF", colour = "#1E90FF",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "straight", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Spanish", label = "Spanish\nSparrow"), con.colour = "#ee0000", colour = "#ee0000",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Italian", label = "Italian\nSparrow"), con.colour = "#FFD700", colour = "#FFD700",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = ".SF Compact Rounded", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
scale_x_continuous("PC 1 (13.2%)",
#scale_x_continuous("PC 1 (5.5%)",
#breaks = c(0.99, 1, 1.01),
#labels = c("0.99", "1", "1.01"),
limits = c(-.21, .21),
expand = c(0, 0)) +
scale_y_continuous("PC 2 (2.5%)",
#scale_y_continuous("PC 2 (2.2%)",
#breaks = c(-.08, -.04, 0.00),
#labels = c("-0.08", "-0.04", "0.00"),
limits = c(-.7, .35),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x = element_text(size = 15, face = "bold", margin = margin(t = 18, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 15, face = "bold", margin = margin(t = 0, r = 18, b = 0, l = 0)),
axis.text.x = element_text(color = "#000000", size = 11, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 11, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(colour = "#000000", size = 13, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
View(PCAauto_Annot)
### The BEGINNING ~~~~~
##
# NLSparrow--PCA | First written by Homère J. Alves Monteiro with later modifications by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tidyverse, plyr, RColorBrewer, extrafont, ggforce, ggstar, ggrepel, RcppCNPy, reshape2, lemon, plotly,
gridExtra, grid, cowplot, patchwork, ggpubr, rphylopic)
# Loads data ~
#dataauto <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.OnlyAutosomes.cov"), header = FALSE, stringsAsFactors = FALSE)
#datasex <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.OnlySexual.cov"), header = FALSE, stringsAsFactors = FALSE)
#dataauto <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.Pruned.OnlyAutosomes.cov"), header = FALSE, stringsAsFactors = FALSE)
#datasex <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.Pruned.OnlySexual.cov"), header = FALSE, stringsAsFactors = FALSE)
dataauto <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.FilteredUp.Weight2.Pruned.MAF40.cov"), header = FALSE, stringsAsFactors = FALSE)
# Loads annot ~
#annot <- read.table("NLSparrow.labels", sep = "\t", header = FALSE, stringsAsFactors = FALSE)
annot <- read.table("NLSparrow.labels", sep = "\t", header = FALSE, stringsAsFactors = FALSE)
# Runs PCA ~
PCAauto <- eigen(dataauto)
View(PCAauto)
# Merges the first 3 PCs with annot ~
PCAauto_Annot <- as.data.frame(cbind(annot, PCAauto$vectors[, c(1:3)])); colnames(PCAauto_Annot) <- c("Sample_ID", "PCA_1", "PCA_2", "PCA_3")
View(PCAauto_Annot)
### The BEGINNING ~~~~~
##
# NLSparrow--PCA | First written by Homère J. Alves Monteiro with later modifications by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tidyverse, plyr, RColorBrewer, extrafont, ggforce, ggstar, ggrepel, RcppCNPy, reshape2, lemon, plotly,
gridExtra, grid, cowplot, patchwork, ggpubr, rphylopic)
# Loads data ~
#dataauto <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.OnlyAutosomes.cov"), header = FALSE, stringsAsFactors = FALSE)
#datasex <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.OnlySexual.cov"), header = FALSE, stringsAsFactors = FALSE)
#dataauto <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.Pruned.OnlyAutosomes.cov"), header = FALSE, stringsAsFactors = FALSE)
#datasex <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.MAF20.Pruned.OnlySexual.cov"), header = FALSE, stringsAsFactors = FALSE)
dataauto <- as.matrix(read.table("AllSamples_haplotypecaller.raw.vcf.FilteredUp.Weight2.Pruned.MAF40.cov"), header = FALSE, stringsAsFactors = FALSE)
#annot <- read.table("NLSparrow.labels", sep = "\t", header = FALSE, stringsAsFactors = FALSE)
annot <- read.table("NLSparrow.labels", sep = "\t", header = FALSE, stringsAsFactors = FALSE)
# Runs PCA ~
PCAauto <- eigen(dataauto)
View(PCAauto)
# Merges the first 3 PCs with annot ~
PCAauto_Annot <- as.data.frame(cbind(annot, PCAauto$vectors[, c(1:3)])); colnames(PCAauto_Annot) <- c("Sample_ID", "PCA_1", "PCA_2", "PCA_3")
View(PCAauto_Annot)
### The BEGINNING ~~~~~
##
# ~ Plots NLSparrow--ngsAdmix | First written by Jose Samaniego with later modifications by George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, scales, optparse, plyr, RColorBrewer, extrafont, gtable, grid, mdthemes, ggtext, glue)
# Creates colour palette ~
nb.cols <- 15
MyColours <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
# Loads the data ~
samples <- read.table("NLSparrow--ngsAdmix.popfile", stringsAsFactors = FALSE, sep = "\t")
# Reads the annotation file ~
ids <- read.table("NLSparrow.labels", stringsAsFactors = FALSE, sep = "\t", header = FALSE)
# Adds column ids names ~
colnames(ids) <- c("Sample_ID")
# Expands ids by adding Population ~
ids$Population <- ifelse(grepl("FR0", ids$Sample_ID), "Sales",
ifelse(grepl("KAZ", ids$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", ids$Sample_ID), "Lesina",
ifelse(grepl("Crotone", ids$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", ids$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", ids$Sample_ID), "Target",
ifelse(grepl("PD22NLD0146F", ids$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", ids$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0", ids$Sample_ID), "Utrecht", "Error")))))))))
# Reorders Population ~
ids$Population <- factor(ids$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Target"))
# Expands PCA_Annot by adding Species ~
ids$Species <- ifelse(ids$Population %in% c("Utrecht", "Sales", "Garderen"), "House",
ifelse(ids$Population %in% c("Chokpak", "Lesina"), "Spanish",
ifelse(ids$Population %in% c("Guglionesi", "Crotone"), "Italian",
ifelse(ids$Population %in% c("Target"), "Uncertain", "Error"))))
# Reorders Population ~
ids$Species <- factor(ids$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
"Uncertain"))
# Ask Sama ~
fulldf <- data.frame()
# Ask Sama 2 ~
x <- list(c(4, 5, 7, 6, 3, 2, 1),
c(1, 3, 5, 6, 2, 4),
c(5, 3, 2, 1, 4),
c(2, 4, 3, 1),
c(1, 2 ,3),
c(1, 2))
# Defines samples' IDs ~
sampleid = "Sample_ID"
# Ask Sama 3 ~
for (j in 1:length(samples[,1])){
data <- read.table(samples[j,1])[, x[[j]]]
for (i in 1:dim(data)[2]) {
temp <- data.frame(Ancestry = data[, i])
temp$K <- as.factor(rep(i, times = length(temp$Ancestry)))
temp[sampleid] <- as.factor(ids[sampleid][,1])
temp$K_Value <- as.factor(rep(paste("K = ", dim(data)[2], sep = ""), times = length(temp$Ancestry)))
temp <- merge(ids, temp)
fulldf <- rbind(fulldf, temp)}}
# Defines the target to be plotted ~
target = "Population"
# Creates the plots ~
ngsAdmix <-
ggplot(fulldf, aes(x = Sample_ID, y = Ancestry, fill = K)) +
geom_bar(stat = "identity", width = .85, alpha = .70) +
facet_grid(K_Value ~ get(target), space = "free_x", scales = "free_x") +
scale_fill_manual(values = c("#ee0000", "#1E90FF", "#FFD700", "#88419d", "#9ecae1", "#c6dbef", "#fec44f")) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), breaks = NULL) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.minor.x = element_blank(),
panel.grid.major = element_blank(),
panel.spacing = unit(.3, "lines"),
plot.title = element_blank(),
legend.position = "none",
axis.title = element_blank(),
axis.text.x.bottom = element_text(colour = "#000000", face = "bold", angle = 90, vjust = .5, hjust = .5),
axis.text.x.bottom = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
strip.background = element_rect(colour = "#000000", fill = "#FAFAFA", linewidth = .05),
strip.text.x = element_text(colour = "#000000", face = "bold", size = 16, angle = 90, margin = margin(.5, .1, .5, .1, "cm")),
strip.text.y = element_text(colour = "#000000", face = "bold", size = 16, angle = 90, margin = margin(0, .1, 0, .1, "cm")))
### The BEGINNING ~~~~~
##
# ~ Plots NLSparrow--ngsAdmix | First written by Jose Samaniego with later modifications by George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, scales, optparse, plyr, RColorBrewer, extrafont, gtable, grid, mdthemes, ggtext, glue)
# Creates colour palette ~
nb.cols <- 15
MyColours <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
# Loads the data ~
samples <- read.table("NLSparrow--ngsAdmix.popfile", stringsAsFactors = FALSE, sep = "\t")
# Reads the annotation file ~
ids <- read.table("NLSparrow.labels", stringsAsFactors = FALSE, sep = "\t", header = FALSE)
# Adds column ids names ~
colnames(ids) <- c("Sample_ID")
# Expands ids by adding Population ~
ids$Population <- ifelse(grepl("FR0", ids$Sample_ID), "Sales",
ifelse(grepl("KAZ", ids$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", ids$Sample_ID), "Lesina",
ifelse(grepl("Crotone", ids$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", ids$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", ids$Sample_ID), "Target",
ifelse(grepl("PD22NLD0146F", ids$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", ids$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0", ids$Sample_ID), "Utrecht", "Error")))))))))
# Reorders Population ~
ids$Population <- factor(ids$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Target"))
# Expands PCA_Annot by adding Species ~
ids$Species <- ifelse(ids$Population %in% c("Utrecht", "Sales", "Garderen"), "House",
ifelse(ids$Population %in% c("Chokpak", "Lesina"), "Spanish",
ifelse(ids$Population %in% c("Guglionesi", "Crotone"), "Italian",
ifelse(ids$Population %in% c("Target"), "Uncertain", "Error"))))
# Reorders Population ~
ids$Species <- factor(ids$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
"Uncertain"))
# Ask Sama ~
fulldf <- data.frame()
# Ask Sama 2 ~
x <- list(c(4, 5, 7, 6, 3, 2, 1),
c(1, 3, 5, 6, 2, 4),
c(5, 3, 2, 1, 4),
c(2, 4, 3, 1),
c(1, 2 ,3),
c(1, 2))
# Defines samples' IDs ~
sampleid = "Sample_ID"
# Ask Sama 3 ~
for (j in 1:length(samples[,1])){
data <- read.table(samples[j,1])[, x[[j]]]
for (i in 1:dim(data)[2]) {
temp <- data.frame(Ancestry = data[, i])
temp$K <- as.factor(rep(i, times = length(temp$Ancestry)))
temp[sampleid] <- as.factor(ids[sampleid][,1])
temp$K_Value <- as.factor(rep(paste("K = ", dim(data)[2], sep = ""), times = length(temp$Ancestry)))
temp <- merge(ids, temp)
fulldf <- rbind(fulldf, temp)}}
# Defines the target to be plotted ~
target = "Population"
# Creates the plots ~
ngsAdmix <-
ggplot(fulldf, aes(x = Sample_ID, y = Ancestry, fill = K)) +
geom_bar(stat = "identity", width = .85, alpha = .70) +
facet_grid(K_Value ~ get(target), space = "free_x", scales = "free_x") +
scale_fill_manual(values = c("#ee0000", "#1E90FF", "#FFD700", "#88419d", "#9ecae1", "#c6dbef", "#fec44f")) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), breaks = NULL) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.minor.x = element_blank(),
panel.grid.major = element_blank(),
panel.spacing = unit(.3, "lines"),
plot.title = element_blank(),
legend.position = "none",
axis.title = element_blank(),
axis.text.x.bottom = element_text(colour = "#000000", face = "bold", angle = 90, vjust = .5, hjust = .5),
#axis.text.x.bottom = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
strip.background = element_rect(colour = "#000000", fill = "#FAFAFA", linewidth = .05),
strip.text.x = element_text(colour = "#000000", face = "bold", size = 16, angle = 90, margin = margin(.5, .1, .5, .1, "cm")),
strip.text.y = element_text(colour = "#000000", face = "bold", size = 16, angle = 90, margin = margin(0, .1, 0, .1, "cm")))
# Saves the final plot ~
ggsave(ngsAdmix, file = "NLSparrow.MinInd90.Autosomes_TMP_SNPs_XXX.pdf",
device = cairo_pdf, width = 16, height = 8, dpi = 600)
