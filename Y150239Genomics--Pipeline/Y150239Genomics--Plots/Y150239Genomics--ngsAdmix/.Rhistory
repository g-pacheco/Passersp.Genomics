ifelse(grepl("Lesina", fulldf$Sample_ID), "Lesina",
ifelse(grepl("Crotone", fulldf$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", fulldf$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", fulldf$Sample_ID), NA,
ifelse(grepl("PD22NLD0146F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0077M", fulldf$Sample_ID), "Meerkerk",
ifelse(grepl("PDOM2022NLD0", fulldf$Sample_ID), "Utrecht", "Error"))))))))))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Meerkerk",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
NA))
# Expands PCA_Annot by adding Species ~
fulldf$Species <- ifelse(fulldf$Population %in% c("Utrecht", "Sales", "Garderen", "Meerkerk"), "House",
ifelse(fulldf$Population %in% c("Chokpak", "Lesina"), "Spanish",
ifelse(fulldf$Population %in% c("Crotone", "Guglionesi"), "Italian",
ifelse(fulldf$Population %in% NA, NA, "Error"))))
# Reorders Population ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
NA))
# Defines the shapes to be used for each Group ~
Shapes <- as.vector(c(1, 2, 3, 9, 13, 21, 11, 23))
# Creates legend plot ~
MyLegend_Plot <-
ggplot(data = fulldf, aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), size = 2.8, starstroke = .15, alpha = .7) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000"), na.translate = FALSE) +
scale_starshape_manual(values = Shapes, na.translate = FALSE) +
scale_x_continuous("PC 1 (10.9%)",
expand = c(.005, .005)) +
scale_y_continuous("PC 2 (2.5%)",
expand = c(.03, .03)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "top",
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 15, l = 15),
legend.box = "vertical",
legend.box.margin = margin(t = 20, b = 30, r = 0, l = 0)) +
guides(starshape = guide_legend(title = "Population", title.theme = element_text(family = "Optima", size = 16, face = "bold"),
label.theme = element_text(size = 15, family = "Optima"),
override.aes = list(starshape = Shapes, size = 5, starstroke = .15), nrow = 1, order = 2),
fill = guide_legend(title = "Species", title.theme = element_text(family = "Optima", size = 16, face = "bold"),
label.theme = element_text(size = 15, family = "Optima"),
override.aes = list(starshape = 21, size = 5, starstroke = .15), nrow = 1, order = 1),
colour = "none")
# Defines the shapes to be used for each Group ~
Shapes_2 <- as.vector(c(1, 2, 3, 9, 13, 21, 11, 23, 14))
# Combines all populations from the Faroe Islands ~
fulldf$Species <- as.character(fulldf$Species)
fulldf$Population <- as.character(fulldf$Population)
fulldf <- fulldf %>%
mutate_at(c("Population", "Species"), ~replace_na(., "Y150239"))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Meerkerk",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Y150239"))
# Reorders Population ~
fulldf$Species <- factor(fulldf$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
"Y150239"))
# Expands PCA_Annot by adding Labels ~
fulldf$Labels <- ifelse(fulldf$Species %in% c("Y150239"), "Y150239", "")
# Gets Eigenvalues of each Eigenvectors (Allosome) ~
PCAauto_Eigenval_Sum <- sum(PCAauto$values)
(PCAauto$values[1]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[2]/PCAauto_Eigenval_Sum)*100
(PCAauto$values[3]/PCAauto_Eigenval_Sum)*100
PCAauto_12 <-
ggplot(data = subset(fulldf, CHR == "Autosomes"), aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), alpha = .7, size = 2.15, starstroke = .15) +
facet_rep_grid(CHR ~. , scales = "free_x") +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#d9d9d9")) +
scale_starshape_manual(values = Shapes_2) +
geom_label_repel(data = subset(fulldf, CHR == "Autosomes"), aes(label = Labels),
family = "Optima", size = 3.8, fontface = "bold", max.overlaps = 100, nudge_x = -.055, nudge_y = .05,
point.padding = .6, force_pull = 10, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"),
ends = "last", type = "open")) +
geom_mark_ellipse(aes(filter = Species == "House", label = "House\nSparrow"), con.colour = "#1E90FF", colour = "#1E90FF",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "straight", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Spanish", label = "Spanish\nSparrow"), con.colour = "#ee0000", colour = "#ee0000",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Italian", label = "Italian\nSparrow"), con.colour = "#FFD700", colour = "#FFD700",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
scale_x_continuous("PC 1 (5.55%)",
breaks = c(-.1, 0, .1),
labels = c("-0.1", "0", ".01"),
limits = c(-.2, .2),
expand = c(0, 0)) +
scale_y_continuous("PC 2 (1.96%)",
#breaks = c(-.08, -.04, 0.00),
#labels = c("-0.08", "-0.04", "0.00"),
limits = c(-.31, .35),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x = element_text(family = "Optima", size = 15, face = "bold", margin = margin(t = 18, r = 0, b = 0, l = 0)),
axis.title.y = element_text(family = "Optima", size = 15, face = "bold", margin = margin(t = 0, r = 18, b = 0, l = 0)),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 11, face = "bold"),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 11, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 14, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
# Gets Eigenvalues of each Eigenvectors (Autosomes) ~
PCAallo_Eigenval_Sum <- sum(PCAallo$values)
(PCAallo$values[1]/PCAallo_Eigenval_Sum)*100
(PCAallo$values[2]/PCAallo_Eigenval_Sum)*100
(PCAallo$values[3]/PCAallo_Eigenval_Sum)*100
PCAallo_12 <-
ggplot(data = subset(fulldf, CHR == "Chromosome Z"), aes_string(x = "PCA_1", y = "PCA_2")) +
geom_star(aes(starshape = Population, fill = Species), alpha = .7, size = 2.15, starstroke = .15) +
facet_rep_grid(CHR ~. , scales = "free_x") +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#d9d9d9")) +
scale_starshape_manual(values = Shapes_2) +
geom_label_repel(data = subset(fulldf, CHR == "Chromosome Z"), aes(label = Labels),
family = "Optima", size = 3.8, fontface = "bold", max.overlaps = 100, nudge_x = .040, nudge_y = -.1,
point.padding = .6, segment.size = .3, colour = "black", fill = "#d9d9d9", alpha = .85,
arrow = arrow(angle = 30, length = unit(.10, "inches"),
ends = "last", type = "open")) +
geom_mark_ellipse(aes(filter = Species == "House", label = "House\nSparrow"), con.colour = "#1E90FF", colour = "#1E90FF",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "straight", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Spanish", label = "Spanish\nSparrow"), con.colour = "#ee0000", colour = "#ee0000",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
geom_mark_ellipse(aes(filter = Species == "Italian", label = "Italian\nSparrow"), con.colour = "#FFD700", colour = "#FFD700",
label.fill = "#d9d9d9", expand = unit(4, "mm"), con.border = "one", label.fontsize = 10.65,
con.type = "elbow", label.family = "Optima", con.cap = 0, label.hjust = .5, show.legend = FALSE) +
scale_x_continuous("PC 1 (8.76%)",
#breaks = c(0.99, 1, 1.01),
#labels = c("0.99", "1", "1.01"),
limits = c(-.17, .19),
expand = c(0, 0)) +
scale_y_continuous("PC 2 (4.19%)",
#breaks = c(-.08, -.04, 0.00),
#labels = c("-0.08", "-0.04", "0.00"),
limits = c(-.31, .35),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x = element_text(family = "Optima", size = 15, face = "bold", margin = margin(t = 18, r = 0, b = 0, l = 0)),
axis.title.y = element_text(family = "Optima", size = 15, face = "bold", margin = margin(t = 0, r = 18, b = 0, l = 0)),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 11, face = "bold"),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 11, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 14, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
# Isolates legend ~
MyLegendBlog <- get_legend(MyLegend_Plot)
# Gets final plot ~
PCA_Plot <- ggarrange(PCAauto_12, nrow = 1, legend.grob = MyLegendBlog)
# Isolates legend ~
MyLegendBlog <- get_legend(MyLegend_Plot)
# Gets final plot ~
PCA_Plot <- ggarrange(PCAauto_12, PCAallo_12, nrow = 2, legend.grob = MyLegendBlog)
# Saves plot ~
ggsave(PCA_Plot, file = "Y150239Genomics--PCA.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 11, height = 11, dpi = 600)
ggsave(PCA_Plot, file = "Y150239Genomics--PCA.jpeg",
limitsize = FALSE, scale = 1, width = 11, height = 11, dpi = 600)
### The BEGINNING ~~~~~
##
# ~ Plots Y150239Genomics--ngsAdmix | Written by Jose Samaniego & George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, scales, optparse, plyr, RColorBrewer, extrafont, gtable, grid, mdthemes, ggtext, glue, ggh4x)
# Creates colour palette ~
nb.cols <- 15
MyColours <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
# Loads the data ~
samples.auto <- read.table("Y150239Genomics--ngsAdmix.Autosomes.popfile", stringsAsFactors = FALSE, sep = "\t")
samples.allo <- read.table("Y150239Genomics--ngsAdmix.Allosome.popfile", stringsAsFactors = FALSE, sep = "\t")
# Reads the annotation file ~
ids <- read.table("AllSamples_bcftools.raw.vcf.Filtered.Allosome.NoKinship.NoTreeSparrow.MAFfiltered.Pruned.K2.labels", stringsAsFactors = FALSE, sep = "\t", header = FALSE)
# Adds column ids names ~
colnames(ids) <- c("Sample_ID")
# Expands ids by adding Population ~
ids$Population <- ifelse(grepl("FR0", ids$Sample_ID), "Sales",
ifelse(grepl("KAZ", ids$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", ids$Sample_ID), "Lesina",
ifelse(grepl("Crotone", ids$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", ids$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", ids$Sample_ID), "Y150239",
ifelse(grepl("PD22NLD0146F", ids$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", ids$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0077M", ids$Sample_ID), "Meerkerk",
ifelse(grepl("PDOM2022NLD0", ids$Sample_ID), "Utrecht", "Error"))))))))))
# Reorders Population ~
ids$Population <- factor(ids$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Meerkerk",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Y150239"))
# Expands PCA_Annot by adding Species ~
ids$Species <- ifelse(ids$Population %in% c("Utrecht", "Sales", "Garderen", "Meerkerk"), "House",
ifelse(ids$Population %in% c("Chokpak", "Lesina"), "Spanish",
ifelse(ids$Population %in% c("Guglionesi", "Crotone"), "Italian",
ifelse(ids$Population %in% c("Y150239"), "Y150239", "Error"))))
# Reorders Population ~
ids$Species <- factor(ids$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
"Y150239"))
# Recognises chromosomes ~
ids.auto <- ids
ids.allo <- ids
ids.auto$chrtype <- "Autosomes"
ids.allo$chrtype <- "Chromosome Z"
# Creates data frame ~
fulldf.auto <- data.frame()
fulldf.allo <- data.frame()
x.auto <- list(c(3, 2, 1, 4, 6, 5, 7),
c(4, 5, 1, 2, 6, 3),
c(4, 2, 5, 3, 1),
c(4, 3, 1, 2),
c(1, 3, 2),
c(1, 2))
x.allo <- list(c(5, 6, 3, 1, 4, 2, 7),
c(6, 2, 5, 4, 3, 1),
c(3, 4, 2, 5, 1),
c(3, 4, 2, 1),
c(3, 1, 2),
c(1, 2))
# Defines samples' IDs ~
sampleid = "Sample_ID"
# Loops over all Ks while adding labels and reordering clusters ~
for (j in 1:length(samples.auto[, 1])){
data <- read.table(samples.auto[j, 1])[, x.auto[[j]]]
for (i in 1:dim(data)[2]) {
temp <- data.frame(Ancestry = data[, i])
temp$K <- as.factor(rep(i, times = length(temp$Ancestry)))
temp[sampleid] <- as.factor(ids.auto[sampleid][, 1])
temp$K_Value <- as.factor(rep(paste("K = ", dim(data)[2], sep = ""), times = length(temp$Ancestry)))
temp <- merge(ids.auto, temp)
fulldf.auto <- rbind(fulldf.auto, temp)}}
for (j in 1:length(samples.allo[, 1])){
data <- read.table(samples.allo[j, 1])[, x.allo[[j]]]
for (i in 1:dim(data)[2]) {
temp <- data.frame(Ancestry = data[, i])
temp$K <- as.factor(rep(i, times = length(temp$Ancestry)))
temp[sampleid] <- as.factor(ids.allo[sampleid][, 1])
temp$K_Value <- as.factor(rep(paste("K = ", dim(data)[2], sep = ""), times = length(temp$Ancestry)))
temp <- merge(ids.allo, temp)
fulldf.allo <- rbind(fulldf.allo, temp)}}
fulldf <- rbind(fulldf.auto, fulldf.allo)
# Reorders chrtye ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Chromosome Z"))
# Defines the target to be plotted ~
target = "Population"
# Creates the plot ~
ngsAdmix <-
ggplot(fulldf, aes(x = Sample_ID, y = Ancestry, fill = K)) +
geom_bar(stat = "identity", width = .85, alpha = .70) +
facet_nested(chrtype + K_Value ~ Population, scales = "free_x", space = "free_x",
strip = strip_nested(background_x = list(element_rect(colour = "#000000", fill = "#FAFAFA", linewidth = .05)),
background_y = list(element_rect(colour = "#000000", fill = "#bdbdbd", linewidth = .05),
element_rect(colour = "#000000", fill = "#FAFAFA", linewidth = .05)), by_layer_y = TRUE)) +
scale_fill_manual(values = c("#ee0000", "#1E90FF", "#FFD700", "#88419d", "#9ecae1", "#c6dbef", "#fec44f")) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), breaks = NULL) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.minor.x = element_blank(),
panel.grid.major = element_blank(),
panel.spacing = unit(.3, "lines"),
plot.title = element_blank(),
legend.position = "none",
axis.title = element_blank(),
#axis.text.x.bottom = element_text(colour = "#000000", face = "bold", angle = 90, vjust = .5, hjust = .5),
axis.text.x.bottom = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
strip.text.x = element_text(family = "Optima", colour = "#000000", face = "bold", size = 14, angle = 90, margin = margin(.5, .1, .5, .1, "cm")),
strip.text.y = element_text(family = "Optima", colour = "#000000", face = "bold", size = 14, angle = 90, margin = margin(0, .1, 0, .1, "cm")))
# Saves the final plot ~
ggsave(ngsAdmix, file = "Y150239Genomics--ngsAdmix.pdf",
device = cairo_pdf, width = 20, height = 12, dpi = 600)
ggplot(fulldf, aes(x = Sample_ID, y = Ancestry, fill = K)) +
geom_bar(stat = "identity", width = .85, alpha = .70) +
facet_nested(chrtype + K_Value ~ Population, scales = "free_x", space = "free_x",
strip = strip_nested(background_x = list(element_rect(colour = "#000000", fill = "#FAFAFA", linewidth = .05)),
background_y = list(element_rect(colour = "#000000", fill = "#bdbdbd", linewidth = .05),
element_rect(colour = "#000000", fill = "#FAFAFA", linewidth = .05, size = 10)), by_layer_y = TRUE)) +
scale_fill_manual(values = c("#ee0000", "#1E90FF", "#FFD700", "#88419d", "#9ecae1", "#c6dbef", "#fec44f")) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), breaks = NULL) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.minor.x = element_blank(),
panel.grid.major = element_blank(),
panel.spacing = unit(.3, "lines"),
plot.title = element_blank(),
legend.position = "none",
axis.title = element_blank(),
#axis.text.x.bottom = element_text(colour = "#000000", face = "bold", angle = 90, vjust = .5, hjust = .5),
axis.text.x.bottom = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
strip.text.x = element_text(family = "Optima", colour = "#000000", face = "bold", size = 14, angle = 90, margin = margin(.5, .1, .5, .1, "cm")),
strip.text.y = element_text(family = "Optima", colour = "#000000", face = "bold", size = 14, angle = 90, margin = margin(0, .1, 0, .1, "cm")))
### The BEGINNING ~~~~~
##
# ~ Plots Y150239Genomics--ngsAdmix | Written by Jose Samaniego & George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, scales, optparse, plyr, RColorBrewer, extrafont, gtable, grid, mdthemes, ggtext, glue, ggh4x)
# Creates colour palette ~
nb.cols <- 15
MyColours <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
# Loads the data ~
samples.auto <- read.table("Y150239Genomics--ngsAdmix.Autosomes.popfile", stringsAsFactors = FALSE, sep = "\t")
samples.allo <- read.table("Y150239Genomics--ngsAdmix.Allosome.popfile", stringsAsFactors = FALSE, sep = "\t")
# Reads the annotation file ~
ids <- read.table("AllSamples_bcftools.raw.vcf.Filtered.Allosome.NoKinship.NoTreeSparrow.MAFfiltered.Pruned.K2.labels", stringsAsFactors = FALSE, sep = "\t", header = FALSE)
# Adds column ids names ~
colnames(ids) <- c("Sample_ID")
# Expands ids by adding Population ~
ids$Population <- ifelse(grepl("FR0", ids$Sample_ID), "Sales",
ifelse(grepl("KAZ", ids$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", ids$Sample_ID), "Lesina",
ifelse(grepl("Crotone", ids$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", ids$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", ids$Sample_ID), "Y150239",
ifelse(grepl("PD22NLD0146F", ids$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", ids$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0077M", ids$Sample_ID), "Meerkerk",
ifelse(grepl("PDOM2022NLD0", ids$Sample_ID), "Utrecht", "Error"))))))))))
# Reorders Population ~
ids$Population <- factor(ids$Population, ordered = T,
levels = c("Utrecht",
"Garderen",
"Meerkerk",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Y150239"))
# Expands PCA_Annot by adding Species ~
ids$Species <- ifelse(ids$Population %in% c("Utrecht", "Sales", "Garderen", "Meerkerk"), "House",
ifelse(ids$Population %in% c("Chokpak", "Lesina"), "Spanish",
ifelse(ids$Population %in% c("Guglionesi", "Crotone"), "Italian",
ifelse(ids$Population %in% c("Y150239"), "Y150239", "Error"))))
# Reorders Population ~
ids$Species <- factor(ids$Species, ordered = T,
levels = c("House",
"Italian",
"Spanish",
"Y150239"))
# Recognises chromosomes ~
ids.auto <- ids
ids.allo <- ids
ids.auto$chrtype <- "Autosomes"
ids.allo$chrtype <- "Chromosome Z"
# Creates data frame ~
fulldf.auto <- data.frame()
fulldf.allo <- data.frame()
x.auto <- list(c(3, 2, 1, 4, 6, 5, 7),
c(4, 5, 1, 2, 6, 3),
c(4, 2, 5, 3, 1),
c(4, 3, 1, 2),
c(1, 3, 2),
c(1, 2))
x.allo <- list(c(5, 6, 3, 1, 4, 2, 7),
c(6, 2, 5, 4, 3, 1),
c(3, 4, 2, 5, 1),
c(3, 4, 2, 1),
c(3, 1, 2),
c(1, 2))
# Defines samples' IDs ~
sampleid = "Sample_ID"
# Loops over all Ks while adding labels and reordering clusters ~
for (j in 1:length(samples.auto[, 1])){
data <- read.table(samples.auto[j, 1])[, x.auto[[j]]]
for (i in 1:dim(data)[2]) {
temp <- data.frame(Ancestry = data[, i])
temp$K <- as.factor(rep(i, times = length(temp$Ancestry)))
temp[sampleid] <- as.factor(ids.auto[sampleid][, 1])
temp$K_Value <- as.factor(rep(paste("K = ", dim(data)[2], sep = ""), times = length(temp$Ancestry)))
temp <- merge(ids.auto, temp)
fulldf.auto <- rbind(fulldf.auto, temp)}}
for (j in 1:length(samples.allo[, 1])){
data <- read.table(samples.allo[j, 1])[, x.allo[[j]]]
for (i in 1:dim(data)[2]) {
temp <- data.frame(Ancestry = data[, i])
temp$K <- as.factor(rep(i, times = length(temp$Ancestry)))
temp[sampleid] <- as.factor(ids.allo[sampleid][, 1])
temp$K_Value <- as.factor(rep(paste("K = ", dim(data)[2], sep = ""), times = length(temp$Ancestry)))
temp <- merge(ids.allo, temp)
fulldf.allo <- rbind(fulldf.allo, temp)}}
fulldf <- rbind(fulldf.auto, fulldf.allo)
# Reorders chrtye ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Chromosome Z"))
# Defines the target to be plotted ~
target = "Population"
# Creates the plot ~
ngsAdmix <-
ggplot(fulldf, aes(x = Sample_ID, y = Ancestry, fill = K)) +
geom_bar(stat = "identity", width = .85, alpha = .70) +
facet_nested(chrtype + K_Value ~ Population, scales = "free_x", space = "free_x",
strip = strip_nested(background_x = list(element_rect(colour = "#000000", fill = "#FAFAFA", linewidth = .05)),
background_y = list(element_rect(colour = "#000000", fill = "#bdbdbd", linewidth = .05),
element_rect(colour = "#000000", fill = "#FAFAFA", linewidth = .05)), by_layer_y = TRUE)) +
scale_fill_manual(values = c("#ee0000", "#1E90FF", "#FFD700", "#88419d", "#9ecae1", "#c6dbef", "#fec44f")) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), breaks = NULL) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.minor.x = element_blank(),
panel.grid.major = element_blank(),
panel.spacing = unit(.3, "lines"),
plot.title = element_blank(),
legend.position = "none",
axis.title = element_blank(),
#axis.text.x.bottom = element_text(colour = "#000000", face = "bold", angle = 90, vjust = .5, hjust = .5),
axis.text.x.bottom = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
strip.text.x = element_text(family = "Optima", colour = "#000000", face = "bold", size = 14, angle = 90, margin = margin(.5, .1, .5, .1, "cm")),
strip.text.y = element_text(family = "Optima", colour = "#000000", face = "bold", size = 14, angle = 90, margin = margin(0, .1, 0, .1, "cm")))
# Adds grob ~
ngsAdmix_G <- ggplotGrob(ngsAdmix)
ngsAdmix_G <- gtable_add_rows(ngsAdmix_G, unit(1.25, "cm"), pos = 5)
# Adds top strips ~
ngsAdmix_G <- gtable_add_grob(ngsAdmix_G, list(rectGrob(gp = gpar(col = "#000000", fill = "#1E90FF", alpha = .7, size = .75, lwd = .25)),
textGrob("House Sparrow", gp = gpar(cex = 1.5, fontface = 'bold', fontfamily = "Optima", col = "black"))),
t = 6, l = 4, b = 6, r = 20, name = c("a", "b"))
ngsAdmix_G <- gtable_add_grob(ngsAdmix_G, list(rectGrob(gp = gpar(col = "#000000", fill = "#FFD700", alpha = .7, size = .5, lwd = .25)),
textGrob("Italian Sparrow", gp = gpar(cex = 1.5, fontface = 'bold', fontfamily = "Optima", col = "black"))),
t = 6, l = 22, b = 6, r = 28, name = c("a", "b"))
ngsAdmix_G <- gtable_add_grob(ngsAdmix_G, list(rectGrob(gp = gpar(col = "#000000", fill = "#ee0000", alpha = .7, size = .75, lwd = .25)),
textGrob("Spanish Sparrow", gp = gpar(cex = 1.5, fontface = 'bold', fontfamily = "Optima", col = "black"))),
t = 6, l = 30, b = 6, r = 36, name = c("a", "b"))
# Controls separation ~
ngsAdmix_G <- gtable_add_rows(ngsAdmix_G, unit(2 / 10, "line"), 6)
# Creates the final plot ~
grid.newpage()
grid.draw(ngsAdmix_G)
# Saves the final plot ~
ggsave(ngsAdmix_G, file = "Y150239Genomics--ngsAdmix.pdf",
device = cairo_pdf, width = 20, height = 12, scale = 1, dpi = 600)
ggsave(ngsAdmix_G, file = "Y150239Genomics--ngsAdmix.png",
width = 20, height = 12, scale = 1, dpi = 600)
#
##
### The END ~~~~~
#c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20),
#c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19),
#c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),
#c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17),
#c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16),
#c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),
#c(1,2,3,4,5,6,7,8,9,10,11,12,13,14),
#c(1,2,3,4,5,6,7,8,9,10,11,12,13),
#c(1,2,3,4,5,6,7,8,9,10,11,12),
#c(1,2,3,4,5,6,7,8,9,10,11),
#c(1,2,3,4,5,6,7,8,9,10),
#c(1,2,3,4,5,6,7,8,9),
#c(1,2,3,4,5,6,7,8),
#c(1,2,3,4,5,6,7),
#c(1,2,3,4,5,6),
#c(1,2,3,4,5),
#c(1,2,3,4),
#c(1,2,3),
#c(1,2))
