par <- matrix(ncol = 1)}
lgr$debug("Summary", n_files = n_files, n_ld = n_ld, n_groups = n_groups, n_plots = n_plots)
lgr$debug("Parameters layout", rows_par = nrow(par), cols_par = ncol(par))
plot_height <- opt$plot_size[1] * nrow(par)
plot_width <- opt$plot_size[2] * ncol(par)
### Remove legend if plotting just a single variable
if(n_groups < 2 || opt$plot_no_legend) {
plot <- plot + theme(legend.position="none")
} else {
plot_width = plot_width + 1}
# Saves plot ~
ggsave(plot = plot, file = "Y150239Genomics--LD_Median.pdf",
device = cairo_pdf, scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
opt$plot_wrap_formula = "CHRType ~ PruningState"
# Expands fit_data & ld_data by adding a CHRType column ~
fit_data$CHRType <- str_extract(fit_data$File, "(Allosome|Autosomes)")
ld_data$CHRType <- str_extract(ld_data$File, "(Allosome|Autosomes)")
# Expands fit_data & ld_data by adding a PruningState column ~
fit_data$PruningState <- ifelse(grepl("Pruned", fit_data$File), "Pruned", "Not Pruned")
ld_data$PruningState <- ifelse(grepl("Pruned", ld_data$File), "Pruned", "Not Pruned")
# Reorders CHRType ~
fit_data$CHRType <- factor(fit_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Allosome"))
ld_data$CHRType <- factor(ld_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Allosome"))
# Reorders PruningState ~
fit_data$PruningState <- factor(fit_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
ld_data$PruningState <- factor(ld_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
### Create base plot
lgr$info("Plotting data...")
plot <- ggplot() +
theme(panel.spacing = unit(1,"lines")) +
coord_cartesian(xlim = c(0, opt$plot_x_lim), ylim = opt$plot_y_lim) +
scale_colour_hue() +
ylab("Linkage Disequilibrium") +
xlab("Distance")
if(!is.null(opt$plot_wrap_formula)) {
if(opt$plot_wrap) {
plot <- plot + facet_rep_wrap(opt$plot_wrap_formula, ncol = opt$plot_wrap, scales = opt$plot_axis_scales)
} else {
plot <- plot + facet_rep_grid(opt$plot_wrap_formula, scales = opt$plot_axis_scales)}}
# Add LD decay fit CI ~
if(opt$fit_boot > 0) {
grp <- NULL
if(n_files == n_groups)
grp <- opt$plot_group
plot <- plot + geom_ribbon(data = fit_data, aes(x = dist, ymin = ci_l, ymax = ci_u, group = .data[[opt$plot_group]], fill = .data[[grp]]),
alpha = .2)}
# Add data points
if(opt$plot_data){
# Check format
if(ncol(ld_data) < 4)
stop(lgr$error("Invalid `ld_data` format."))
# Bins data ~
if(opt$plot_bin_size > 1) {
breaks <- seq(0, max(ld_data$dist) + opt$plot_bin_size, opt$plot_bin_size)
ld_data$dist <- cut(ld_data$dist, breaks, head(breaks, -1))
ld_data$dist <- as.numeric(levels(ld_data$dist))[ld_data$dist]
if(opt$bin_quant > 0) {
ld_data <- aggregate(value ~ ., data = ld_data, quantile, probs = opt$bin_quant / 100)
} else {
ld_data <- aggregate(value ~ ., data = ld_data, mean)}}
lgr$debug("Plot data", data = toJSON(head(ld_data, n = 10)))
# Adds points ~
plot <- plot +
geom_point(data = ld_data, aes(x = dist, y = value), colour = "#82526C", size = .05, alpha = .3)}
# Adds LD decay best fit ~
if(length(opt$ld) > 0) {
# Selects variable fields ~
header <- names(which(lapply(lapply(fit_data, unique), length) > 1))
# Excludes non-relevant fields ~
grp <- header[!header %in% unique(c(as.character(opt$plot_wrap_formula), opt$plot_group, "dist", "value", "File", "ci_l", "ci_u"))]
lgr$debug("LD decay best fit", groups = grp, plot_groups = opt$plot_group)
# Defines line type ~
if(length(grp) == 0) grp <- opt$plot_group
if(length(grp) > 1) stop(lgr$error("invalid number of linetype groups!"))
plot <-
plot +
geom_line(data = fit_data, aes(x = dist, y = value), colour = "#82526C", linetype = 1)
# If plotting data, add a thin black line to help see the line ~
if(opt$plot_data)
plot <- plot +
geom_line(data = fit_data, aes_string(x = "dist", y = "value"), linetype = 1, colour = "#82526C", linewidth = .1, alpha = 1) +
scale_x_continuous("Genomic Distance (Kb)",
breaks = c(2.5e+04, 5e+04, 7.5e+04),
labels = c("25", "50", "75"),
limits = c(0, 100000),
expand = c(0, 0)) +
scale_y_continuous("Linkage Disequilibrium (r2)",
breaks = c(0.05, 0.1, 0.15),
labels = c("0.05", "0.10", "0.15"),
limits = c(0, .2),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title.x = element_text(size = 13, face = "bold", color = "#000000", margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 13, face = "bold", color = "#000000", margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.text = element_text(color = "#000000", size = 8, face = "bold"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
strip.text = element_text(colour = "#000000", size = 11, face = "bold", family = "Optima"),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_blank(),
legend.spacing.y = unit(.4, "cm"),
legend.key.height = unit(.45, "cm"),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 5, b = -20, r = 0, l = 30)) +
guides(colour = guide_legend(title = "LD State:", title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10),
override.aes = list(size = 3, alpha = .9, starstroke = .15)))
# If plotting, apart from linetypes, also shapes (for B/W or color-blind printing) ~
if(opt$plot_shape) {
smooth <- seq(1, opt$plot_x_lim, length = opt$plot_line_smooth)[seq(2, opt$plot_line_smooth,length = 5)]
sample_fit_data <- subset(fit_data, dist %in% smooth)
plot <-
plot +
geom_point(data = sample_fit_data, aes(x = dist, y = value, colour = .data[[opt$plot_group]], shape = .data[[opt$plot_group]]))}}
# Expands fit_data & ld_data by adding a CHRType column ~
fit_data$CHRType <- str_extract(fit_data$File, "(Allosome|Autosomes)")
ld_data$CHRType <- str_extract(ld_data$File, "(Allosome|Autosomes)")
# Expands fit_data & ld_data by adding a PruningState column ~
fit_data$PruningState <- ifelse(grepl("Pruned", fit_data$File), "Pruned", "Not Pruned")
ld_data$PruningState <- ifelse(grepl("Pruned", ld_data$File), "Pruned", "Not Pruned")
# Reorders CHRType ~
fit_data$CHRType <- factor(fit_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Allosome"))
ld_data$CHRType <- factor(ld_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Allosome"))
# Reorders PruningState ~
fit_data$PruningState <- factor(fit_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
ld_data$PruningState <- factor(ld_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
### Create base plot
lgr$info("Plotting data...")
plot <- ggplot() +
theme(panel.spacing = unit(1,"lines")) +
coord_cartesian(xlim = c(0, opt$plot_x_lim), ylim = opt$plot_y_lim) +
scale_colour_hue() +
ylab("Linkage Disequilibrium") +
xlab("Distance")
if(!is.null(opt$plot_wrap_formula)) {
if(opt$plot_wrap) {
plot <- plot + facet_rep_wrap(opt$plot_wrap_formula, ncol = opt$plot_wrap, scales = opt$plot_axis_scales)
} else {
plot <- plot + facet_rep_grid(opt$plot_wrap_formula, scales = opt$plot_axis_scales)}}
# Add LD decay fit CI ~
if(opt$fit_boot > 0) {
grp <- NULL
if(n_files == n_groups)
grp <- opt$plot_group
plot <- plot + geom_ribbon(data = fit_data, aes(x = dist, ymin = ci_l, ymax = ci_u, group = .data[[opt$plot_group]], fill = .data[[grp]]),
alpha = .2)}
# Add data points
if(opt$plot_data){
# Check format
if(ncol(ld_data) < 4)
stop(lgr$error("Invalid `ld_data` format."))
# Bins data ~
if(opt$plot_bin_size > 1) {
breaks <- seq(0, max(ld_data$dist) + opt$plot_bin_size, opt$plot_bin_size)
ld_data$dist <- cut(ld_data$dist, breaks, head(breaks, -1))
ld_data$dist <- as.numeric(levels(ld_data$dist))[ld_data$dist]
if(opt$bin_quant > 0) {
ld_data <- aggregate(value ~ ., data = ld_data, quantile, probs = opt$bin_quant / 100)
} else {
ld_data <- aggregate(value ~ ., data = ld_data, mean)}}
lgr$debug("Plot data", data = toJSON(head(ld_data, n = 10)))
# Adds points ~
plot <- plot +
geom_point(data = ld_data, aes(x = dist, y = value), colour = "#82526C", size = .05, alpha = .3)}
# Adds LD decay best fit ~
if(length(opt$ld) > 0) {
# Selects variable fields ~
header <- names(which(lapply(lapply(fit_data, unique), length) > 1))
# Excludes non-relevant fields ~
grp <- header[!header %in% unique(c(as.character(opt$plot_wrap_formula), opt$plot_group, "dist", "value", "File", "ci_l", "ci_u"))]
lgr$debug("LD decay best fit", groups = grp, plot_groups = opt$plot_group)
# Defines line type ~
#if(length(grp) == 0) grp <- opt$plot_group
#if(length(grp) > 1) stop(lgr$error("invalid number of linetype groups!"))
plot <-
plot +
geom_line(data = fit_data, aes(x = dist, y = value), colour = "#82526C", linetype = 1)
# If plotting data, add a thin black line to help see the line ~
if(opt$plot_data)
plot <- plot +
geom_line(data = fit_data, aes_string(x = "dist", y = "value"), linetype = 1, colour = "#82526C", linewidth = .1, alpha = 1) +
scale_x_continuous("Genomic Distance (Kb)",
breaks = c(2.5e+04, 5e+04, 7.5e+04),
labels = c("25", "50", "75"),
limits = c(0, 100000),
expand = c(0, 0)) +
scale_y_continuous("Linkage Disequilibrium (r2)",
breaks = c(0.05, 0.1, 0.15),
labels = c("0.05", "0.10", "0.15"),
limits = c(0, .2),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title.x = element_text(size = 13, face = "bold", color = "#000000", margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 13, face = "bold", color = "#000000", margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.text = element_text(color = "#000000", size = 8, face = "bold"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
strip.text = element_text(colour = "#000000", size = 11, face = "bold", family = "Optima"),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_blank(),
legend.spacing.y = unit(.4, "cm"),
legend.key.height = unit(.45, "cm"),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 5, b = -20, r = 0, l = 30)) +
guides(colour = guide_legend(title = "LD State:", title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10),
override.aes = list(size = 3, alpha = .9, starstroke = .15)))
# If plotting, apart from linetypes, also shapes (for B/W or color-blind printing) ~
if(opt$plot_shape) {
smooth <- seq(1, opt$plot_x_lim, length = opt$plot_line_smooth)[seq(2, opt$plot_line_smooth,length = 5)]
sample_fit_data <- subset(fit_data, dist %in% smooth)
plot <-
plot +
geom_point(data = sample_fit_data, aes(x = dist, y = value, colour = .data[[opt$plot_group]], shape = .data[[opt$plot_group]]))}}
### Set plot size ~
n_plots <- length(unique(ggplot_build(plot)$data[[1]]$PANEL))
if(!is.null(opt$plot_wrap_formula)) {
par <- dcast(fit_data, opt$plot_wrap_formula, length, fill = 0)
rownames(par) <- par[, 1]
par <- par[,-1, drop = FALSE]
} else {
par <- matrix(ncol = 1)}
lgr$debug("Summary", n_files = n_files, n_ld = n_ld, n_groups = n_groups, n_plots = n_plots)
lgr$debug("Parameters layout", rows_par = nrow(par), cols_par = ncol(par))
plot_height <- opt$plot_size[1] * nrow(par)
plot_width <- opt$plot_size[2] * ncol(par)
### Remove legend if plotting just a single variable
if(n_groups < 2 || opt$plot_no_legend) {
plot <- plot + theme(legend.position="none")
} else {
plot_width = plot_width + 1}
# Saves plot ~
ggsave(plot = plot, file = "Y150239Genomics--LD_Median_B.pdf",
device = cairo_pdf, scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
# Expands fit_data & ld_data by adding a CHRType column ~
fit_data$CHRType <- str_extract(fit_data$File, "(Allosome|Autosomes)")
ld_data$CHRType <- str_extract(ld_data$File, "(Allosome|Autosomes)")
# Expands fit_data & ld_data by adding a PruningState column ~
fit_data$PruningState <- ifelse(grepl("Pruned", fit_data$File), "Pruned", "Not Pruned")
ld_data$PruningState <- ifelse(grepl("Pruned", ld_data$File), "Pruned", "Not Pruned")
# Reorders CHRType ~
fit_data$CHRType <- factor(fit_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Allosome"))
ld_data$CHRType <- factor(ld_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Allosome"))
# Reorders PruningState ~
fit_data$PruningState <- factor(fit_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
ld_data$PruningState <- factor(ld_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
### Create base plot
lgr$info("Plotting data...")
plot <- ggplot() +
theme(panel.spacing = unit(1,"lines")) +
coord_cartesian(xlim = c(0, opt$plot_x_lim), ylim = opt$plot_y_lim) +
scale_colour_hue() +
ylab("Linkage Disequilibrium") +
xlab("Distance")
if(!is.null(opt$plot_wrap_formula)) {
if(opt$plot_wrap) {
plot <- plot + facet_rep_wrap(opt$plot_wrap_formula, ncol = opt$plot_wrap, scales = opt$plot_axis_scales)
} else {
plot <- plot + facet_rep_grid(opt$plot_wrap_formula, scales = opt$plot_axis_scales)}}
# Add LD decay fit CI ~
if(opt$fit_boot > 0) {
grp <- NULL
if(n_files == n_groups)
grp <- opt$plot_group
plot <- plot + geom_ribbon(data = fit_data, aes(x = dist, ymin = ci_l, ymax = ci_u, group = .data[[opt$plot_group]], fill = .data[[grp]]),
alpha = .2)}
# Add data points
if(opt$plot_data){
# Check format
if(ncol(ld_data) < 4)
stop(lgr$error("Invalid `ld_data` format."))
# Bins data ~
if(opt$plot_bin_size > 1) {
breaks <- seq(0, max(ld_data$dist) + opt$plot_bin_size, opt$plot_bin_size)
ld_data$dist <- cut(ld_data$dist, breaks, head(breaks, -1))
ld_data$dist <- as.numeric(levels(ld_data$dist))[ld_data$dist]
if(opt$bin_quant > 0) {
ld_data <- aggregate(value ~ ., data = ld_data, quantile, probs = opt$bin_quant / 100)
} else {
ld_data <- aggregate(value ~ ., data = ld_data, mean)}}
lgr$debug("Plot data", data = toJSON(head(ld_data, n = 10)))
# Adds points ~
plot <- plot +
geom_point(data = ld_data, aes(x = dist, y = value), colour = "#82526C", size = .05, alpha = .3)}
# Adds LD decay best fit ~
if(length(opt$ld) > 0) {
# Selects variable fields ~
header <- names(which(lapply(lapply(fit_data, unique), length) > 1))
# Excludes non-relevant fields ~
grp <- header[!header %in% unique(c(as.character(opt$plot_wrap_formula), opt$plot_group, "dist", "value", "File", "ci_l", "ci_u"))]
lgr$debug("LD decay best fit", groups = grp, plot_groups = opt$plot_group)
# Defines line type ~
#if(length(grp) == 0) grp <- opt$plot_group
#if(length(grp) > 1) stop(lgr$error("invalid number of linetype groups!"))
plot <-
plot +
geom_line(data = fit_data, aes(x = dist, y = value), colour = "#82526C", linetype = 1)
# If plotting data, add a thin black line to help see the line ~
if(opt$plot_data)
plot <- plot +
geom_line(data = fit_data, aes_string(x = "dist", y = "value"), linetype = 1, colour = "#82526C", linewidth = .1, alpha = 1) +
scale_x_continuous("Genomic Distance (Kb)",
breaks = c(2.5e+04, 5e+04, 7.5e+04),
labels = c("25", "50", "75"),
limits = c(0, 100000),
expand = c(0, 0)) +
scale_y_continuous("Linkage Disequilibrium (r2)",
breaks = c(0.05, 0.1, 0.15),
labels = c("0.05", "0.10", "0.15"),
limits = c(0, .2),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#E5E7E9", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 13, face = "bold", color = "#000000", margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 13, face = "bold", color = "#000000", margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.text = element_text(color = "#000000", size = 8, face = "bold"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
strip.text = element_text(colour = "#000000", size = 11, face = "bold", family = "Optima"),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_blank(),
legend.spacing.y = unit(.4, "cm"),
legend.key.height = unit(.45, "cm"),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 5, b = -20, r = 0, l = 30)) +
guides(colour = guide_legend(title = "LD State:", title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10),
override.aes = list(size = 3, alpha = .9, starstroke = .15)))
# If plotting, apart from linetypes, also shapes (for B/W or color-blind printing) ~
if(opt$plot_shape) {
smooth <- seq(1, opt$plot_x_lim, length = opt$plot_line_smooth)[seq(2, opt$plot_line_smooth,length = 5)]
sample_fit_data <- subset(fit_data, dist %in% smooth)
plot <-
plot +
geom_point(data = sample_fit_data, aes(x = dist, y = value, colour = .data[[opt$plot_group]], shape = .data[[opt$plot_group]]))}}
### Set plot size ~
n_plots <- length(unique(ggplot_build(plot)$data[[1]]$PANEL))
if(!is.null(opt$plot_wrap_formula)) {
par <- dcast(fit_data, opt$plot_wrap_formula, length, fill = 0)
rownames(par) <- par[, 1]
par <- par[,-1, drop = FALSE]
} else {
par <- matrix(ncol = 1)}
lgr$debug("Summary", n_files = n_files, n_ld = n_ld, n_groups = n_groups, n_plots = n_plots)
lgr$debug("Parameters layout", rows_par = nrow(par), cols_par = ncol(par))
plot_height <- opt$plot_size[1] * nrow(par)
plot_width <- opt$plot_size[2] * ncol(par)
### Remove legend if plotting just a single variable
if(n_groups < 2 || opt$plot_no_legend) {
plot <- plot + theme(legend.position="none")
} else {
plot_width = plot_width + 1}
# Saves plot ~
ggsave(plot = plot, file = "Y150239Genomics--LD_Median_B.pdf",
device = cairo_pdf, scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
# Expands fit_data & ld_data by adding a CHRType column ~
fit_data$CHRType <- str_extract(fit_data$File, "(Allosome|Autosomes)")
ld_data$CHRType <- str_extract(ld_data$File, "(Allosome|Autosomes)")
# Expands fit_data & ld_data by adding a PruningState column ~
fit_data$PruningState <- ifelse(grepl("Pruned", fit_data$File), "Pruned", "Not Pruned")
ld_data$PruningState <- ifelse(grepl("Pruned", ld_data$File), "Pruned", "Not Pruned")
# Reorders CHRType ~
fit_data$CHRType <- factor(fit_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Allosome"))
ld_data$CHRType <- factor(ld_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Allosome"))
# Reorders PruningState ~
fit_data$PruningState <- factor(fit_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
ld_data$PruningState <- factor(ld_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
### Create base plot
lgr$info("Plotting data...")
plot <- ggplot() +
theme(panel.spacing = unit(1,"lines")) +
coord_cartesian(xlim = c(0, opt$plot_x_lim), ylim = opt$plot_y_lim) +
scale_colour_hue() +
ylab("Linkage Disequilibrium") +
xlab("Distance")
if(!is.null(opt$plot_wrap_formula)) {
if(opt$plot_wrap) {
plot <- plot + facet_rep_wrap(opt$plot_wrap_formula, ncol = opt$plot_wrap, scales = opt$plot_axis_scales)
} else {
plot <- plot + facet_rep_grid(opt$plot_wrap_formula, scales = opt$plot_axis_scales)}}
# Add LD decay fit CI ~
if(opt$fit_boot > 0) {
grp <- NULL
if(n_files == n_groups)
grp <- opt$plot_group
plot <- plot + geom_ribbon(data = fit_data, aes(x = dist, ymin = ci_l, ymax = ci_u, group = .data[[opt$plot_group]], fill = .data[[grp]]),
alpha = .2)}
# Add data points
if(opt$plot_data){
# Check format
if(ncol(ld_data) < 4)
stop(lgr$error("Invalid `ld_data` format."))
# Bins data ~
if(opt$plot_bin_size > 1) {
breaks <- seq(0, max(ld_data$dist) + opt$plot_bin_size, opt$plot_bin_size)
ld_data$dist <- cut(ld_data$dist, breaks, head(breaks, -1))
ld_data$dist <- as.numeric(levels(ld_data$dist))[ld_data$dist]
if(opt$bin_quant > 0) {
ld_data <- aggregate(value ~ ., data = ld_data, quantile, probs = opt$bin_quant / 100)
} else {
ld_data <- aggregate(value ~ ., data = ld_data, mean)}}
lgr$debug("Plot data", data = toJSON(head(ld_data, n = 10)))
# Adds points ~
plot <- plot +
geom_point(data = ld_data, aes(x = dist, y = value), colour = "#82526C", size = .05, alpha = .3)}
# Adds LD decay best fit ~
if(length(opt$ld) > 0) {
# Selects variable fields ~
header <- names(which(lapply(lapply(fit_data, unique), length) > 1))
# Excludes non-relevant fields ~
grp <- header[!header %in% unique(c(as.character(opt$plot_wrap_formula), opt$plot_group, "dist", "value", "File", "ci_l", "ci_u"))]
lgr$debug("LD decay best fit", groups = grp, plot_groups = opt$plot_group)
# Defines line type ~
#if(length(grp) == 0) grp <- opt$plot_group
#if(length(grp) > 1) stop(lgr$error("invalid number of linetype groups!"))
plot <-
plot +
geom_line(data = fit_data, aes(x = dist, y = value), colour = "#82526C", linetype = 1)
# If plotting data, add a thin black line to help see the line ~
if(opt$plot_data)
plot <- plot +
geom_line(data = fit_data, aes_string(x = "dist", y = "value"), linetype = 1, colour = "#82526C", linewidth = .1, alpha = 1) +
scale_x_continuous("Genomic Distance (Kb)",
breaks = c(2.5e+04, 5e+04, 7.5e+04),
labels = c("25", "50", "75"),
limits = c(0, 100000),
expand = c(0, 0)) +
scale_y_continuous("Linkage Disequilibrium (r2)",
breaks = c(0.05, 0.1, 0.15),
labels = c("0.05", "0.10", "0.15"),
limits = c(0, .2),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#E5E7E9", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 13, face = "bold", color = "#000000", margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 13, face = "bold", color = "#000000", margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.text = element_text(color = "#000000", size = 8, face = "bold"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
strip.text = element_text(colour = "#000000", size = 11, face = "bold", family = "Optima"),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_blank(),
legend.spacing.y = unit(.4, "cm"),
legend.key.height = unit(.45, "cm"),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 5, b = -20, r = 0, l = 30)) +
guides(colour = guide_legend(title = "LD State:", title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10),
override.aes = list(size = 3, alpha = .9, starstroke = .15)))
# If plotting, apart from linetypes, also shapes (for B/W or color-blind printing) ~
if(opt$plot_shape) {
smooth <- seq(1, opt$plot_x_lim, length = opt$plot_line_smooth)[seq(2, opt$plot_line_smooth,length = 5)]
sample_fit_data <- subset(fit_data, dist %in% smooth)
plot <-
plot +
geom_point(data = sample_fit_data, aes(x = dist, y = value, colour = .data[[opt$plot_group]], shape = .data[[opt$plot_group]]))}}
### Set plot size ~
n_plots <- length(unique(ggplot_build(plot)$data[[1]]$PANEL))
if(!is.null(opt$plot_wrap_formula)) {
par <- dcast(fit_data, opt$plot_wrap_formula, length, fill = 0)
rownames(par) <- par[, 1]
par <- par[,-1, drop = FALSE]
} else {
par <- matrix(ncol = 1)}
lgr$debug("Summary", n_files = n_files, n_ld = n_ld, n_groups = n_groups, n_plots = n_plots)
lgr$debug("Parameters layout", rows_par = nrow(par), cols_par = ncol(par))
plot_height <- opt$plot_size[1] * nrow(par)
plot_width <- opt$plot_size[2] * ncol(par)
### Remove legend if plotting just a single variable
if(n_groups < 2 || opt$plot_no_legend) {
plot <- plot + theme(legend.position="none")
} else {
plot_width = plot_width + 1}
# Saves plot ~
ggsave(plot = plot, file = "Y150239Genomics--LD_Median.pdf",
device = cairo_pdf, scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
ggsave(plot = plot, file = "Y150239Genomics--LD_Median.jpeg",
scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
ggsave(plot = plot, file = "Y150239Genomics--LD_Median.png",
scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
