legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
ggsave(Y150239Genomics_Stat, file = "Y150239Genomics--Stats_Article.jpeg",
width = 12, height = 18, scale = 1, dpi = 600)
### The BEGINNING ~~~~~
##
# ~ Plots Y1502239Genomics--Stats | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
library(lemon)
# Loads datasets ~
Stats <- read.table("Y150239Genomics--Stats.txt", sep = "\t", header = TRUE,
stringsAsFactors = FALSE)
Adaptors <- read.table("Y150239Genomics--Stats_Adaptors.txt", sep = "\t", header = FALSE,
stringsAsFactors = FALSE); colnames(Adaptors) <- c("Sample_ID", "reads_adaptors")
# Combines DFs ~
fulldf <- merge(Stats, Adaptors, by = "Sample_ID")
# Gets total_reads ~
fulldf$total_reads <-
fulldf$seq_reads_pairs * 2
# Gets percentages ~
fulldf$percentage_retained_reads <-
fulldf$seq_retained_reads * 100 / fulldf$total_reads
fulldf$reads_adaptors <-
fulldf$reads_adaptors * 100 / fulldf$total_reads
# Fixes percentages ~
fulldf$hits_raw_frac <- fulldf$hits_raw_frac * 100
fulldf$hits_clonality <- fulldf$hits_clonality  * 100
fulldf$hits_unique_frac <- fulldf$hits_unique_frac * 100
# Expands PCA_Annot by adding Population ~
fulldf$Population <- ifelse(grepl("FR0", fulldf$Sample_ID), "Sales",
ifelse(grepl("KAZ", fulldf$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", fulldf$Sample_ID), "Lesina",
ifelse(grepl("Crotone", fulldf$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", fulldf$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", fulldf$Sample_ID), "Y150239",
ifelse(grepl("PD22NLD0146F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0077M", fulldf$Sample_ID), "Meerkerk",
ifelse(grepl("PDOM2022NLD0", fulldf$Sample_ID), "Utrecht",
ifelse(grepl("TreeSparrow", fulldf$Sample_ID), "Tree Sparrow", "Error")))))))))))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Meerkerk",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Y150239",
"Tree Sparrow"))
# Cleans DF ~
fulldf <- fulldf %>%
select(Population, total_reads, reads_adaptors, percentage_retained_reads,
hits_raw_frac, hits_clonality, hits_unique_frac, hits_coverage)
# Converts DF from wide into long ~
fulldfUp <- gather(fulldf, Stat, Value, "total_reads", "reads_adaptors", "percentage_retained_reads",
"hits_raw_frac", "hits_clonality", "hits_unique_frac", "hits_coverage")
# Reorders Stat ~
fulldfUp$Stat <- factor(fulldfUp$Stat, ordered = T,
levels = c("hits_coverage",
"hits_unique_frac",
"hits_clonality",
"hits_raw_frac",
"percentage_retained_reads",
"reads_adaptors",
"total_reads"))
fulldfUp %>% filter(Stat == "hits_coverage") %>%
summarise(mean(Value))
# Corrects facet labels ~
ylabels <- c("total_reads" = "# of Reads",
"reads_adaptors" = "% of Reads With Adaptors",
"percentage_retained_reads" = "% of Reads Retained",
"hits_raw_frac" = "% of Mapped Reads",
"hits_clonality" = "% of Clonality",
"hits_unique_frac" = "% of Uniquely Mapped Reads",
"hits_coverage" = "Mean Depth")
# Custom y-axis limits ~
limits_fun <- function(x){
limitVal <- max(x)
print(x)
if (limitVal < 60){
c(0, 60)}
else if (limitVal < 100){
c(90, 100)}
else {
c(70000000, 227746600)}}
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- min(y)
print(y)
if (caseVal < 100 & caseVal > 50){
seq(20, 60, by = 10)}
else if (caseVal < 100){
seq(92, 100, by = 2)}}
# Custom y-axis labels ~
plot_index_labels <- 0
labels_fun <- function(z) {
plot_index_labels <<- plot_index_labels + 1L
switch(plot_index_labels,
scales::label_number(accuracy = 1, suffix = "X")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_number(accuracy = 1, scale = 1/1000000, big.mark = "", suffix = "M")(z))}
# Creates the panel ~
Y150239Genomics_Stat <-
ggplot() +
geom_boxplot(data = fulldfUp, aes(x = Population, y = Value),
outlier.shape = NA, width = .5, lwd = .25, colour = "#000000", fill = "#C19EBE", alpha = .7) +
facet_rep_grid(Stat ~. , scales = "free", labeller = labeller(Stat = ylabels)) +
scale_y_continuous(#limits = limits_fun,
#breaks = breaks_fun,
labels = labels_fun) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major = element_line(color = "#E5E7E9", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.spacing.y = unit(1, "cm"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.title = element_blank(),
axis.text.x = element_text(family = "Optima", colour = "#000000", size = 10, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 8, face = "bold"),
axis.ticks.x = element_line(color = "#000000", linewidth = .3),
axis.ticks.y = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 9, face = "bold"),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
# Saves the panel ~
ggsave(Y150239Genomics_Stat, file = "Y150239Genomics--Stats_Article.pdf",
device = cairo_pdf, width = 12, height = 17, scale = 1, dpi = 600)
### The BEGINNING ~~~~~
##
# ~ Plots Y1502239Genomics--Stats | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
library(lemon)
# Loads datasets ~
Stats <- read.table("Y150239Genomics--Stats.txt", sep = "\t", header = TRUE,
stringsAsFactors = FALSE)
Adaptors <- read.table("Y150239Genomics--Stats_Adaptors.txt", sep = "\t", header = FALSE,
stringsAsFactors = FALSE); colnames(Adaptors) <- c("Sample_ID", "reads_adaptors")
# Combines DFs ~
fulldf <- merge(Stats, Adaptors, by = "Sample_ID")
# Gets total_reads ~
fulldf$total_reads <-
fulldf$seq_reads_pairs * 2
# Gets percentages ~
fulldf$percentage_retained_reads <-
fulldf$seq_retained_reads * 100 / fulldf$total_reads
fulldf$reads_adaptors <-
fulldf$reads_adaptors * 100 / fulldf$total_reads
# Fixes percentages ~
fulldf$hits_raw_frac <- fulldf$hits_raw_frac * 100
fulldf$hits_clonality <- fulldf$hits_clonality  * 100
fulldf$hits_unique_frac <- fulldf$hits_unique_frac * 100
# Expands PCA_Annot by adding Population ~
fulldf$Population <- ifelse(grepl("FR0", fulldf$Sample_ID), "Sales",
ifelse(grepl("KAZ", fulldf$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", fulldf$Sample_ID), "Lesina",
ifelse(grepl("Crotone", fulldf$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", fulldf$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", fulldf$Sample_ID), "Y150239",
ifelse(grepl("PD22NLD0146F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0077M", fulldf$Sample_ID), "Meerkerk",
ifelse(grepl("PDOM2022NLD0", fulldf$Sample_ID), "Utrecht",
ifelse(grepl("TreeSparrow", fulldf$Sample_ID), "Tree Sparrow", "Error")))))))))))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Meerkerk",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Y150239",
"Tree Sparrow"))
# Cleans DF ~
fulldf <- fulldf %>%
select(Population, total_reads, reads_adaptors, percentage_retained_reads,
hits_raw_frac, hits_clonality, hits_unique_frac, hits_coverage)
# Converts DF from wide into long ~
fulldfUp <- gather(fulldf, Stat, Value, "total_reads", "reads_adaptors", "percentage_retained_reads",
"hits_raw_frac", "hits_clonality", "hits_unique_frac", "hits_coverage")
# Reorders Stat ~
fulldfUp$Stat <- factor(fulldfUp$Stat, ordered = T,
levels = c("hits_coverage",
"hits_unique_frac",
"hits_clonality",
"hits_raw_frac",
"percentage_retained_reads",
"reads_adaptors",
"total_reads"))
fulldfUp %>% filter(Stat == "hits_coverage") %>%
summarise(mean(Value))
# Corrects facet labels ~
ylabels <- c("total_reads" = "# of Reads",
"reads_adaptors" = "% of Reads With Adaptors",
"percentage_retained_reads" = "% of Reads Retained",
"hits_raw_frac" = "% of Mapped Reads",
"hits_clonality" = "% of Clonality",
"hits_unique_frac" = "% of Uniquely Mapped Reads",
"hits_coverage" = "Mean Depth")
# Custom y-axis limits ~
limits_fun <- function(x){
limitVal <- max(x)
print(x)
if (limitVal < 60){
c(0, 60)}
else if (limitVal < 100){
c(90, 100)}
else {
c(70000000, 227746600)}}
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- min(y)
print(y)
if (caseVal < 100 & caseVal > 50){
seq(20, 60, by = 10)}
else if (caseVal < 100){
seq(92, 100, by = 2)}}
# Custom y-axis labels ~
plot_index_labels <- 0
labels_fun <- function(z) {
plot_index_labels <<- plot_index_labels + 1L
switch(plot_index_labels,
scales::label_number(accuracy = 1, suffix = "X")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_number(accuracy = 1, scale = 1/1000000, big.mark = "", suffix = "M")(z))}
# Creates the panel ~
Y150239Genomics_Stat <-
ggplot() +
geom_boxplot(data = fulldfUp, aes(x = Population, y = Value),
outlier.shape = NA, width = .5, lwd = .25, colour = "#000000", fill = "#C19EBE", alpha = .7) +
facet_rep_grid(Stat ~. , scales = "free", labeller = labeller(Stat = ylabels)) +
scale_y_continuous(#limits = limits_fun,
#breaks = breaks_fun,
labels = labels_fun) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major = element_line(color = "#E5E7E9", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.spacing.y = unit(1, "cm"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.title = element_blank(),
axis.text.x = element_text(family = "Optima", colour = "#000000", size = 10, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 8, face = "bold"),
axis.ticks.x = element_line(color = "#000000", linewidth = .3),
axis.ticks.y = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 9, face = "bold"),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
ggsave(Y150239Genomics_Stat, file = "Y150239Genomics--Stats_Article.jpeg",
width = 12, height = 17, scale = 1, dpi = 600)
### The BEGINNING ~~~~~
##
# ~ Plots Y1502239Genomics--Stats | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
library(lemon)
# Loads datasets ~
Stats <- read.table("Y150239Genomics--Stats.txt", sep = "\t", header = TRUE,
stringsAsFactors = FALSE)
Adaptors <- read.table("Y150239Genomics--Stats_Adaptors.txt", sep = "\t", header = FALSE,
stringsAsFactors = FALSE); colnames(Adaptors) <- c("Sample_ID", "reads_adaptors")
# Combines DFs ~
fulldf <- merge(Stats, Adaptors, by = "Sample_ID")
# Gets total_reads ~
fulldf$total_reads <-
fulldf$seq_reads_pairs * 2
# Gets percentages ~
fulldf$percentage_retained_reads <-
fulldf$seq_retained_reads * 100 / fulldf$total_reads
fulldf$reads_adaptors <-
fulldf$reads_adaptors * 100 / fulldf$total_reads
# Fixes percentages ~
fulldf$hits_raw_frac <- fulldf$hits_raw_frac * 100
fulldf$hits_clonality <- fulldf$hits_clonality  * 100
fulldf$hits_unique_frac <- fulldf$hits_unique_frac * 100
# Expands PCA_Annot by adding Population ~
fulldf$Population <- ifelse(grepl("FR0", fulldf$Sample_ID), "Sales",
ifelse(grepl("KAZ", fulldf$Sample_ID), "Chokpak",
ifelse(grepl("Lesina", fulldf$Sample_ID), "Lesina",
ifelse(grepl("Crotone", fulldf$Sample_ID), "Crotone",
ifelse(grepl("Guglionesi", fulldf$Sample_ID), "Guglionesi",
ifelse(grepl("PI22NLD0001M", fulldf$Sample_ID), "Y150239",
ifelse(grepl("PD22NLD0146F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PD22NLD0147F", fulldf$Sample_ID), "Garderen",
ifelse(grepl("PDOM2022NLD0077M", fulldf$Sample_ID), "Meerkerk",
ifelse(grepl("PDOM2022NLD0", fulldf$Sample_ID), "Utrecht",
ifelse(grepl("TreeSparrow", fulldf$Sample_ID), "Tree Sparrow", "Error")))))))))))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Utrecht",
"Meerkerk",
"Garderen",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Y150239",
"Tree Sparrow"))
# Cleans DF ~
fulldf <- fulldf %>%
select(Population, total_reads, reads_adaptors, percentage_retained_reads,
hits_raw_frac, hits_clonality, hits_unique_frac, hits_coverage)
# Converts DF from wide into long ~
fulldfUp <- gather(fulldf, Stat, Value, "total_reads", "reads_adaptors", "percentage_retained_reads",
"hits_raw_frac", "hits_clonality", "hits_unique_frac", "hits_coverage")
# Reorders Stat ~
fulldfUp$Stat <- factor(fulldfUp$Stat, ordered = T,
levels = c("hits_coverage",
"hits_unique_frac",
"hits_clonality",
"hits_raw_frac",
"percentage_retained_reads",
"reads_adaptors",
"total_reads"))
fulldfUp %>% filter(Stat == "hits_coverage") %>%
summarise(mean(Value))
# Corrects facet labels ~
ylabels <- c("total_reads" = "# of Reads",
"reads_adaptors" = "% of Reads With Adaptors",
"percentage_retained_reads" = "% of Reads Retained",
"hits_raw_frac" = "% of Mapped Reads",
"hits_clonality" = "% of Clonality",
"hits_unique_frac" = "% of Uniquely Mapped Reads",
"hits_coverage" = "Mean Depth")
# Custom y-axis limits ~
limits_fun <- function(x){
limitVal <- max(x)
print(x)
if (limitVal < 60){
c(0, 60)}
else if (limitVal < 100){
c(90, 100)}
else {
c(70000000, 227746600)}}
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- min(y)
print(y)
if (caseVal < 100 & caseVal > 50){
seq(20, 60, by = 10)}
else if (caseVal < 100){
seq(92, 100, by = 2)}}
# Custom y-axis labels ~
plot_index_labels <- 0
labels_fun <- function(z) {
plot_index_labels <<- plot_index_labels + 1L
switch(plot_index_labels,
scales::label_number(accuracy = 1, suffix = "X")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_number(accuracy = 1, scale = 1/1000000, big.mark = "", suffix = "M")(z))}
# Creates the panel ~
Y150239Genomics_Stat <-
ggplot() +
geom_boxplot(data = fulldfUp, aes(x = Population, y = Value),
outlier.shape = NA, width = .5, lwd = .25, colour = "#000000", fill = "#C19EBE", alpha = .7) +
facet_rep_grid(Stat ~. , scales = "free", labeller = labeller(Stat = ylabels)) +
scale_y_continuous(#limits = limits_fun,
#breaks = breaks_fun,
labels = labels_fun) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major = element_line(color = "#E5E7E9", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.spacing.y = unit(1, "cm"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.title = element_blank(),
axis.text.x = element_text(family = "Optima", colour = "#000000", size = 10, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 8, face = "bold"),
axis.ticks.x = element_line(color = "#000000", linewidth = .3),
axis.ticks.y = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 9, face = "bold"),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
ggsave(Y150239Genomics_Stat, file = "Y150239Genomics--Stats_Article.png",
width = 12, height = 17, scale = 1, dpi = 600)
### The BEGINNING ~~~~~
##
# ~ Creates Y150239Genomics--GlobalDepth | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, lemon)
# Loads data ~
fulldf <- read.table("AllSamples_bcftools.raw.vcf.Filtered.MeanDepth.ldepth.mean", header = TRUE)
fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Chromosome Z",
ifelse(grepl("mtDNA", fulldf$CHROM), "mtGenome", "Autosomes"))
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Chromosome Z",
"mtGenome"))
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
# Expands quantiles_df by adding annotation ~
quantiles_df <- quantiles_df %>%
add_column(group = c("Autosomes", "Chromosome Z", "mtGenome")) %>%
add_column(label = c(sprintf("Quantile 95%%: %.0fX", quantiles_df$x_quantile))) %>%
add_column(value_x = c(62.5, 62.5, 62.5)) %>%
add_column(v_just = c(2.14, 2.3, 2.95)) %>%
add_column(Type = "")
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, lemon)
# Loads data ~
fulldf <- read.table("AllSamples_bcftools.raw.vcf.Filtered.MeanDepth.ldepth.mean", header = TRUE)
fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Chromosome Z",
ifelse(grepl("mtDNA", fulldf$CHROM), "mtGenome", "Autosomes"))
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Chromosome Z",
"mtGenome"))
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
# Expands quantiles_df by adding annotation ~
quantiles_df <- quantiles_df %>%
add_column(group = c("Autosomes", "Chromosome Z", "mtGenome")) %>%
add_column(label = c(sprintf("Quantile 95%%: %.0fX", quantiles_df$x_quantile))) %>%
add_column(value_x = c(62.5, 62.5, 62.5)) %>%
add_column(v_just = c(2.14, 2.3, 2.95)) %>%
add_column(Type = "")
### The BEGINNING ~~~~~
##
# ~ Creates Y150239Genomics--GlobalDepth | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, lemon)
# Loads data ~
fulldf <- read.table("AllSamples_bcftools.raw.vcf.Filtered.MeanDepth.ldepth.mean", header = TRUE)
fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Chromosome Z",
ifelse(grepl("mtDNA", fulldf$CHROM), "mtGenome", "Autosomes"))
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Chromosome Z",
"mtGenome"))
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
# Expands quantiles_df by adding annotation ~
quantiles_df <- quantiles_df %>%
add_column(group = c("Autosomes", "Chromosome Z", "mtGenome")) %>%
add_column(label = c(sprintf("Quantile 95%%: %.0fX", quantiles_df$x_quantile))) %>%
add_column(value_x = c(62.5, 62.5, 62.5)) %>%
add_column(v_just = c(2.14, 2.3, 2.95)) %>%
add_column(Type = "")
View(quantiles_df)
