ifelse(grepl("PD22NLD0147F", colnames(VCF_auto.diff9_geno)), "Garderen",
ifelse(grepl("PDOM2022NLD0077M", colnames(VCF_auto.diff9_geno)), "Meerkerk",
ifelse(grepl("PDOM2022NLD0", colnames(VCF_auto.diff9_geno)), "Utrecht", "Error"))))))))))
# Step 5: Generate the plot
AncestryPlot <-
ggplot(fulldf, aes(x = POS, y = Individual, fill = as.factor(Ancestry))) +
geom_point(shape = 21, size = 2, colour = "#000000", stroke = 0) +
scale_fill_manual(values = c("#ee0000", "#FFD700", "#1E90FF"), na.translate = FALSE) +
scale_x_discrete("Ancestry-informative Markers",
position = "top",
expand = c(.005, .005)) +
scale_y_discrete(labels = delete_no_display) +
facet_grid(CHR ~ ., scales = "free", labeller = labeller(CHR = y_strip_labels)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.05, "cm"),
legend.position = c(.8, .875),
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
axis.title.x.top = element_text(family = "Optima", size = 20, face = "bold", color = "#000000", margin = margin(t = 0, r = 0, b = 15, l = 0)),
axis.title.y = element_blank(),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 5, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 6.5, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .2),
strip.text = element_text(family = "Optima", colour = "#000000", size = 7, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .2),
axis.line = element_line(colour = "#000000", linewidth = .2)) +
guides(fill = guide_legend(title = "Ancestry", title.theme = element_text(family = "Optima", size = 12, face = "bold"),
label.theme = element_text(family = "Optima", size = 10), override.aes = list(shape = 21, size = 4, stroke = .15)))
# Saves plot (Heatmap) ~
ggsave(AncestryPlot, file = "Y150239Genomics--AncestryHeatmap.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 10, height = 12, dpi = 600)
# Step 5: Generate the plot
AncestryPlot <-
ggplot(fulldf, aes(x = POS, y = Individual, fill = as.factor(Ancestry))) +
geom_point(shape = 21, size = 2, colour = "#000000", stroke = 0) +
scale_fill_manual(values = c("#ee0000", "#FFD700", "#1E90FF"), na.translate = FALSE) +
scale_x_discrete("Ancestry-informative Markers",
expand = c(.005, .005)) +
scale_y_discrete(labels = delete_no_display) +
facet_grid(CHR ~ ., scales = "free", labeller = labeller(CHR = y_strip_labels)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.05, "cm"),
legend.position = c(.8, .875),
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
axis.title.x.top = element_text(family = "Optima", size = 20, face = "bold", color = "#000000", margin = margin(t = 0, r = 0, b = 15, l = 0)),
axis.title.y = element_blank(),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 5, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 6.5, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .2),
strip.text = element_text(family = "Optima", colour = "#000000", size = 7, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .2),
axis.line = element_line(colour = "#000000", linewidth = .2)) +
guides(fill = guide_legend(title = "Ancestry", title.theme = element_text(family = "Optima", size = 12, face = "bold"),
label.theme = element_text(family = "Optima", size = 10), override.aes = list(shape = 21, size = 4, stroke = .15)))
# Saves plot (Heatmap) ~
ggsave(AncestryPlot, file = "Y150239Genomics--AncestryHeatmap.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 10, height = 12, dpi = 600)
A
# Step 5: Generate the plot
AncestryPlot <-
ggplot(fulldf, aes(x = POS, y = Individual, fill = as.factor(Ancestry))) +
geom_point(shape = 21, size = 2, colour = "#000000", stroke = 0) +
scale_fill_manual(values = c("#ee0000", "#FFD700", "#1E90FF"), na.translate = FALSE) +
scale_x_discrete("Ancestry-informative Markers",
expand = c(.005, .005)) +
scale_y_discrete(labels = delete_no_display) +
facet_grid(CHR ~ ., scales = "free", labeller = labeller(CHR = y_strip_labels)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.05, "cm"),
legend.position = c(.8, .875),
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
axis.title.x.top = element_text(family = "Optima", size = 20, face = "bold", color = "#000000", margin = margin(t = 0, r = 0, b = 15, l = 0)),
axis.title.y = element_blank(),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 5, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 6.5, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .2),
strip.text = element_text(family = "Optima", colour = "#000000", size = 7, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .2),
axis.line = element_line(colour = "#000000", linewidth = .2)) +
guides(fill = guide_legend(title = "Ancestry", title.theme = element_text(family = "Optima", size = 12, face = "bold"),
label.theme = element_text(family = "Optima", size = 10), override.aes = list(shape = 21, size = 4, stroke = .15)))
# Saves plot (Heatmap) ~
ggsave(AncestryPlot, file = "Y150239Genomics--AncestryHeatmap.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 30, height = 12, dpi = 600)
saveRDS(fulldf, "Layka.rds")
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, ggstar, ggforce, vcfR, triangulaR, lemon, ggrepel, grid, gtable)
devtools::install_github("omys-omics/triangulaR")
# Loads VCF data ~
VCF_auto <- read.vcfR("../../../../LargeFiles/Y150239--TriangularR/AllSamples_bcftools.raw.vcf.Filtered.Y150239.Autosomes.ALL.vcf", verbose = TRUE)
# Loads annotation file ~
pm <- read.table("AllSamples_bcftools.raw.vcf.Filtered.Y150239.Autosomes.ALL.annot",  sep = " ", header = FALSE, stringsAsFactors = FALSE)
colnames(pm) <- c("id", "pop")
# Gets AIMs ~
VCF_auto.diff9 <- alleleFreqDiff(vcfR = VCF_auto, pm = pm, p1 = "House", p2 = "Spanish", difference = 0.9)
# Gets AIMsÂ´ genotypes ~
m <- extract.gt(VCF_auto.diff9)
# recode to allele counts
m[m=="0|0"] <- 0
m[m=="0|1"] <- 1
m[m=="1|0"] <- 1
m[m=="1|1"] <- 2
m[m=="0/0"] <- 0
m[m=="0/1"] <- 1
m[m=="1/0"] <- 1
m[m=="1/1"] <- 2
# Filters $ subsets the genotypes for the two populations
p1.gts <- m[, pm[pm$pop == "House",]$id]
p2.gts <- m[, pm[pm$pop == "Spanish",]$id]
# Converts to numeric ~
p1.gts[] <- sapply(p1.gts, as.numeric)
p2.gts[] <- sapply(p2.gts, as.numeric)
# Calculates allele frequencies for P1 & P2 ~
af_p1 <- (rowSums(p1.gts == 1, na.rm = TRUE) + (2 * rowSums(p1.gts == 2, na.rm = TRUE))) / (2 * rowSums(!is.na(p1.gts)))
af_p2 <- (rowSums(p2.gts == 1, na.rm = TRUE) + (2 * rowSums(p2.gts == 2, na.rm = TRUE))) / (2 * rowSums(!is.na(p2.gts)))
# Determines P1 & P2 alleles based on allele frequencies ~
p1.allele <- ifelse(af_p1 > af_p2, 2, 0)
p2.allele <- ifelse(af_p2 > af_p1, 2, 0)
# Creates a matrix to store hybrid index scores ~
n <- matrix(nrow = nrow(m), ncol = ncol(m))
# Compares genotypes & assigns scores ~
n[m == p1.allele] <- 0
n[m == 1] <- 1
n[m == p2.allele] <- 2
n[is.na(m)] <- NA
n[m == -9] <- NA
# Names columns & rows ~
colnames(n) <- colnames(m)
rownames(n) <- rownames(m)
# Fills matrix ~
n <- as.data.frame(n)
# Selects focal individual & controls ~
fulldf <- n %>% select(PI22NLD0001M_SAMPLE, PD22NLD0146F_SAMPLE, PD22NLD0147F_SAMPLE, PDOM2022NLD0077M_SAMPLE)
# Filters out AIMs where any of the controls is NA ~
fulldf <- fulldf %>%
filter(!is.na(PDOM2022NLD0077M_SAMPLE) & !is.na(PD22NLD0146F_SAMPLE) & !is.na(PD22NLD0147F_SAMPLE))
# Convert row names to a column ~
fulldf <- fulldf %>%
mutate(CHR = sub("_.*", "", rownames(fulldf))) %>%
mutate(POS = sub(".*_", "", rownames(fulldf))) %>%
tibble::rownames_to_column(var = "SNP") %>%
select(SNP, CHR, POS, everything())
# Creates Index per CHR ~
fulldf$Index <- with(fulldf, ave(seq_along(CHR), CHR, FUN = seq_along))
# Converts to wide data frame ~
fulldf <- gather(fulldf, Individual, Ancestry,
"PI22NLD0001M_SAMPLE", "PD22NLD0146F_SAMPLE", "PD22NLD0147F_SAMPLE", "PDOM2022NLD0077M_SAMPLE")
# Expands PCA_Annot by adding Population ~
fulldf$Ancestry <- ifelse(grepl("0", fulldf$Ancestry), "House",
ifelse(grepl("1", fulldf$Ancestry), "Heterozygous",
ifelse(grepl("2", fulldf$Ancestry), "Spanish", "Error")))
# Expands PCA_Annot by adding Population ~
fulldf$Individual <- ifelse(grepl("PI22NLD0001M_SAMPLE", fulldf$Individual), "Y150239",
ifelse(grepl("PD22NLD0146F_SAMPLE", fulldf$Individual), "Garderen_01",
ifelse(grepl("PD22NLD0147F_SAMPLE", fulldf$Individual), "Garderen_02",
ifelse(grepl("PDOM2022NLD0077M_SAMPLE", fulldf$Individual), "Meerkerk_01", "Error"))))
# Reorders BioStatus ~
fulldf$Individual <- factor(fulldf$Individual, ordered = TRUE,
levels = c("Meerkerk_01",
"Garderen_02",
"Garderen_01",
"Y150239"))
# Reorders Ancestry ~
fulldf$Ancestry <- factor(fulldf$Ancestry, ordered = TRUE,
levels = c("House",
"Heterozygous",
"Spanish"))
# Reorders CHR ~
fulldf$CHR <- factor(fulldf$CHR, ordered = TRUE,
levels = c("chr1", "chr1A", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10",
"chr11", "chr12", "chr13", "chr14", "chr15", "chr17", "chr18", "chr19", "chr20", "chr21",
"chr22", "chr23", "chr24", "chr26", "chr27", "chr28", "scaffold00239"))
# Fixes CHRsÂ´ names ~
y_strip_labels <- setNames(c("CHR 01", "CHR 01A", "CHR 02", "CHR 03", "CHR 04", "CHR 05", "CHR 06", "CHR 07",
"CHR 08", "CHR 09", "CHR 10", "CHR 11", "CHR 12", "CHR 13", "CHR 14", "CHR 15",
"CHR 17", "CHR 18", "CHR 19", "CHR 20", "CHR 21", "CHR 22", "CHR 23", "CHR 24",
"CHR 26", "CHR 27", "CHR 28", "CHR Z", "SD00169", "SD00221", "SD00223", "SD00224",
"SD00238", "SD00239", "SD00242"),
c("chr1", "chr1A", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10",
"chr11", "chr12", "chr13", "chr14", "chr15", "chr17", "chr18", "chr19", "chr20", "chr21",
"chr22", "chr23", "chr24", "chr26", "chr27", "chr28", "chrZ", "scaffold00169",
"scaffold00221", "scaffold00223", "scaffold00224", "scaffold00238", "scaffold00239",
"scaffold00242"))
# Marks y-axis labels for no display ~
fulldf <- fulldf %>%
mutate(Individual = if_else(CHR != "chr1", paste0(as.character(Individual), "no_display"), as.character(Individual)))
# Little function to suppress y-axis labels ~
delete_no_display <- function(v) {
if_else(str_detect(v, 'no_display'), '', v)}
View(fulldf)
# Marks y-axis labels for no display ~
fulldf$POSMb <- fulldf$POSminor / 1000000
# Marks y-axis labels for no display ~
fulldf$POSMb <- fulldf$POS / 1000000
# Marks y-axis labels for no display ~
fulldf$POSMb <- as.numeric(fulldf$POS) / 1000000
# Creates POS plot ~
AncestryPlot_POS <-
ggplot(fulldf, aes(x = as.numeric(POSMb), y = Individual, fill = as.factor(Ancestry))) +
geom_point(shape = 21, size = 1.25, colour = "#000000", stroke = 0) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000"), na.translate = FALSE) +
ggtitle("Ancestry-informative Markers") +
scale_x_continuous(breaks = c(25, 50, 75, 100, 125),
labels = c("25Mb", "50Mb", "75Mb", "100Mb", "125Mb"),
expand = c(.005, .005)) +
scale_y_discrete(labels = delete_no_display) +
facet_grid(CHR ~ ., scales = "free", labeller = labeller(CHR = y_strip_labels)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.05, "cm"),
legend.position = c(.3, .25),
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
plot.title = element_text(family = "Optima", size = 20, face = "bold", color = "#000000", hjust = .5, margin = margin(t = 0, r = 0, b = 15, l = 0)),
axis.title = element_blank(),
axis.text = element_text(family = "Optima", color = "#000000", size = 6.5, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .2),
strip.text = element_text(family = "Optima", colour = "#000000", size = 7, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .2),
axis.line = element_line(colour = "#000000", linewidth = .2)) +
guides(fill = guide_legend(title = "Ancestry", title.theme = element_text(family = "Optima", size = 12, face = "bold"),
label.theme = element_text(family = "Optima", size = 10), override.aes = list(shape = 21, size = 4, stroke = .15)))
# Saves Index plot ~
ggsave(AncestryPlot_POS, file = "Y150239Genomics--AncestryHeatmap_GenomicAIMs_News.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 20, height = 12, dpi = 600)
# Saves Index plot ~
ggsave(AncestryPlot_POS, file = "Y150239Genomics--AncestryHeatmap_GenomicAIMs_News.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 14, height = 12, dpi = 600)
# Creates POS plot ~
AncestryPlot_POS <-
ggplot(fulldf, aes(x = POSMb, y = Individual, fill = as.factor(Ancestry))) +
geom_point(shape = 21, size = 1.25, colour = "#000000", stroke = 0) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000"), na.translate = FALSE) +
ggtitle("Ancestry-informative Markers") +
scale_x_continuous(breaks = c(25, 50, 75, 100, 125),
labels = c("25Mb", "50Mb", "75Mb", "100Mb", "125Mb"),
expand = c(.005, .005)) +
scale_y_discrete(labels = delete_no_display) +
facet_grid(CHR ~ ., scales = "free", labeller = labeller(CHR = y_strip_labels)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.05, "cm"),
legend.position = c(.3, .25),
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
plot.title = element_text(family = "Optima", size = 20, face = "bold", color = "#000000", hjust = .5, margin = margin(t = 0, r = 0, b = 15, l = 0)),
axis.title = element_blank(),
axis.text = element_text(family = "Optima", color = "#000000", size = 6.5, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .2),
strip.text = element_text(family = "Optima", colour = "#000000", size = 7, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .2),
axis.line = element_line(colour = "#000000", linewidth = .2)) +
guides(fill = guide_legend(title = "Ancestry", title.theme = element_text(family = "Optima", size = 12, face = "bold"),
label.theme = element_text(family = "Optima", size = 10), override.aes = list(shape = 21, size = 4, stroke = .15)))
# Saves Index plot ~
ggsave(AncestryPlot_POS, file = "Y150239Genomics--AncestryHeatmap_GenomicAIMs_News.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 14, height = 12, dpi = 600)
AncestryPlot_POS <-
ggplot(fulldf, aes(x = POSMb, y = Individual, fill = as.factor(Ancestry))) +
geom_point(shape = 21, size = 1.25, colour = "#000000", stroke = 0) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000"), na.translate = FALSE) +
ggtitle("Ancestry-informative Markers") +
scale_x_continuous(breaks = c(25, 50, 75, 100, 125),
labels = c("25Mb", "50Mb", "75Mb", "100Mb", "125Mb"),
expand = c(.005, .005)) +
scale_y_discrete(labels = delete_no_display) +
facet_grid(CHR ~ ., scales = "free", labeller = labeller(CHR = y_strip_labels)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.05, "cm"),
legend.position = c(.3, .25),
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
plot.title = element_text(family = "Optima", size = 20, face = "bold", color = "#000000", hjust = .5, margin = margin(t = 0, r = 0, b = 15, l = 0)),
axis.title = element_blank(),
axis.text = element_text(family = "Optima", color = "#000000", size = 6.5, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .2),
strip.text = element_text(family = "Optima", colour = "#000000", size = 7, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .2),
axis.line = element_line(colour = "#000000", linewidth = .2)) +
guides(fill = guide_legend(title = "Ancestry", title.theme = element_text(family = "Optima", size = 12, face = "bold"),
label.theme = element_text(family = "Optima", size = 10), override.aes = list(shape = 21, size = 4, stroke = .15)))
# Saves Index plot ~
ggsave(AncestryPlot_POS, file = "Y150239Genomics--AncestryHeatmap_GenomicAIMs_News.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 8, height = 12, dpi = 600)
View(fulldf)
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, ggstar, ggforce, vcfR, triangulaR, lemon, ggrepel, grid, gtable)
devtools::install_github("omys-omics/triangulaR")
# Loads VCF data ~
VCF_auto <- read.vcfR("../../../../LargeFiles/Y150239--TriangularR/AllSamples_bcftools.raw.vcf.Filtered.Y150239.Autosomes.ALL.vcf", verbose = TRUE)
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tidyverse, plyr, RColorBrewer, extrafont, ggforce, ggstar, ggrepel, RcppCNPy, reshape2, lemon,
gridExtra, grid, ggpubr, rphylopic, viridis)
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads annotation file ~
pm <- read.table("AllSamples_bcftools.raw.vcf.Filtered.Y150239.Autosomes.ALL.annot",  sep = " ", header = FALSE, stringsAsFactors = FALSE)
View(pm)
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads packages ~
pacman::p_load(tidyverse, ggstar, ggforce, vcfR, triangulaR, lemon, ggrepel, grid, gtable)
devtools::install_github("omys-omics/triangulaR")
# Loads VCF data ~
VCF_auto <- read.vcfR("../../../../LargeFiles/Y150239--TriangularR/AllSamples_bcftools.raw.vcf.Filtered.Focal.Autosomes.ALL.vcf", verbose = TRUE)
# Loads annotation file ~
pm <- read.table("AllSamples_bcftools.raw.vcf.Filtered.Focal.Autosomes.ALL.annot",  sep = " ", header = FALSE, stringsAsFactors = FALSE)
colnames(pm) <- c("id", "pop")
# Gets AIMs ~
VCF_auto.diff9 <- alleleFreqDiff(vcfR = VCF_auto, pm = pm, p1 = "House", p2 = "Spanish", difference = 0.9)
# Gets AIMsÂ´ genotypes ~
m <- extract.gt(VCF_auto.diff9)
# recode to allele counts
m[m=="0|0"] <- 0
m[m=="0|1"] <- 1
m[m=="1|0"] <- 1
m[m=="1|1"] <- 2
m[m=="0/0"] <- 0
m[m=="0/1"] <- 1
m[m=="1/0"] <- 1
m[m=="1/1"] <- 2
# Filters $ subsets the genotypes for the two populations
p1.gts <- m[, pm[pm$pop == "House",]$id]
p2.gts <- m[, pm[pm$pop == "Spanish",]$id]
# Converts to numeric ~
p1.gts[] <- sapply(p1.gts, as.numeric)
p2.gts[] <- sapply(p2.gts, as.numeric)
# Calculates allele frequencies for P1 & P2 ~
af_p1 <- (rowSums(p1.gts == 1, na.rm = TRUE) + (2 * rowSums(p1.gts == 2, na.rm = TRUE))) / (2 * rowSums(!is.na(p1.gts)))
af_p2 <- (rowSums(p2.gts == 1, na.rm = TRUE) + (2 * rowSums(p2.gts == 2, na.rm = TRUE))) / (2 * rowSums(!is.na(p2.gts)))
# Determines P1 & P2 alleles based on allele frequencies ~
p1.allele <- ifelse(af_p1 > af_p2, 2, 0)
p2.allele <- ifelse(af_p2 > af_p1, 2, 0)
# Creates a matrix to store hybrid index scores ~
n <- matrix(nrow = nrow(m), ncol = ncol(m))
# Compares genotypes & assigns scores ~
n[m == p1.allele] <- 0
n[m == 1] <- 1
n[m == p2.allele] <- 2
n[is.na(m)] <- NA
n[m == -9] <- NA
# Names columns & rows ~
colnames(n) <- colnames(m)
rownames(n) <- rownames(m)
# Fills matrix ~
n <- as.data.frame(n)
# Selects focal individual & controls ~
fulldf <- n %>% select(PI22NLD0001M_SAMPLE, PD22NLD0146F_SAMPLE, PD22NLD0147F_SAMPLE, PDOM2022NLD0077M_SAMPLE)
# Convert row names to a column ~
fulldf <- fulldf %>%
mutate(CHR = sub("_.*", "", rownames(fulldf))) %>%
mutate(POS = sub(".*_", "", rownames(fulldf))) %>%
tibble::rownames_to_column(var = "SNP") %>%
select(SNP, CHR, POS, everything())
# Creates Index per CHR ~
fulldf$Index <- with(fulldf, ave(seq_along(CHR), CHR, FUN = seq_along))
# Converts to wide data frame ~
fulldf <- gather(fulldf, Individual, Ancestry,
"PI22NLD0001M_SAMPLE", "PD22NLD0146F_SAMPLE", "PD22NLD0147F_SAMPLE", "PDOM2022NLD0077M_SAMPLE")
# Expands PCA_Annot by adding Population ~
fulldf$Ancestry <- ifelse(grepl("0", fulldf$Ancestry), "House",
ifelse(grepl("1", fulldf$Ancestry), "Heterozygous",
ifelse(grepl("2", fulldf$Ancestry), "Spanish", "Error")))
# Expands PCA_Annot by adding Population ~
fulldf$Individual <- ifelse(grepl("PI22NLD0001M_SAMPLE", fulldf$Individual), "Y150239",
ifelse(grepl("PD22NLD0146F_SAMPLE", fulldf$Individual), "Garderen_01",
ifelse(grepl("PD22NLD0147F_SAMPLE", fulldf$Individual), "Garderen_02",
ifelse(grepl("PDOM2022NLD0077M_SAMPLE", fulldf$Individual), "Meerkerk_01", "Error"))))
# Reorders BioStatus ~
fulldf$Individual <- factor(fulldf$Individual, ordered = TRUE,
levels = c("Meerkerk_01",
"Garderen_02",
"Garderen_01",
"Y150239"))
# Reorders Ancestry ~
fulldf$Ancestry <- factor(fulldf$Ancestry, ordered = TRUE,
levels = c("House",
"Heterozygous",
"Spanish"))
# Reorders CHR ~
fulldf$CHR <- factor(fulldf$CHR, ordered = TRUE,
levels = c("chr1", "chr1A", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10",
"chr11", "chr12", "chr13", "chr14", "chr15", "chr17", "chr18", "chr19", "chr20", "chr21",
"chr22", "chr23", "chr24", "chr26", "chr27", "chr28", "scaffold00239"))
# Fixes CHRsÂ´ names ~
y_strip_labels <- setNames(c("CHR 01", "CHR 01A", "CHR 02", "CHR 03", "CHR 04", "CHR 05", "CHR 06", "CHR 07",
"CHR 08", "CHR 09", "CHR 10", "CHR 11", "CHR 12", "CHR 13", "CHR 14", "CHR 15",
"CHR 17", "CHR 18", "CHR 19", "CHR 20", "CHR 21", "CHR 22", "CHR 23", "CHR 24",
"CHR 26", "CHR 27", "CHR 28", "CHR Z", "SD00169", "SD00221", "SD00223", "SD00224",
"SD00238", "SD00239", "SD00242"),
c("chr1", "chr1A", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10",
"chr11", "chr12", "chr13", "chr14", "chr15", "chr17", "chr18", "chr19", "chr20", "chr21",
"chr22", "chr23", "chr24", "chr26", "chr27", "chr28", "chrZ", "scaffold00169",
"scaffold00221", "scaffold00223", "scaffold00224", "scaffold00238", "scaffold00239",
"scaffold00242"))
# Marks y-axis labels for no display ~
fulldf <- fulldf %>%
mutate(Individual = if_else(CHR != "chr1", paste0(as.character(Individual), "no_display"), as.character(Individual)))
# Marks y-axis labels for no display ~
fulldf$POSMb <- as.numeric(fulldf$POS) / 1000000
# Little function to suppress y-axis labels ~
delete_no_display <- function(v) {
if_else(str_detect(v, 'no_display'), '', v)}
# Creates Index plot ~
AncestryPlot_Index <-
ggplot(fulldf, aes(x = Index, y = Individual, fill = as.factor(Ancestry))) +
geom_point(shape = 21, size = 2, colour = "#000000", stroke = 0) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000"), na.translate = FALSE) +
ggtitle("Ancestry-informative Markers") +
scale_x_discrete(expand = c(.005, .005)) +
scale_y_discrete(labels = delete_no_display) +
facet_grid(CHR ~ ., scales = "free", labeller = labeller(CHR = y_strip_labels)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.05, "cm"),
legend.position = c(.8, .875),
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
plot.title = element_text(family = "Optima", size = 20, face = "bold", color = "#000000", hjust = .5, margin = margin(t = 0, r = 0, b = 15, l = 0)),
axis.title = element_blank(),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 5, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 6.5, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .2),
strip.text = element_text(family = "Optima", colour = "#000000", size = 7, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .2),
axis.line = element_line(colour = "#000000", linewidth = .2)) +
guides(fill = guide_legend(title = "Ancestry", title.theme = element_text(family = "Optima", size = 12, face = "bold"),
label.theme = element_text(family = "Optima", size = 10), override.aes = list(shape = 21, size = 4, stroke = .15)))
# Saves Index plot ~
ggsave(AncestryPlot_Index, file = "Y150239Genomics--AncestryHeatmap_AIMs.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 10, height = 12, dpi = 600)
### The BEGINNING ~~~~~
##
# ~ Creates Y150239Genomics--GlobalDepth by George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, lemon)
# Loads data ~
fulldf <- read.table("AllSamples_bcftools.raw.vcf.Filtered.MeanDepth.ldepth.mean", header = TRUE)
fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Chromosome Z",
ifelse(grepl("mtDNA", fulldf$CHROM), "mtGenome", "Autosomes"))
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Chromosome Z",
"mtGenome"))
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
# Expands quantiles_df by adding annotation ~
quantiles_df <- quantiles_df %>%
add_column(group = c("Autosomes", "Chromosome Z", "mtGenome")) %>%
add_column(label = c(sprintf("Quantile 95%%: %.0fX", quantiles_df$x_quantile))) %>%
add_column(value_x = c(62.5, 62.5, 62.5)) %>%
add_column(v_just = c(2.14, 2.3, 2.95)) %>%
add_column(Type = "")
