# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tools, tidyverse, plyr, reshape2, RColorBrewer, extrafont, lemon)
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Specifies options ~
options(width = 200)
# Specifies arguments ~
option_list <- list(
make_option(c('--ld_files'), action='store', type='character', default=NULL, help = 'File with list of LD files to fit and plot (if ommited, can be read from STDIN)'),
make_option(c('--header'), action='store_true', type='logical', default=FALSE, help='Input file has header'),
make_option(c('--col'), action='store', type='numeric', default=3, help='Which column is distance between sites? [%default]'),
make_option(c('--ld'), action='store', type='character', default="r2", help='Which LD stats to plot (r2pear, D, Dp, r2) [%default]'),
make_option(c('--n_ind'), action='store', type='numeric', default=0, help='How many individuals per-sample (for r^2 fitting correction)?'),
make_option(c('-r', '--use_recomb_rate'), action='store_true', type='logical', default=FALSE, help='Assume constant recombination rate. [%default]'),
make_option(c('--recomb_rate'), action='store', type='numeric', default=1, help='Recombination rate (or probability of recombination between adjacent sites in cM/Mb) to calculate genetic distances from physical distances. It is assumed to be constant throughout the whole dataset and, for human datasets, a common rule-of-thumb value is 1cM/Mb (1e-6). [%default]'),
make_option(c('--max_kb_dist'), action='store', type='numeric', default=Inf, help='Maximum distance between SNPs (in kb) to include in the fitting analysis. [%default]'),
make_option(c('--fit_boot'), action='store', type='numeric', default=0, help='Number of bootstrap replicates for fitting CI. [%default]'),
make_option(c('--fit_bin_size'), action='store', type='numeric', default=250, help='Bin data into fixed-sized windows for fitting. [default %default bps]'),
make_option(c('--fit_level'), action='store', type='numeric', default=1, help='Fitting level 0) no fitting, best of 1) Nelder-Mead, 2) and BFGS, 3) and L-BFGS-B). [%default]'),
make_option(c('--plot_group'), action='store', type='character', default='File', help='Group variable'),
make_option(c('--plot_data'), action='store_true', type='logical', default=FALSE, help='Also plot data points?'),
make_option(c('--plot_bin_size'), action='store', type='numeric', default=0, help='Bin data into fixed-sized windows for plotting. [default %default bps]'),
make_option(c('--plot_x_lim'), action='store', type='numeric', default=NULL, help='X-axis plot limit (in kb). [%default]'),
make_option(c('--plot_y_lim'), action='store', type='numeric', default=NULL, help='Y-axis plot limit. [%default]'),
make_option(c('--plot_axis_scales'), action='store', type='character', default='fixed', help='Plot axis scales: fixed (default), free, free_x or free_y'),
make_option(c('--plot_size'), action='store', type='character', default='1,2', help='Plot size (height,width). [%default]'),
make_option(c('--plot_scale'), action='store', type='numeric', default=1.5, help='Plot scale. [%default]'),
make_option(c('--plot_wrap'), action='store', type='numeric', default=0, help='Plot in WRAP with X columns (default in GRID)'),
make_option(c('--plot_no_legend'), action='store_true', type='logical', default=FALSE, help='Remove legend from plot'),
make_option(c('--plot_shapes'), action='store_true', type='logical', default=FALSE, help='Use also shapes (apart from colors)'),
make_option(c('--plot_line_smooth'), action='store', type='numeric', default=1000, help='LD decay curve smoothness'),
make_option(c('--bin_quant'), action='store', type='numeric', default=0, help='Quantile to represent the bins (e.g. 0 = mean, 50 = median). [%default]'),
make_option(c('-f','--plot_wrap_formula'), action='store', type='character', default=NULL, help='Plot formula for WRAP. [%default]'),
make_option(c('-o','--out'), action='store', type='character', default=NULL, help='Output file'),
make_option(c('--seed'), action='store', type='numeric', default=NULL, help='Seed for random number generator'),
make_option(c('--debug'), action='store_true', type='logical', default=FALSE, help='Debug mode. Extra output...'))
opt_parser = OptionParser(option_list = option_list)
opt = parse_args(opt_parser)
opt$ld_files = "NLSparrow--LD.list"
opt$plot_x_lim = 100
opt$fit_level = 100
opt$plot_size = "2,5"
opt$max_kb_dist = 100
opt$fit_bin_size = 100
opt$col = 3
opt$bin_quant = 50
opt$fit_boot = 0
opt$plot_wrap = 1
opt$plot_wrap_formula = "File ~."
opt$plot_data = TRUE
opt$out_file = "Layka.pdf"
# Set random seed ~
if(is.null(opt$seed))
opt$seed <- as.integer(runif(1, 1, 100000))
cat("Random seed:", opt$seed, fill = TRUE)
set.seed(opt$seed)
# Parse input LD files ~
if(is.null(opt$ld_files))
opt$ld_files <- file('stdin')
ld_files <- read.table(opt$ld_files, header=opt$header, stringsAsFactors=FALSE)
colnames(ld_files)[1] <- "File"
# Keep file list ordered
for (id in colnames(ld_files))
ld_files[,id] <- factor(ld_files[,id], unique(ld_files[,id]), ordered=TRUE)
n_files <- nrow(ld_files)
if(opt$debug)
print(ld_files)
# Parse LD stats to plot ~
if(!is.null(opt$ld))
opt$ld <- unlist(strsplit(opt$ld, ","))
if(!all(opt$ld %in% c("r2pear", "D", "Dp", "r2")))
stop("Invalid LD measure to plot", call. = opt$debug)
n_ld = length(opt$ld)
# Check if number of individuals was specified ~
if(opt$n_ind < 0)
stop("Number of individuals must be greater than zero", call. = opt$debug)
if(opt$n_ind > 0 && length(unique(ld_files$File)) > 1)
warning("Sample size for correction will be assumed equal for all samples!", call. = opt$debug)
if(!any(opt$ld %in% c("r2","r2pear")) && opt$n_ind)
stop("Number of individuals is only used for r^2 fitting", call. = opt$debug)
for(i in opt$ld)
cat("==> Fitting", i, "LD decay assuming a", ifelse(i == "Dp" || opt$n_ind == 0, "three (rate of decay, max LD and min LD)",
"one (rate of decay)"), "parameter decay model", fill = TRUE)
# Check max_kb_dist parameter ~
if(opt$max_kb_dist < 50)
warning("Fitting of LD decay is highly unreliable at short distances (<50kb).", call. = opt$debug)
# Check binning sizes ~
if(opt$plot_bin_size > 0 && opt$plot_bin_size < opt$fit_bin_size)
stop("Ploting bin size must be greater than fiting bin size!", call.=opt$debug)
# Parse plot_size ~
opt$plot_size <- as.numeric(unlist(strsplit(opt$plot_size, ",")))
if(length(opt$plot_size) < 2)
opt$plot_size <- c(opt$plot_size, opt$plot_size)
# Plot formula ~
if(!is.null(opt$plot_wrap_formula))
opt$plot_wrap_formula <- as.formula(opt$plot_wrap_formula)
# Set output file name (if not defined) ~
if(is.null(opt$out))
{if(is.null(opt$ld_files))
stop('Output file name required, when reading LD files from STDIN')
opt$out <- paste(basename(file_path_sans_ext(opt$ld_files)),".pdf", sep = "")}
# Load LD data ~
header <- c("Dist", "r2pear", "D", "Dp", "r2")
ld_data <- data.frame()
for (i in 1:n_files) {
ld_file <- as.character(ld_files$File[i])
# Reads point data ~
if(opt$debug) cat("Reading file:", ld_file, fill = TRUE)
tmp_data <- read.table(gzfile(ld_file), sep = "\t", quote = "\"", dec = ".")[-(1:(opt$col-1))]
# Checks if file is valid ~
if(ncol(tmp_data) < 5)
stop('Invalid LD file format.\n', call. = opt$debug)
# Add column labels ~
colnames(tmp_data) <- header
# Extract relevant columns ~
tmp_data <- tmp_data[, which(names(tmp_data) %in% c("Dist", opt$ld))]
# Filter by minimum distance ~
tmp_data <- tmp_data[which(tmp_data$Dist < opt$max_kb_dist * 1000), ]
# Convert all 'Inf' to NA ~
tmp_data[mapply(is.infinite, tmp_data)] <- NA
# Calculate genetic distances, according to Haldane's formula (assumes constant rate across all dataset) ~
if(opt$use_recomb_rate && !is.null(opt$recomb_rate))
tmp_data$Dist <- (1 - (1 - opt$recomb_rate*0.01/1e6)^(tmp_data$Dist)) / 2
# Bin data ~
if(opt$fit_bin_size > 1) {
breaks <- seq(0, max(tmp_data$Dist)+opt$fit_bin_size, opt$fit_bin_size)
tmp_data$Dist <- cut(tmp_data$Dist, breaks, head(breaks, -1))
if(opt$bin_quant > 0) {
tmp_data <- aggregate(. ~ Dist, data = tmp_data, quantile, probs=opt$bin_quant / 100, na.rm = TRUE)
} else {
tmp_data <- aggregate(. ~ Dist, data = tmp_data, mean, na.rm = TRUE)}}
tmp_data$File <- ld_file
ld_data <- rbind(ld_data, melt(tmp_data, c("File", "Dist"), variable.name = "LD", na.rm = TRUE))}
### The BEGINNING ~~~~~
##
# ~ Creates Y150239Genomics--GlobalDepth | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse, reshape2, lemon)
# Imports extra fonts ~
font_import()
# Loads data ~
fulldf <- read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.NoKinship.NoTree.MeanDepth.ldepth.mean", header = TRUE)
fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Allosome (Z)",  "Autosomes")
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Allosome (Z)"))
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- max(y)
if (caseVal > 1){
c(.5, 1, 1.5)}
else {
c(.01, .02, .03, .04)}}
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
# Expands quantiles_df by adding annotation ~
quantiles_df <- quantiles_df %>%
add_column(group = c("Autosomes", "Allosome (Z)")) %>%
add_column(label = c(sprintf("Quantile 95%%: %.2fX", round(quantiles_df$x_quantile)))) %>%
add_column(value_x = c(62.5, 62.5)) %>%
add_column(value_y = c(1.25, .035)) %>%
add_column(Type = "")
### The BEGINNING ~~~~~
##
# ~ Creates Y150239Genomics--GlobalDepth | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse, reshape2, lemon)
# Imports extra fonts ~
font_import()
# Loads data ~
fulldf <- read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.NoKinship.NoTree.MeanDepth.ldepth.mean", header = TRUE)
fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Allosome (Z)",  "Autosomes")
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Allosome (Z)"))
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- max(y)
if (caseVal > 1){
c(.5, 1, 1.5)}
else {
c(.01, .02, .03, .04)}}
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
# Expands quantiles_df by adding annotation ~
quantiles_df <- quantiles_df %>%
add_column(group = c("Autosomes", "Allosome (Z)")) %>%
add_column(label = c(sprintf("Quantile 95%%: %.1fX", quantiles_df$x_quantile))) %>%
add_column(value_x = c(62.5, 62.5)) %>%
add_column(value_y = c(1.25, .035)) %>%
add_column(Type = "")
### The BEGINNING ~~~~~
##
# ~ Creates Y150239Genomics--GlobalDepth | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse, reshape2, lemon)
# Imports extra fonts ~
font_import()
# Loads data ~
fulldf <- read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.NoKinship.NoTree.MeanDepth.ldepth.mean", header = TRUE)
fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Allosome (Z)",  "Autosomes")
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Allosome (Z)"))
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- max(y)
if (caseVal > 1){
c(.5, 1, 1.5)}
else {
c(.01, .02, .03, .04)}}
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
View(quantiles_df)
### The BEGINNING ~~~~~
##
# ~ Creates Y150239Genomics--GlobalDepth | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse, reshape2, lemon)
# Imports extra fonts ~
font_import()
# Loads data ~
fulldf <- read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.NoKinship.NoTree.MeanDepth.ldepth.mean", header = TRUE)
#fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Allosome (Z)",  "Autosomes")
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Allosome (Z)"))
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- max(y)
if (caseVal > 1){
c(.5, 1, 1.5)}
else {
c(.01, .02, .03, .04)}}
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
View(quantiles_df)
quantiles_df$x_quantile
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse, reshape2, lemon)
# Loads data ~
fulldf <- read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.NoKinship.NoTree.MeanDepth.ldepth.mean", header = TRUE)
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Allosome (Z)",  "Autosomes")
View(fulldf)
# Reorders chrtype ~
fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
levels = c("Autosomes",
"Allosome (Z)"))
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- max(y)
if (caseVal > 1){
c(.5, 1, 1.5)}
else {
c(.01, .02, .03, .04)}}
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
View(quantiles_df)
quantiles_df <- fulldf %>%
group_by(chrtype)
View(quantiles_df)
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
View(quantiles_df)
### The BEGINNING ~~~~~
##
# ~ Creates Y150239Genomics--GlobalDepth | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse, reshape2, lemon)
# Loads data ~
fulldf <- read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.NoKinship.NoTree.MeanDepth.ldepth.mean", header = TRUE)
#fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Allosome (Z)",  "Autosomes")
# Reorders chrtype ~
#fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
#                         levels = c("Autosomes",
#                                    "Allosome (Z)"))
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- max(y)
if (caseVal > 1){
c(.5, 1, 1.5)}
else {
c(.01, .02, .03, .04)}}
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
### The BEGINNING ~~~~~
##
# ~ Creates Y150239Genomics--GlobalDepth | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse, reshape2, lemon)
# Loads data ~
fulldf <- read.table("AllSamples_haplotypecaller.raw.vcf.Filtered.NoKinship.NoTree.MeanDepth.ldepth.mean", header = TRUE)
#fulldf$Type <- ""
# Expands fulldf by adding chrtype ~
fulldf$chrtype <- ifelse(grepl("chrZ", fulldf$CHROM), "Allosome (Z)",  "Autosomes")
# Reorders chrtype ~
#fulldf$chrtype <- factor(fulldf$chrtype, ordered = T,
#                         levels = c("Autosomes",
#                                    "Allosome (Z)"))
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- max(y)
if (caseVal > 1){
c(.5, 1, 1.5)}
else {
c(.01, .02, .03, .04)}}
# Get quantile values ~
quantiles_df <- fulldf %>%
group_by(chrtype) %>%
summarize(x_quantile = quantile(MEAN_DEPTH, .95))
# Expands quantiles_df by adding annotation ~
quantiles_df <- quantiles_df %>%
add_column(group = c("Autosomes", "Allosome (Z)")) %>%
add_column(label = c(sprintf("Quantile 95%%: %.1fX", quantiles_df$x_quantile))) %>%
add_column(value_x = c(62.5, 62.5)) %>%
add_column(value_y = c(1.25, .035)) %>%
add_column(Type = "")
