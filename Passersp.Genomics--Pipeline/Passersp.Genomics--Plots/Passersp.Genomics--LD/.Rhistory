pacman::p_load(optparse, tidyverse, plyr, RColorBrewer, extrafont, ggforce, ggstar, ggrepel, RcppCNPy, reshape2,
gridExtra, grid, ggpubr, rphylopic, viridis, forcats)
# Loads data while loading accompanying annotations ~
annot <- list()
rab <- list()
annotL <- dir(pattern = ".labels")
rabL <- dir(pattern = ".res")
for (k in 1:length(annotL)) {
annot[[k]] <- read.table(annotL[k], sep = "\t", header = FALSE, stringsAsFactors = FALSE)
colnames(annot[[k]]) <- c("Ind1")
annot[[k]]$Ind2 <- c(annot[[k]]$Ind1[-c(1)], NA)
annot[[k]]$Population <- gsub("[A-z._]*(Autosomes|Allosome).", "", annotL[k])
annot[[k]]$Population <- gsub(".labels", "", annot[[k]]$Population)
annot[[k]]$SubPopulation <- annot[[k]]$Population
### Only needed because the population Utrecht has subpopulation ~
annot[[k]] <- annot[[k]] %>%
mutate(SubPopulation = case_when(Ind1 %in% c("PD22NLD0146F", "PD22NLD0147F") ~ "Garderen",
Ind1 == "PDOM2022NLD0077M" ~ "Meerkerk",
Ind1 == "PI22NLD0001M" ~ "Focal Ind.", TRUE ~ Population))
annot[[k]]$CHRType <- str_extract(annotL[k], "(Allosome|Autosomes)")
annot[[k]] <- annot[[k]] %>%
group_by(SubPopulation) %>% mutate(Ind1b = paste(SubPopulation, sprintf("%02d", row_number()), sep = "_")) %>%
ungroup() %>%
mutate(Ind2b = lead(Ind1b, default = paste0(SubPopulation[1], "_", sprintf("%02d", n() + 1))))
rab[[k]] <- read.table(rabL[k], header = TRUE, stringsAsFactors = FALSE)
rab[[k]]$a <- rab[[k]]$a + 1
rab[[k]]$Population <- annot[[k]]$Population[match(rab[[k]]$a, seq_along(annot[[k]]$Ind1))]
rab[[k]]$CHRType <- str_extract(rabL[k], "(Allosome|Autosomes)")
rab[[k]]$Ind1 <- annot[[k]]$Ind1b[match(rab[[k]]$a, seq_along(annot[[k]]$Ind1))]
rab[[k]]$Ind2 <- annot[[k]]$Ind2b[match(rab[[k]]$b, seq_along(annot[[k]]$Ind1))]
rab[[k]]$a <- annot[[k]]$Ind1[match(rab[[k]]$a, seq_along(annot[[k]]$Ind1))]
rab[[k]]$b <- annot[[k]]$Ind2[match(rab[[k]]$b, seq_along(annot[[k]]$Ind1))]
rab[[k]]$Pair <- paste(rab[[k]]$Ind1, "Vs", rab[[k]]$Ind2)
# Only needed because the individual Meerkerk_01 is amidst the Utrecht subpopulation ~
rab[[k]] <- rab[[k]] %>% mutate(Invert = str_detect(Ind2, "Meerkerk") & !Ind1 %in% c("Garderen_01", "Garderen_02"),
Temp_Ind1 = Ind1,
Temp_Ind2 = Ind2,
Ind1 = ifelse(Invert, Temp_Ind2, Temp_Ind1),
Ind2 = ifelse(Invert, Temp_Ind1, Temp_Ind2),
Pair = paste(Ind1, "Vs", Ind2)) %>%
select(-Invert, -Temp_Ind1, -Temp_Ind2)
rab[[k]] <- rab[[k]] %>% mutate(Invert = str_detect(Ind2, "Focal Ind."),
Temp_Ind1 = Ind1,
Temp_Ind2 = Ind2,
Ind1 = ifelse(Invert, Temp_Ind2, Temp_Ind1),
Ind2 = ifelse(Invert, Temp_Ind1, Temp_Ind2),
Pair = paste(Ind1, "Vs", Ind2)) %>%
select(-Invert, -Temp_Ind1, -Temp_Ind2)
tryCatch({rab[[k]] <- rab[[k]] %>%
select(Ind1, Ind2, a, b, rab, Pair, CHRType, Population)}, error = function(e) {
print(paste("Error in rab[[", k, "]] column selection:", e$message))})
rab[[k]] <- rab[[k]] %>%
arrange(Ind1, Ind2)}
# Expands rab list ~
fulldf <- bind_rows(rab)
# Fixes individual Y150239 ~
fulldf <- fulldf %>% mutate(across(c(Ind1, Ind2, Pair), ~ str_replace_all(., "Focal Ind._01", "Focal Ind.")))
# Corrects Population names ~
levels(fulldf$Population <- sub("TreeSparrow", "Tree Sparrow", fulldf$Population))
levels(fulldf$Population <- sub("Utrecht", "Focal Area", fulldf$Population))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Focal Area",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Tree Sparrow"))
# Creates plot (Heatmap) ~
Kinship_Plot_Heatmap <-
ggplot(subset(fulldf, CHRType == "Autosomes"), aes(Ind1, y = Ind2, fill = rab)) +
geom_tile(colour = "#000000") +
scale_fill_continuous(low = "#ffffff", high = "#f768a1") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(limits = rev, expand = c(0, 0)) +
facet_wrap(Population ~., scales = "free", ncol = 2) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.2, "cm"),
legend.position = "right",
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 15, l = 15),
legend.box = "vertical",
legend.box.margin = margin(t = 20, b = 30, r = 0, l = 0),
axis.title = element_blank(),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 8, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 8, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 13, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3)) +
guides(fill = guide_legend(title = "Rab", title.theme = element_text(family = "Optima", size = 16, face = "bold"),
label.theme = element_text(family = "Optima", size = 15), reverse = TRUE))
# Saves plot (Heatmap) ~
ggsave(Kinship_Plot_Heatmap, file = "Y150239Genomics--Kinship_NEW.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 12, height = 14, dpi = 600)
### The BEGINNING ~~~~~
##
# Y150239Genomics--Kinship by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tidyverse, plyr, RColorBrewer, extrafont, ggforce, ggstar, ggrepel, RcppCNPy, reshape2,
gridExtra, grid, ggpubr, rphylopic, viridis, forcats)
# Loads data while loading accompanying annotations ~
annot <- list()
rab <- list()
annotL <- dir(pattern = ".labels")
rabL <- dir(pattern = ".res")
for (k in 1:length(annotL)) {
annot[[k]] <- read.table(annotL[k], sep = "\t", header = FALSE, stringsAsFactors = FALSE)
colnames(annot[[k]]) <- c("Ind1")
annot[[k]]$Ind2 <- c(annot[[k]]$Ind1[-c(1)], NA)
annot[[k]]$Population <- gsub("[A-z._]*(Autosomes|Allosome).", "", annotL[k])
annot[[k]]$Population <- gsub(".labels", "", annot[[k]]$Population)
annot[[k]]$SubPopulation <- annot[[k]]$Population
### Only needed because the population Utrecht has subpopulation ~
annot[[k]] <- annot[[k]] %>%
mutate(SubPopulation = case_when(Ind1 %in% c("PD22NLD0146F", "PD22NLD0147F") ~ "Garderen",
Ind1 == "PDOM2022NLD0077M" ~ "Meerkerk",
Ind1 == "PI22NLD0001M" ~ "Focal Ind.", TRUE ~ Population))
annot[[k]]$CHRType <- str_extract(annotL[k], "(Allosome|Autosomes)")
annot[[k]] <- annot[[k]] %>%
group_by(SubPopulation) %>% mutate(Ind1b = paste(SubPopulation, sprintf("%02d", row_number()), sep = "_")) %>%
ungroup() %>%
mutate(Ind2b = lead(Ind1b, default = paste0(SubPopulation[1], "_", sprintf("%02d", n() + 1))))
rab[[k]] <- read.table(rabL[k], header = TRUE, stringsAsFactors = FALSE)
rab[[k]]$a <- rab[[k]]$a + 1
rab[[k]]$Population <- annot[[k]]$Population[match(rab[[k]]$a, seq_along(annot[[k]]$Ind1))]
rab[[k]]$CHRType <- str_extract(rabL[k], "(Allosome|Autosomes)")
rab[[k]]$Ind1 <- annot[[k]]$Ind1b[match(rab[[k]]$a, seq_along(annot[[k]]$Ind1))]
rab[[k]]$Ind2 <- annot[[k]]$Ind2b[match(rab[[k]]$b, seq_along(annot[[k]]$Ind1))]
rab[[k]]$a <- annot[[k]]$Ind1[match(rab[[k]]$a, seq_along(annot[[k]]$Ind1))]
rab[[k]]$b <- annot[[k]]$Ind2[match(rab[[k]]$b, seq_along(annot[[k]]$Ind1))]
rab[[k]]$Pair <- paste(rab[[k]]$Ind1, "Vs", rab[[k]]$Ind2)
# Only needed because the individual Meerkerk_01 is amidst the Utrecht subpopulation ~
rab[[k]] <- rab[[k]] %>% mutate(Invert = str_detect(Ind2, "Meerkerk") & !Ind1 %in% c("Garderen_01", "Garderen_02"),
Temp_Ind1 = Ind1,
Temp_Ind2 = Ind2,
Ind1 = ifelse(Invert, Temp_Ind2, Temp_Ind1),
Ind2 = ifelse(Invert, Temp_Ind1, Temp_Ind2),
Pair = paste(Ind1, "Vs", Ind2)) %>%
select(-Invert, -Temp_Ind1, -Temp_Ind2)
rab[[k]] <- rab[[k]] %>% mutate(Invert = str_detect(Ind2, "Focal Ind."),
Temp_Ind1 = Ind1,
Temp_Ind2 = Ind2,
Ind1 = ifelse(Invert, Temp_Ind2, Temp_Ind1),
Ind2 = ifelse(Invert, Temp_Ind1, Temp_Ind2),
Pair = paste(Ind1, "Vs", Ind2)) %>%
select(-Invert, -Temp_Ind1, -Temp_Ind2)
tryCatch({rab[[k]] <- rab[[k]] %>%
select(Ind1, Ind2, a, b, rab, Pair, CHRType, Population)}, error = function(e) {
print(paste("Error in rab[[", k, "]] column selection:", e$message))})
rab[[k]] <- rab[[k]] %>%
arrange(Ind1, Ind2)}
# Expands rab list ~
fulldf <- bind_rows(rab)
# Fixes individual Y150239 ~
fulldf <- fulldf %>% mutate(across(c(Ind1, Ind2, Pair), ~ str_replace_all(., "Focal Ind._01", "Focal Ind.")))
# Corrects Population names ~
levels(fulldf$Population <- sub("TreeSparrow", "Tree Sparrow", fulldf$Population))
levels(fulldf$Population <- sub("Utrecht", "Focal Area", fulldf$Population))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Focal Area",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Tree Sparrow"))
# Creates plot (Heatmap) ~
Kinship_Plot_Heatmap <-
ggplot(subset(fulldf, CHRType == "Autosomes"), aes(Ind1, y = Ind2, fill = rab)) +
geom_tile(colour = "#000000") +
scale_fill_continuous(low = "#ffffff", high = "#f768a1") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(limits = rev, expand = c(0, 0)) +
facet_wrap(Population ~., scales = "free", ncol = 2) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.2, "cm"),
legend.position = "right",
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 15, l = 15),
legend.box = "vertical",
legend.box.margin = margin(t = 20, b = 30, r = 0, l = 0),
axis.title = element_blank(),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 8, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 8, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 13, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3)) +
guides(fill = guide_legend(title = "Rab", title.theme = element_text(family = "Optima", size = 16, face = "bold"),
label.theme = element_text(family = "Optima", size = 15), reverse = TRUE))
# Saves plot (Heatmap) ~
ggsave(Kinship_Plot_Heatmap, file = "Y150239Genomics--Kinship.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 12, height = 14, dpi = 600)
ggsave(Kinship_Plot_Heatmap, file = "Y150239Genomics--Kinship.jpeg",
limitsize = FALSE, scale = 1, width = 12, height = 14, dpi = 600)
### The BEGINNING ~~~~~
##
# Plots Passer sp. Genomics -- Kinship | Written by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tidyverse, plyr, RColorBrewer, extrafont, ggforce, ggstar, ggrepel, RcppCNPy, reshape2,
gridExtra, grid, ggpubr, rphylopic, viridis, forcats)
# Loads data while loading accompanying annotations ~
annot <- list()
rab <- list()
annotL <- dir(pattern = ".labels")
rabL <- dir(pattern = ".res")
for (k in 1:length(annotL)) {
annot[[k]] <- read.table(annotL[k], sep = "\t", header = FALSE, stringsAsFactors = FALSE)
colnames(annot[[k]]) <- c("Ind1")
annot[[k]]$Ind2 <- c(annot[[k]]$Ind1[-c(1)], NA)
annot[[k]]$Population <- gsub("[A-z._]*(Autosomes|Allosome).", "", annotL[k])
annot[[k]]$Population <- gsub(".labels", "", annot[[k]]$Population)
annot[[k]]$SubPopulation <- annot[[k]]$Population
### Only needed because the population Utrecht has subpopulation ~
annot[[k]] <- annot[[k]] %>%
mutate(SubPopulation = case_when(Ind1 %in% c("PD22NLD0146F", "PD22NLD0147F") ~ "Garderen",
Ind1 == "PDOM2022NLD0077M" ~ "Meerkerk",
Ind1 == "PI22NLD0001M" ~ "Focal Ind.", TRUE ~ Population))
annot[[k]]$CHRType <- str_extract(annotL[k], "(Allosome|Autosomes)")
annot[[k]] <- annot[[k]] %>%
group_by(SubPopulation) %>% mutate(Ind1b = paste(SubPopulation, sprintf("%02d", row_number()), sep = "_")) %>%
ungroup() %>%
mutate(Ind2b = lead(Ind1b, default = paste0(SubPopulation[1], "_", sprintf("%02d", n() + 1))))
rab[[k]] <- read.table(rabL[k], header = TRUE, stringsAsFactors = FALSE)
rab[[k]]$a <- rab[[k]]$a + 1
rab[[k]]$Population <- annot[[k]]$Population[match(rab[[k]]$a, seq_along(annot[[k]]$Ind1))]
rab[[k]]$CHRType <- str_extract(rabL[k], "(Allosome|Autosomes)")
rab[[k]]$Ind1 <- annot[[k]]$Ind1b[match(rab[[k]]$a, seq_along(annot[[k]]$Ind1))]
rab[[k]]$Ind2 <- annot[[k]]$Ind2b[match(rab[[k]]$b, seq_along(annot[[k]]$Ind1))]
rab[[k]]$a <- annot[[k]]$Ind1[match(rab[[k]]$a, seq_along(annot[[k]]$Ind1))]
rab[[k]]$b <- annot[[k]]$Ind2[match(rab[[k]]$b, seq_along(annot[[k]]$Ind1))]
rab[[k]]$Pair <- paste(rab[[k]]$Ind1, "Vs", rab[[k]]$Ind2)
# Only needed because the individual Meerkerk_01 is amidst the Utrecht subpopulation ~
rab[[k]] <- rab[[k]] %>% mutate(Invert = str_detect(Ind2, "Meerkerk") & !Ind1 %in% c("Garderen_01", "Garderen_02"),
Temp_Ind1 = Ind1,
Temp_Ind2 = Ind2,
Ind1 = ifelse(Invert, Temp_Ind2, Temp_Ind1),
Ind2 = ifelse(Invert, Temp_Ind1, Temp_Ind2),
Pair = paste(Ind1, "Vs", Ind2)) %>%
select(-Invert, -Temp_Ind1, -Temp_Ind2)
rab[[k]] <- rab[[k]] %>% mutate(Invert = str_detect(Ind2, "Focal Ind."),
Temp_Ind1 = Ind1,
Temp_Ind2 = Ind2,
Ind1 = ifelse(Invert, Temp_Ind2, Temp_Ind1),
Ind2 = ifelse(Invert, Temp_Ind1, Temp_Ind2),
Pair = paste(Ind1, "Vs", Ind2)) %>%
select(-Invert, -Temp_Ind1, -Temp_Ind2)
tryCatch({rab[[k]] <- rab[[k]] %>%
select(Ind1, Ind2, a, b, rab, Pair, CHRType, Population)}, error = function(e) {
print(paste("Error in rab[[", k, "]] column selection:", e$message))})
rab[[k]] <- rab[[k]] %>%
arrange(Ind1, Ind2)}
# Expands rab list ~
fulldf <- bind_rows(rab)
# Fixes individual Y150239 ~
fulldf <- fulldf %>% mutate(across(c(Ind1, Ind2, Pair), ~ str_replace_all(., "Focal Ind._01", "Focal Ind.")))
# Corrects Population names ~
levels(fulldf$Population <- sub("TreeSparrow", "Tree Sparrow", fulldf$Population))
levels(fulldf$Population <- sub("Utrecht", "Focal Area", fulldf$Population))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Focal Area",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
"Tree Sparrow"))
# Creates plot (Heatmap) ~
Kinship_Plot_Heatmap <-
ggplot(subset(fulldf, CHRType == "Autosomes"), aes(Ind1, y = Ind2, fill = rab)) +
geom_tile(colour = "#000000") +
scale_fill_continuous(low = "#ffffff", high = "#f768a1") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(limits = rev, expand = c(0, 0)) +
facet_wrap(Population ~., scales = "free", ncol = 2) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(.2, "cm"),
legend.position = "right",
legend.key = element_blank(),
legend.background = element_blank(),
legend.margin = margin(t = 0, b = 0, r = 15, l = 15),
legend.box = "vertical",
legend.box.margin = margin(t = 20, b = 30, r = 0, l = 0),
axis.title = element_blank(),
axis.text.x = element_text(family = "Optima", color = "#000000", size = 8, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(family = "Optima", color = "#000000", size = 8, face = "bold"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 13, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3)) +
guides(fill = guide_legend(title = "Rab", title.theme = element_text(family = "Optima", size = 16, face = "bold"),
label.theme = element_text(family = "Optima", size = 15), reverse = TRUE))
# Saves plot (Heatmap) ~
ggsave(Kinship_Plot_Heatmap, file = "Passersp.Genomics--Kinship.pdf",
device = cairo_pdf, limitsize = FALSE, scale = 1, width = 12, height = 14, dpi = 600)
ggsave(Kinship_Plot_Heatmap, file = "Passersp.Genomics--Kinship.jpeg",
limitsize = FALSE, scale = 1, width = 12, height = 14, dpi = 600)
#
##
### The END ~~~~~
### The BEGINNING ~~~~~
##
# Plots Passer sp. Genomics -- LD | First written by Filipe G. Vieira & Emma Fox with later slight modifications by George Pacheco ~
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(optparse, tools, tidyverse, plyr, reshape2, RColorBrewer, extrafont, ggh4x, lgr, jsonlite)
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Specifies options ~
options(width = 200)
# Specifies arguments ~
option_list <- list(
make_option(c('--ld_files'), action='store', type='character', default=NULL, help = 'File with list of LD files to fit and plot (if ommited, can be read from STDIN)'),
make_option(c('--header'), action='store_true', type='logical', default=FALSE, help='Input file has header'),
make_option(c('--col'), action='store', type='numeric', default=3, help='Which column is distance between sites? [%default]'),
make_option(c('--ld'), action='store', type='character', default="r2", help='Which LD stats to plot (r2_ExpG, D, Dp, r2) [%default]'),
make_option(c('--n_ind'), action='store', type='numeric', default=0, help='Number of individuals (for 1-parameter r^2 fitting correction)?'),
make_option(c('-r', '--use_recomb_rate'), action='store_true', type='logical', default=FALSE, help='Assume constant recombination rate. [%default]'),
make_option(c('--recomb_rate'), action='store', type='numeric', default=1, help='Recombination rate (or probability of recombination between adjacent sites in cM/Mb) to calculate genetic distances from physical distances. It is assumed to be constant throughout the whole dataset and, for human datasets, a common rule-of-thumb value is 1cM/Mb (1e-6). [%default]'),
make_option(c('--min_maf'), action='store', type='numeric', default=0, help='Minimum MAF of either site to include in the fitting analysis. [%default]'),
make_option(c('--max_kb_dist'), action='store', type='numeric', default=Inf, help='Maximum distance between SNPs (in kb) to include in the fitting analysis. [%default]'),
make_option(c('--fit_boot'), action='store', type='numeric', default=0, help='Number of bootstrap replicates for fitting CI. [%default]'),
make_option(c('--fit_bin_size'), action='store', type='numeric', default=250, help='Bin data into fixed-sized windows for fitting. [default %default bps]'),
make_option(c('--fit_level'), action='store', type='numeric', default=1, help='Fitting level: no fitting (0), BFGS (1), best of BFGS/Nelder-Mead (2), and best of BFGS/Nelder-Mead/L-BFGS-B (3). [%default]'),
make_option(c('--plot_group'), action='store', type='character', default='File', help='Group variable'),
make_option(c('--plot_data'), action='store_true', type='logical', default=FALSE, help='Also plot data points?'),
make_option(c('--plot_bin_size'), action='store', type='numeric', default=0, help='Bin data into fixed-sized windows for plotting. [default %default bps]'),
make_option(c('--plot_x_lim'), action='store', type='numeric', default=NULL, help='X-axis plot limit (in kb). [%default]'),
make_option(c('--plot_y_lim'), action='store', type='numeric', default=NULL, help='Y-axis plot limit. [%default]'),
make_option(c('--plot_axis_scales'), action='store', type='character', default='fixed', help='Plot axis scales: fixed (default), free, free_x or free_y'),
make_option(c('--plot_size'), action='store', type='character', default='1,2', help='Plot size (height,width). [%default]'),
make_option(c('--plot_scale'), action='store', type='numeric', default=1.5, help='Plot scale. [%default]'),
make_option(c('--plot_wrap'), action='store', type='numeric', default=0, help='Plot in WRAP with X columns (default in GRID)'),
make_option(c('--plot_no_legend'), action='store_true', type='logical', default=FALSE, help='Remove legend from plot'),
make_option(c('--plot_shapes'), action='store_true', type='logical', default=FALSE, help='Use also shapes (apart from colors)'),
make_option(c('--plot_line_smooth'), action='store', type='numeric', default=1000, help='LD decay curve smoothness'),
make_option(c('--bin_quant'), action='store', type='numeric', default=0, help='Quantile to represent the bins (e.g. 0 = mean, 50 = median). [%default]'),
make_option(c('-f','--plot_wrap_formula'), action='store', type='character', default=NULL, help='Plot formula for WRAP. [%default]'),
make_option(c('-o','--out'), action='store', type='character', default=NULL, help='Output file'),
make_option(c('--seed'), action='store', type='numeric', default=NULL, help='Seed for random number generator'),
make_option(c('-l','--loglevel'), action="store", type="character", default="info", help='Log verbosity level. [%default]'))
opt_parser = OptionParser(option_list = option_list)
opt = parse_args(opt_parser)
opt$ld_files = "Passersp.Genomics--LD.list"
opt$plot_x_lim = 100
opt$fit_level = 100
opt$plot_size = "2,5"
opt$max_kb_dist = 100
opt$fit_bin_size = 100
opt$col = 3
opt$bin_quant = 50
opt$fit_boot = 0
opt$plot_wrap = 0
opt$plot_wrap_formula = "CHRType ~ PruningState"
opt$plot_data = TRUE
load("Save.RData")
# Expands fit_data & ld_data by adding a CHRType column ~
fit_data$CHRType <- ifelse(grepl("Autosomes", fit_data$File), "Autosomes",
ifelse(grepl("Allosome", fit_data$File), "Chromosome Z", "Error"))
ld_data$CHRType <- ifelse(grepl("Autosomes", ld_data$File), "Autosomes",
ifelse(grepl("Allosome", ld_data$File), "Chromosome Z", "Error"))
# Expands fit_data & ld_data by adding a PruningState column ~
fit_data$PruningState <- ifelse(grepl("Pruned", fit_data$File), "Pruned", "Not Pruned")
ld_data$PruningState <- ifelse(grepl("Pruned", ld_data$File), "Pruned", "Not Pruned")
# Reorders CHRType ~
fit_data$CHRType <- factor(fit_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Chromosome Z"))
ld_data$CHRType <- factor(ld_data$CHRType, ordered = TRUE,
levels = c("Autosomes", "Chromosome Z"))
# Reorders PruningState ~
fit_data$PruningState <- factor(fit_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
ld_data$PruningState <- factor(ld_data$PruningState, ordered = TRUE,
levels = c("Not Pruned", "Pruned"))
### Create base plot
lgr$info("Plotting data...")
plot <- ggplot() +
theme(panel.spacing = unit(1,"lines")) +
coord_cartesian(xlim = c(0, opt$plot_x_lim), ylim = opt$plot_y_lim) +
scale_colour_hue() +
ylab("Linkage Disequilibrium") +
xlab("Distance")
if(!is.null(opt$plot_wrap_formula)) {
if(opt$plot_wrap) {
plot <- plot + facet_rep_wrap(opt$plot_wrap_formula, ncol = opt$plot_wrap, scales = opt$plot_axis_scales)
} else {
plot <- plot + facet_grid2(opt$plot_wrap_formula, scales = opt$plot_axis_scales, axes = "all", remove_labels = "all")}}
# Add LD decay fit CI ~
if(opt$fit_boot > 0) {
grp <- NULL
if(n_files == n_groups)
grp <- opt$plot_group
plot <- plot + geom_ribbon(data = fit_data, aes(x = dist, ymin = ci_l, ymax = ci_u, group = .data[[opt$plot_group]], fill = .data[[grp]]),
alpha = .2)}
# Add data points
if(opt$plot_data){
# Check format
if(ncol(ld_data) < 4)
stop(lgr$error("Invalid `ld_data` format."))
# Bins data ~
if(opt$plot_bin_size > 1) {
breaks <- seq(0, max(ld_data$dist) + opt$plot_bin_size, opt$plot_bin_size)
ld_data$dist <- cut(ld_data$dist, breaks, head(breaks, -1))
ld_data$dist <- as.numeric(levels(ld_data$dist))[ld_data$dist]
if(opt$bin_quant > 0) {
ld_data <- aggregate(value ~ ., data = ld_data, quantile, probs = opt$bin_quant / 100)
} else {
ld_data <- aggregate(value ~ ., data = ld_data, mean)}}
lgr$debug("Plot data", data = toJSON(head(ld_data, n = 10)))
# Adds points ~
plot <- plot +
geom_point(data = ld_data, aes(x = dist, y = value), colour = "#82526C", size = .05, alpha = .3)}
# Adds LD decay best fit ~
if(length(opt$ld) > 0) {
# Selects variable fields ~
header <- names(which(lapply(lapply(fit_data, unique), length) > 1))
# Excludes non-relevant fields ~
grp <- header[!header %in% unique(c(as.character(opt$plot_wrap_formula), opt$plot_group, "dist", "value", "File", "ci_l", "ci_u"))]
lgr$debug("LD decay best fit", groups = grp, plot_groups = opt$plot_group)
# Defines line type ~
#if(length(grp) == 0) grp <- opt$plot_group
#if(length(grp) > 1) stop(lgr$error("invalid number of linetype groups!"))
plot <-
plot +
geom_line(data = fit_data, aes(x = dist, y = value), colour = "#82526C", linetype = 1)
# If plotting data, add a thin black line to help see the line ~
if(opt$plot_data)
plot <- plot +
geom_line(data = fit_data, aes_string(x = "dist", y = "value"), linetype = 1, colour = "#82526C", linewidth = .1, alpha = 1) +
scale_x_continuous("Genomic Distance (Kb)",
breaks = c(2.5e+04, 5e+04, 7.5e+04),
labels = c("25", "50", "75"),
limits = c(0, 100000),
expand = c(0, 0)) +
scale_y_continuous("Linkage Disequilibrium (r2)",
breaks = c(0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35),
labels = c("0.05", "0.10", "0.15", "0.20", "0.25", "0.30", "0.35"),
limits = c(0, .375),
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.major = element_line(color = "#E5E7E9", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
axis.title.x = element_text(family = "Optima", size = 16, face = "bold", color = "#000000", margin = margin(t = 25, r = 0, b = 0, l = 0)),
axis.title.y = element_text(family = "Optima", size = 16, face = "bold", color = "#000000", margin = margin(t = 0, r = 25, b = 0, l = 0)),
axis.text = element_text(family = "Optima", color = "#000000", size = 11, face = "bold"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.ticks = element_line(color = "#000000", linewidth = .3),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
strip.text = element_text(family = "Optima", colour = "#000000", size = 13, face = "bold"),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_blank(),
legend.spacing.y = unit(.4, "cm"),
legend.key.height = unit(.45, "cm"),
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 5, b = -20, r = 0, l = 30))
# If plotting, apart from linetypes, also shapes (for B/W or color-blind printing) ~
if(opt$plot_shape) {
smooth <- seq(1, opt$plot_x_lim, length = opt$plot_line_smooth)[seq(2, opt$plot_line_smooth,length = 5)]
sample_fit_data <- subset(fit_data, dist %in% smooth)
plot <-
plot +
geom_point(data = sample_fit_data, aes(x = dist, y = value, colour = .data[[opt$plot_group]], shape = .data[[opt$plot_group]]))}}
### Set plot size ~
n_plots <- length(unique(ggplot_build(plot)$data[[1]]$PANEL))
if(!is.null(opt$plot_wrap_formula)) {
par <- dcast(fit_data, opt$plot_wrap_formula, length, fill = 0)
rownames(par) <- par[, 1]
par <- par[,-1, drop = FALSE]
} else {
par <- matrix(ncol = 1)}
lgr$debug("Summary", n_files = n_files, n_ld = n_ld, n_groups = n_groups, n_plots = n_plots)
lgr$debug("Parameters layout", rows_par = nrow(par), cols_par = ncol(par))
plot_height <- opt$plot_size[1] * nrow(par)
plot_width <- opt$plot_size[2] * ncol(par)
### Remove legend if plotting just a single variable
if(n_groups < 2 || opt$plot_no_legend) {
plot <- plot + theme(legend.position="none")
} else {
plot_width = plot_width + 1}
# Saves plot ~
ggsave(plot = plot, file = "Passersp.Genomics--LD.pdf",
device = cairo_pdf, scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
ggsave(plot = plot, file = "Passersp.Genomics--LD.jpeg",
scale = 1, width = 12, height = 8, dpi = 600, limitsize = FALSE)
