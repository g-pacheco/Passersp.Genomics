SBBEFounders <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
dplyr::select(Nome, "E-mail")
write_xlsx(SBBEFounders, "./Lists/Final/SBBEMembers.xlsx")
# Gets SBBE Founders ~
SBBEFoundersLocalCommittee <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
select(Nome, "E-mail")
# Gets SBBE Founders ~
SBBEFoundersLocalCommittee <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
dplyr::select(Nome, "E-mail")
write_xlsx(SBBEFoundersLocalCommittee, "./Lists/Final/SBBEMembersLocalCommittee.xlsx")
# Gets SBBE24 Attendees ~
SBBE24Attendees <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
dplyr::select(Nome, "E-mail")
write_xlsx(SBBE24Attendees, "./Lists/Final/SBBE24Attendees.xlsx")
# Gets SBBE24 Attendees ~
SBBE24Attendees_Fernanda <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
select(Nome, "E-mail", Stage, Instituição)
# Gets SBBE24 Attendees ~
SBBE24Attendees_Fernanda <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
dplyr::select(Nome, "E-mail", Stage, Instituição)
# Gets SBBE24 Attendees ~
SBBE24Attendees_Fernanda <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
dplyr::select(Nome, "E-mail", Stage, Instituição)
write_xlsx(SBBE24Attendees_Fernanda, "./Lists/Final/SBBE24Attendees_Fernanda.xlsx")
# Combine the data frames ~
fulldfUp <- bind_rows(#fulldf_GeneralNumbers,
#fulldf_SocialMedia,
fulldf_StageMembersPerc,
fulldf_StageAttendeesPerc,
#fulldf_RegionMembersPerc,
#fulldf_RegionAttendeesPerc,
fulldf_GenderMembersPerc,
fulldf_GenderAttendeesPerc)
# Expands fulldfUp by creating BarFill ~
fulldfUp$BarFill <- ifelse(str_detect(fulldfUp$Stats, "Members"), "#006837",
ifelse(str_detect(fulldfUp$Stats, "Attendees"), "#41ab5d", "#fbb4ae"))
# Reorders Population ~
fulldfUp$Stats <- factor(fulldfUp$Stats, ordered = T,
levels = c(#"GeneralNumbers",
#"SocialMedia",
"StageMembers",
"StageAttendees",
"GenderMembers",
"GenderAttendees"))
# Sets custom x-axis labels ~
ylabel <- c("StageMembers" = "Membros da SBBE por Estágio Acadêmico",
"StageAttendees" = "Inscritos no SBBE24 por Estágio Acadêmico",
#"GeneralNumbers" = "Números Gerais",
#"SocialMedia" = "Mídias Sociais",
"GenderMembers" = "Membros da SBBE por por Gênero",
"GenderAttendees" = "Inscritos no SBBE24 por Gênero")
# Expands fulldf by creating Stage ~
levels(fulldfUp$Variable <- sub("Mestrado, Doutorado & Pós-doutorado", "Pós-graduação", fulldfUp$Variable))
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- max(y)
if (caseVal < 1){
seq(.1, .9, by = .1)}
#  else if (caseVal > 1000){
#    seq(50, 1000, by = 100)}
else {
seq(50, 650, by = 50)}}
# Custom y-axis labels ~
plot_index_labels <- 0
labels_fun <- function(z) {
plot_index_labels <<- plot_index_labels + 1L
switch(plot_index_labels,
#scales::label_number(accuracy = 1)(z),
#scales::label_number(accuracy = 1)(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z))}
# Custom y-axis limits ~
limits_fun <- function(x){
limitVal <- max(x)
if (limitVal > 1000){
c(0, 1300)}
else if (limitVal > 600){
c(0, 640)}
else if (limitVal < .2){
c(0, .22)}
else if (limitVal < .3){
c(0, .32)}
else if (limitVal < .4){
c(0, .42)}
else if (limitVal < .5){
c(0, .52)}
else if (limitVal < .6){
c(0, .62)}
else {
c(0, .9975)}}
# Gets current date ~
current_date <- format(Sys.Date())
# Formats date ~
current_date_PT <- paste0(day(current_date), " de ",
month(current_date, label = TRUE, abbr = FALSE, locale = "pt_BR"), " de ",
year(current_date))
# Formats date ~
current_date_PT <- paste0(day(current_date), " de ",
month(current_date, label = TRUE, abbr = FALSE, locale = "pt_BR"), " de ",
year(current_date))
# Gets panel ~
Panel <-
ggplot() +
geom_bar(data = fulldfUp, aes(x = as.factor(Variable), y = Percentage, fill = BarFill),
colour = "#000000", linewidth = .3, width = .65, stat = "identity", position = "dodge") +
geom_text(data = subset(fulldfUp, Stats == "GenderMembers" | Stats == "GenderAttendees" | Stats == "StageAttendees" | Stats == "StageAttendees"),
aes(x = as.factor(Variable), y = Percentage,
label = ifelse(Percentage < 1, paste0(round(Percentage * 100), "%"), paste0(round(Percentage), "%")),
#label = ifelse(Percentage < 1, sprintf("%.2f%%", Percentage * 100), paste0(Percentage, "%")),
hjust = ifelse(Percentage < .1, -.5, 1.5),
colour = I(ifelse(Percentage < .1, "#000000", "#f0f0f0"))),  # Wrap color in I()
position = position_dodge(width = .9), family = "cormorant", size = 8, fontface = "bold") +
#geom_text(data = subset(fulldfUp, Stats == "StageMembers" | Stats == "StageAttendees"), aes(x = as.factor(Variable), y = Percentage,
#          label = ifelse(Percentage > 1000, sprintf("%.3f", Percentage / 1000), Percentage)),
#          position = position_dodge(width = .9), family = "cormorant", size = 5.5, fontface = "bold", hjust = 1.75) +
#labs(title = "Sociedade Brasileira de Biologia Evolutiva (SBBE)",
#     subtitle = "I Congresso Brasileiro de Biologia Evolutiva (SBBE24)",
#     caption = paste0("Data: ", current_date_PT, ".")) +
scale_fill_identity() +
facet_wrap(Stats ~ ., scales = "free", ncol = 2, labeller = labeller(Stats = ylabel)) +
scale_y_continuous("Percentagem",
breaks = breaks_fun,
labels = labels_fun,
limits = limits_fun,
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_line(color = "#d9d9d9", linetype = "dashed", linewidth = .05),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.spacing.y = unit(1, "cm"),
plot.title = element_text(family = "cormorant", size = 42, colour = "#006837", face = "bold", hjust = .5, margin = margin(t = 50, r = 0, b = 15, l = 0)),
plot.subtitle = element_text(family = "cormorant", size = 42, colour = "#41ab5d", face = "bold", hjust = .5, margin = margin(t = 0, r = 0, b = 75, l = 0)),
plot.caption = element_text(family = "cormorant", size = 20, face = "bold", hjust = -.175, margin = margin(t = 20, r = 0, b = 10, l = 0)),
axis.title = element_blank(),
axis.text.x = element_text(family = "cormorant", color = "#000000", size = 18, face = "bold"),
axis.text.y = element_text(family = "cormorant", color = "#000000", size = 18, face = "bold"),
axis.ticks = element_line(colour = "#000000", linewidth = .5),
strip.text = element_text(colour = "#000000", size = 23, face = "bold", family = "cormorant"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3),
legend.position = "none") +
coord_flip()
# Saves panel ~
ggsave(Panel, file = "SBBE_SBBE24--SBBE24_Layka.pdf", limitsize = FALSE,
device = cairo_pdf, scale = 1, width = 18, height = 8, dpi = 600)
# Load geom data ~
BRL_Regions <- read_region(simplified = TRUE, year = 2020)
BRL_States <- read_state(code_state = "all", simplified = TRUE, year = 2020)
# Corrects entries ~
levels(BRL_Regions$name_region <- gsub("Centro Oeste", "Centro-Oeste", BRL_Regions$name_region))
levels(BRL_States$name_region <- gsub("Centro Oeste", "Centro-Oeste", BRL_States$name_region))
# Expands BRL_Regions by creating Region ~
BRL_Regions$Region <- ifelse(BRL_Regions$name_region %in% c("Norte"), "North",
ifelse(BRL_Regions$name_region %in% c("Nordeste"), "Northeast",
ifelse(BRL_Regions$name_region %in% c("Centro-Oeste"), "Central-West",
ifelse(BRL_Regions$name_region %in% c("Sudeste"), "Southeast",
ifelse(BRL_Regions$name_region %in% c("Sul"), "South", "Error")))))
# Expands BRL_Regions by adding the SBBE24 & Abroad rows ~
BRL_Regions <- add_row(BRL_Regions, name_region = "SBBE24", Region = "SBBE24")
BRL_Regions <- add_row(BRL_Regions, name_region = "Abroad", Region = "Abroad")
BRL_States <- add_row(BRL_States, abbrev_state = "Abroad", name_region = "Abroad")
# Creates a data frame with the centroids of the Brazilian regions ~
BRL_Regions_Centroids_df <- data.frame(Region = c("North", "Northeast", "Central-West", "Southeast", "South", "SBBE24", "Abroad", "SP"),
Longitude = c(-58, -41.25, -53.15, -44.85, -51.2, -49.271111, -65, -48.62),
Latitude = c(-3.5, -8, -15.5, -20, -27.5, -25.429722, -25, -21.9))
# Merges data frame to perform the change ~
BRL_Regions <- left_join(BRL_Regions, BRL_Regions_Centroids_df, by = "Region")
# Reduces data ~
BRL_Regions <- BRL_Regions %>%
dplyr::select(-code_region)
BRL_States <- BRL_States %>%
dplyr::select(-c(code_state, code_region, name_state))
# Renames columns ~
BRL_States <- BRL_States %>%
rename(Variable = abbrev_state)
# Joins data frames ~
fulldf_RegionAttendeesPerc <- fulldf_RegionAttendeesPerc %>%
rename(name_region = Variable)
fulldf_RegionMembersPerc <- fulldf_RegionMembersPerc %>%
rename(name_region = Variable)
# Corrects the Estrangeiro -> Abroad ~
levels(fulldf_StateAttendeesPerc$Variable <- gsub("Estrangeiro", "Abroad", fulldf_StateAttendeesPerc$Variable))
levels(fulldf_StateMembersPerc$Variable <- gsub("Estrangeiro", "Abroad", fulldf_StateMembersPerc$Variable))
levels(fulldf_RegionAttendeesPerc$name_region <- gsub("Estrangeiro", "Abroad", fulldf_RegionAttendeesPerc$name_region))
levels(fulldf_RegionMembersPerc$name_region <- gsub("Estrangeiro", "Abroad", fulldf_RegionMembersPerc$name_region))
# Merges data frames individually ~
RegionMembers_df <- BRL_States %>%
inner_join(fulldf_RegionMembersPerc, by = "name_region") %>%
mutate(Stats = "Members")  %>%
mutate(Division = "Per Region")
RegionAttendees_df <- BRL_States %>%
inner_join(fulldf_RegionAttendeesPerc, by = "name_region") %>%
mutate(Stats = "Attendees") %>%
mutate(Division = "Per Region")
StateMembers_df <- BRL_States %>%
inner_join(fulldf_StateMembersPerc, by = "Variable") %>%
mutate(Stats = "Members") %>%
mutate(Division = "Per State")
StateAttendees_df <- BRL_States %>%
inner_join(fulldf_StateAttendeesPerc, by = "Variable") %>%
mutate(Stats = "Attendees")  %>%
mutate(Division = "Per State")
# Combines data frames ~
combined_sfs <- bind_rows(StateAttendees_df, StateMembers_df, RegionAttendees_df, RegionMembers_df)
# Expands combined_sfs by adding the SBBE24 row ~
combined_sfs <- add_row(combined_sfs, name_region = "SBBE24", Division = "Per Region", Stats = "Members")
# Converts to data frames ~
combined_dfs <- as.data.frame(combined_sfs)
BRL_Regions_df <- as.data.frame(BRL_Regions)
# Merges data frame to perform the change ~
merged_dfs <- left_join(combined_dfs, BRL_Regions_df, by = "name_region", suffix = c("", ".BRL"))
# Performs the change ~
resulting_dfs <- merged_dfs %>%
mutate(geom = ifelse(Division == "Per Region", geom.BRL, geom))
# Eliminates unnecessary column ~
resulting_dfs <- resulting_dfs %>%
select(-c(n, geom.BRL))
# Eliminates unnecessary column ~
resulting_dfs <- resulting_dfs %>%
dplyr::select(-c(n, geom.BRL))
# Converts data frame back to sf ~
fulldf_map <- st_as_sf(resulting_dfs, crs = st_crs(combined_sfs))
# Renames columns ~
BRL_Regions_Centroids_df <- BRL_Regions_Centroids_df %>%
rename(Variable = Region)
# Converts to data frames ~
combined_dfs <- as.data.frame(combined_sfs)
BRL_Regions_df <- as.data.frame(BRL_Regions)
# Merges data frame to perform the change ~
fulldf_map <- left_join(fulldf_map, BRL_Regions_Centroids_df, by = "Variable", suffix = c("", ".SP"))
# Reorders Population ~
fulldf_map$Stats <- factor(fulldf_map$Stats, ordered = T,
levels = c("Members",
"Attendees"))
# Reorders Division ~
fulldf_map$Division <- factor(fulldf_map$Division, ordered = T,
levels = c("Per Region",
"Per State"))
# Sets custom x-axis labels ~
xlabel_PT <- c("Per Region" = "Por Região",
"Per State" = "Por Estado")
ylabel_PT <- c("Members" = "% de Membros Fundadores da SBBE",
"Attendees" = "% de Participantes no SBBE24")
xlabel_EN <- c("Members" = "% of SBBE Members",
"Attendees" = "% of SBBE24 Attendees")
ylabel_EN <- c("Members" = "% of SBBE Members",
"Attendees" = "% of SBBE24 Attendees")
# Creates panel ~
Panel <-
ggplot() +
geom_sf(data = fulldf_map, aes(fill = Percentage * 100), colour = "#f7fbff") +
coord_sf(xlim = c(-75.75, -33),
ylim = c(-35, 6.5),
expand = FALSE) +
scale_y_continuous(breaks = c(0, -10, -20, -30)) +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude), size = 4, starshape = 15, starstroke = .3, fill = "#FF7B00", colour = "#000000") +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Region == "Abroad"),
aes(x = Longitude, y = Latitude, fill = Percentage), size = 30, starshape = 8, starstroke = .3, colour = "#f7fbff") +
geom_label(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region != "SBBE24"),
aes(x = Longitude, y = Latitude, label = Region),
size = 4.5, label.size = .1, family = "cormorant", fill = "#f7fbff", colour = "#000000") +
geom_label(data = subset(fulldf_map,  Division == "Per Region" & Stats == "Members" & Region == "Abroad"),
aes(x = Longitude, y = Latitude, label = Region),
size = 4.5, label.size = .1, family = "cormorant", fill = "#f7fbff", colour = "#000000") +
#geom_label(data = subset(fulldf_map,  Division == "Per State" & Stats == "Members" & Variable == "SP"),
#           aes(x = Longitude.SP, y = Latitude.SP, label = Variable),
#           size = 4.5, label.size = .1, family = "cormorant", fill = "#f7fbff", colour = "#000000") +
geom_label_repel(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude, label = Region), point.padding = 0,
nudge_x = 3.6, nudge_y = -1, segment.size = 0, segment.color = NA,
size = 4.5, label.size = .1, family = "cormorant", fill = "#FF7B00", colour = "#000000") +
scale_fill_continuous(low = "#d6d6d6", high = "#004529",
breaks = c(10, 20, 30, 40, 50),
labels = c("10%", "20%", "30%", "40%", "50%"),
limits = c(0, 60)) +
facet_grid(Division ~ Stats, labeller = labeller(Division = xlabel_EN, Stats = ylabel_EN)) +
annotation_scale(data = subset(fulldf_map, Division == "Por Região" & Stats == "Members"),
text_family = "cormorant", location = "bl", line_width = 1.25, text_cex = 1, style = "ticks",
pad_x = unit(.2, "in"), pad_y = unit(.2, "in")) +
annotation_north_arrow(data = subset(fulldf_map, Division == "Por Região" & Stats == "Members"),
location = "bl", which_north = "true", style = north_arrow_fancy_orienteering,
pad_x = unit(.2, "in"), pad_y = unit(.3, "in")) +
theme(legend.position = "right",
legend.margin = margin(t = 0, b = 0, r = 0, l = 30),
legend.box.margin = margin(t = 0, b = 20, r = 0, l = 0),
panel.background = element_rect(fill = "#f7fbff"),
panel.border = element_rect(colour = "#000000", linewidth = .25, fill = NA),
panel.grid.major = element_line(color = "#d9d9d9", linetype = "dashed", linewidth = .00005),
plot.margin = margin(0, 0, 0, 0),
axis.text = element_text(family = "Optima", color = "#000000", size = 13, face = "bold"),
axis.title = element_blank(),
axis.ticks = element_line(color = "#000000", linewidth = .25),
strip.text = element_text(family = "cormorant", colour = "#000000", size = 22, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .25)) +
guides(fill = guide_colourbar(title = "", label.theme = element_text(family = "cormorant", size = 14, face = "bold"),
barwidth = 1.5, barheight = 14, order = 1, frame.linetype = 1, frame.colour = "#000000",
ticks.colour = "#f7fbff", direction = "vertical", reverse = FALSE, even.steps = TRUE,
draw.ulim = TRUE, draw.llim = TRUE))
# Saves panel ~
ggsave(Panel, file = "SBBE_SBBE24--DescriptiveMaps_EN.pdf", limitsize = FALSE,
device = cairo_pdf, scale = 1, width = 15, height = 12, dpi = 600)
# Creates panel ~
Panel <-
ggplot() +
geom_sf(data = fulldf_map, aes(fill = Percentage * 100), colour = "#f7fbff") +
coord_sf(xlim = c(-75.75, -33),
ylim = c(-35, 6.5),
expand = FALSE) +
scale_y_continuous(breaks = c(0, -10, -20, -30)) +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude), size = 4, starshape = 15, starstroke = .3, fill = "#FF7B00", colour = "#000000") +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Region == "Abroad"),
aes(x = Longitude, y = Latitude, fill = Percentage), size = 30, starshape = 8, starstroke = .3, colour = "#f7fbff") +
geom_label(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region != "SBBE24"),
aes(x = Longitude, y = Latitude, label = Region),
size = 4.5, label.size = .1, family = "cormorant", fill = "#f7fbff", colour = "#000000") +
geom_label(data = subset(fulldf_map,  Division == "Per Region" & Stats == "Members" & Region == "Abroad"),
aes(x = Longitude, y = Latitude, label = Region),
size = 4.5, label.size = .1, family = "cormorant", fill = "#f7fbff", colour = "#000000") +
#geom_label(data = subset(fulldf_map,  Division == "Per State" & Stats == "Members" & Variable == "SP"),
#           aes(x = Longitude.SP, y = Latitude.SP, label = Variable),
#           size = 4.5, label.size = .1, family = "cormorant", fill = "#f7fbff", colour = "#000000") +
geom_label_repel(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude, label = Region), point.padding = 0,
nudge_x = 3.6, nudge_y = -1, segment.size = 0, segment.color = NA,
size = 4.5, label.size = .1, family = "cormorant", fill = "#FF7B00", colour = "#000000") +
scale_fill_continuous(low = "#d6d6d6", high = "#004529",
breaks = c(10, 20, 30, 40, 50),
labels = c("10%", "20%", "30%", "40%", "50%"),
limits = c(0, 60)) +
facet_grid(Division ~ Stats, labeller = labeller(Division = xlabel_EN, Stats = ylabel_EN)) +
annotation_scale(data = subset(fulldf_map, Division == "Por Região" & Stats == "Members"),
text_family = "cormorant", location = "bl", line_width = 1.25, text_cex = 1, style = "ticks",
pad_x = unit(.2, "in"), pad_y = unit(.2, "in")) +
annotation_north_arrow(data = subset(fulldf_map, Division == "Por Região" & Stats == "Members"),
location = "bl", which_north = "true", style = north_arrow_fancy_orienteering,
pad_x = unit(.2, "in"), pad_y = unit(.3, "in")) +
theme(legend.position = "right",
legend.margin = margin(t = 0, b = 0, r = 0, l = 30),
legend.box.margin = margin(t = 0, b = 20, r = 0, l = 0),
panel.background = element_rect(fill = "#f7fbff"),
panel.border = element_rect(colour = "#000000", linewidth = .25, fill = NA),
panel.grid.major = element_line(color = "#d9d9d9", linetype = "dashed", linewidth = .00005),
plot.margin = margin(0, 0, 0, 0),
axis.text = element_text(family = "Arial", color = "#000000", size = 13, face = "bold"),
axis.title = element_blank(),
axis.ticks = element_line(color = "#000000", linewidth = .25),
strip.text = element_text(family = "cormorant", colour = "#000000", size = 22, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .25)) +
guides(fill = guide_colourbar(title = "", label.theme = element_text(family = "cormorant", size = 14, face = "bold"),
barwidth = 1.5, barheight = 14, order = 1, frame.linetype = 1, frame.colour = "#000000",
ticks.colour = "#f7fbff", direction = "vertical", reverse = FALSE, even.steps = TRUE,
draw.ulim = TRUE, draw.llim = TRUE))
# Saves panel ~
ggsave(Panel, file = "SBBE_SBBE24--DescriptiveMaps_EN_B.pdf", limitsize = FALSE,
device = cairo_pdf, scale = 1, width = 15, height = 12, dpi = 600)
### The BEGINNING ~~~~~
##
# Plots Passer sp. Genomics -- Map | Written by George Pacheco ~
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(rnaturalearth, rnaturalearthdata, ggtext, sf, ggspatial, tidyverse, ggforce, ggstar,
ggrepel, sysfonts, extrafont, gridExtra, grid, cowplot, patchwork, ggpubr, showtext)
# Imports .shp files ~
Global <- ne_countries(scale = 'large', returnclass = 'sf')
PDnr <- read_sf(dsn = ".", layer = "Passer_domesticus")
PInr <- read_sf(dsn = ".", layer = "Passer_italiae")
PHnr <- read_sf(dsn = ".", layer = "Passer_hispaniolensis")
# Loads coordinates ~
SamplingEffort <- read.csv2("Passersp.Genomics--Locations.txt", sep = "\t", header = TRUE, encoding = "UTF-8")
SamplingEffort$Longitude <- as.numeric(SamplingEffort$Longitude)
SamplingEffort$Latitude <- as.numeric(SamplingEffort$Latitude)
# Transforms coordinates ~
SamplingEffort_sf <- st_as_sf(SamplingEffort, coords = c("Longitude", "Latitude"), crs = 4326)
# Reorganises the data ~
SamplingEffort_sf$Species <- factor(SamplingEffort_sf$Species,
levels = c("House", "Italian", "Spanish", NA))
# Reorders Population ~
SamplingEffort$Location <- factor(SamplingEffort$Location, ordered = T,
levels = c("Utrecht",
"Sales",
"Crotone",
"Guglionesi",
"Lesina",
"Chokpak",
NA))
# Defines the shapes to be used for each Group ~
shapes.legend <- as.vector(c(9, 1, 28, 12, 11, 23))
# Creates base map ~
MyLegend_Plot <-
ggplot() +
geom_star(data = SamplingEffort, aes(x = Longitude, y = Latitude, starshape = Location, fill = Species),
size = 4.5, alpha = .9, starstroke = .15) +
scale_starshape_manual(values = shapes.legend, na.translate = FALSE) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#c994c7"), na.translate = FALSE,  drop = FALSE) +
scale_colour_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#c994c7"), na.translate = FALSE, drop = FALSE) +
theme(panel.background = element_rect(fill = "#ffffff"),
legend.position = "top",
legend.box = "vertical") +
guides(fill = guide_legend(title = "Species", title.theme = element_text(family = "Optima", size = 18, face = "bold"),
label.theme = element_text(family = "Optima", size = 16,),
override.aes = list(starshape = 15, size = 5, starstroke = .15), nrow = 1, order = 1),
starshape = guide_legend(title = "Locations", title.theme = element_text(family = "Optima", size = 16, face = "bold"),
label.theme = element_text(family = "Optima", size = 14,),
override.aes = list(size = 5, starstroke = .15), nrow = 1, order = 2),
colour = "none")
# Defines the shapes to be used for each Group ~
shapes.auto <- as.vector(c(9, 1, 28, 12, 11, 23, 15))
# Creates base map ~
MapBody <-
ggplot() +
geom_sf(data = Global, fill = "#fff7ec", color = "#000000") +
geom_sf(data = PInr, fill = "#FFD700", alpha = .5, color = NA) +
geom_star(data = SamplingEffort, aes(x = Longitude, y = Latitude, starshape = Location, fill = Species),
size = 4.5, alpha = .9, starstroke = .15) +
scale_starshape_manual(values = shapes.legend, na.translate = FALSE) +
coord_sf(xlim = c(-13.6, 75), ylim = c(35, 61), expand = FALSE) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#c994c7"), na.translate = FALSE,  drop = FALSE) +
scale_colour_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#c994c7"), na.translate = FALSE, drop = FALSE) +
scale_x_continuous(breaks = seq(-120, 125, by = 10)) +
scale_y_continuous(breaks = seq(-20, 70, by = 10)) +
annotation_scale(text_family = "Optima", location = "tr", line_width = 1.25, text_cex = 1, style = "ticks",
pad_x = unit(.2, "in"), pad_y = unit(.2, "in")) +
annotation_north_arrow(location = "tr", which_north = "true", style = north_arrow_fancy_orienteering,
pad_x = unit(.2, "in"), pad_y = unit(.3, "in")) +
theme(panel.background = element_rect(fill = "#deebf7"),
panel.grid.major = element_line(color = "#ffffff", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "#000000", linewidth = .3, fill = NA),
plot.margin = margin(t = -40, b = 0, r = 10, l = 10),
legend.position = "none",
axis.title = element_blank(),
axis.text = element_text(size = 16, color = "#000000"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
# Isolates legend ~
MyLegendBlog <- get_legend(MyLegend_Plot)
# Gets the final map ~
MapFull <- ggarrange(MapBody, nrow = 1, legend.grob = MyLegendBlog)
# Saves map ~
ggsave(MapFull, file = "Passersp.Genomics--Map.pdf", device = cairo_pdf,
width = 14, height = 8, scale = 1, limitsize = FALSE, dpi = 600)
#ggsave(Map, file = "Passersp.Genomics--Map.jpeg",
#       width = 12, height = 12, scale = 1, limitsize = FALSE, dpi = 600)
#geom_label_repel(data = subset(SamplingEffort, Location == "Sales"), aes(x = Longitude, y = Latitude, label = Location, fill = Species), alpha = .9, show.legend = FALSE,
#                 size = 4, fontface = "bold", colour = "#252525", point.padding = 2, segment.size = .3, nudge_x = -2.5, nudge_y = 1.5,
#                 arrow = arrow(angle = 30, length = unit(.10, "inches"), ends = "last", type = "open")) +
#geom_label_repel(data = subset(SamplingEffort, Location == "Crotone"), aes(x = Longitude, y = Latitude, label = Location, fill = Species), alpha = .9, show.legend = FALSE,
#                 size = 4, fontface = "bold", colour = "#252525", point.padding = 2, segment.size = .3, nudge_x = 1, nudge_y = -2.5,
#                arrow = arrow(angle = 30, length = unit(.10, "inches"), ends = "last", type = "open")) +
#geom_label_repel(data = subset(SamplingEffort, Location == "Guglionesi"), aes(x = Longitude, y = Latitude, label = Location, fill = Species), alpha = .9, show.legend = FALSE,
#                 size = 4, fontface = "bold", colour = "#252525", point.padding = 2, segment.size = .3, nudge_x = -2.25, nudge_y = -2.5,
#                 arrow = arrow(angle = 30, length = unit(.10, "inches"), ends = "last", type = "open")) +
#geom_label_repel(data = subset(SamplingEffort, Location == "Lesina"), aes(x = Longitude, y = Latitude, label = Location, fill = Species), alpha = .9, show.legend = FALSE,
#                 size = 4, fontface = "bold", colour = "#252525", point.padding = 2, segment.size = .3, nudge_x = 4, nudge_y = 2,
#                 arrow = arrow(angle = 30, length = unit(.10, "inches"), ends = "last", type = "open")) +
#geom_label_repel(data = subset(SamplingEffort, Location == "Chokpak"), aes(x = Longitude, y = Latitude, label = Location, fill = Species), alpha = .9, show.legend = FALSE,
#                 size = 4, fontface = "bold", colour = "#252525", point.padding = 2, segment.size = .3, nudge_x = 0, nudge_y = 3,
#                 arrow = arrow(angle = 30, length = unit(.10, "inches"), ends = "last", type = "open")) +
#
##
### The END ~~~~~
# Creates base map ~
MapBody <-
ggplot() +
geom_sf(data = Global, fill = "#fff7ec", color = "#000000") +
geom_sf(data = PInr, fill = "#FFD700", alpha = .5, color = NA) +
geom_star(data = SamplingEffort, aes(x = Longitude, y = Latitude, starshape = Location, fill = Species),
size = 4.5, alpha = .9, starstroke = .15) +
scale_starshape_manual(values = shapes.legend, na.translate = FALSE) +
coord_sf(xlim = c(-13.6, 75), ylim = c(35, 61), expand = FALSE) +
scale_fill_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#c994c7"), na.translate = FALSE,  drop = FALSE) +
scale_colour_manual(values = c("#1E90FF", "#FFD700", "#ee0000", "#c994c7"), na.translate = FALSE, drop = FALSE) +
scale_x_continuous(breaks = seq(-120, 125, by = 10)) +
scale_y_continuous(breaks = seq(-20, 70, by = 10)) +
annotation_north_arrow(location = "tr", which_north = "true", style = north_arrow_fancy_orienteering,
pad_x = unit(.2, "in"), pad_y = unit(.3, "in")) +
annotation_scale(text_family = "Optima", location = "tr", line_width = 1.25, text_cex = 1, style = "ticks",
pad_x = unit(.2, "in"), pad_y = unit(.2, "in")) +
theme(panel.background = element_rect(fill = "#deebf7"),
panel.grid.major = element_line(color = "#ffffff", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "#000000", linewidth = .3, fill = NA),
plot.margin = margin(t = -40, b = 0, r = 10, l = 10),
legend.position = "none",
axis.title = element_blank(),
axis.text = element_text(size = 11, color = "#000000"),
axis.ticks = element_line(color = "#000000", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3))
# Isolates legend ~
MyLegendBlog <- get_legend(MyLegend_Plot)
# Gets the final map ~
MapFull <- ggarrange(MapBody, nrow = 1, legend.grob = MyLegendBlog)
# Saves map ~
ggsave(MapFull, file = "Passersp.Genomics--Map.pdf", device = cairo_pdf,
width = 14, height = 8, scale = 1, limitsize = FALSE, dpi = 600)
